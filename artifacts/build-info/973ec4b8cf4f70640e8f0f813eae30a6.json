{"id":"973ec4b8cf4f70640e8f0f813eae30a6","_format":"hh-sol-build-info-1","solcVersion":"0.8.17","solcLongVersion":"0.8.17+commit.8df45f5f","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256, /* firstTokenId */\n        uint256 batchSize\n    ) internal virtual {\n        if (batchSize > 1) {\n            if (from != address(0)) {\n                _balances[from] -= batchSize;\n            }\n            if (to != address(0)) {\n                _balances[to] += batchSize;\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/Counters.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"},"contracts/FundingContract.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\n\nerror FundingContract__TransferFailed();\nerror FundingContract__NotEnoughETH();\nerror FundingContract__NotGroupFunding();\n\ncontract FundingContract is ERC721, Ownable {\n\n    using SafeMath for uint256;\n    using Counters for Counters.Counter;\n    Counters.Counter private _tokenIds;\n    Counters.Counter private _withdrawers;\n\n    uint256 private s_totalAmount;\n    uint256 private s_withdrawalFee;\n    uint256 private s_vestingPeriod;\n    bool private _isGroupWithdrawal;\n\n    mapping(address => uint256) private s_addressToAmountFunded;\n    address[] s_funders;\n\n    mapping(uint256 => mapping(address => bool)) private s_requestForWithdrawal; \n\n    \n\n    modifier onlyGroupFunding() {\n        if(!_isGroupWithdrawal){\n            revert FundingContract__NotGroupFunding();\n        }\n       _;\n    }\n\n    constructor(\n        // uint256 totalFunding,\n        // uint256 withdrawalFee,\n        // uint256 vestingPeriod,\n        // bool isGroupWithdrawal\n    ) ERC721('FundingContractToken', 'FCT'){\n\n        // s_totalAmount = totalFunding;\n        // s_withdrawalFee = withdrawalFee;\n        // s_vestingPeriod = vestingPeriod;\n        // _isGroupWithdrawal = isGroupWithdrawal;\n    }\n\n\n\n    function depositFunds() public payable{\n        \n        uint256 minFundingAmount = getMinimumFundingAmount();\n        uint256 currentTokenId = _tokenIds.current();\n\n        if(msg.value <= minFundingAmount){\n            revert FundingContract__NotEnoughETH();\n        }\n        s_addressToAmountFunded[msg.sender] = msg.value;\n        s_funders.push(msg.sender);\n        _safeMint(msg.sender, currentTokenId);\n        _tokenIds.increment();\n        \n\n    }\n\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory){\n        /**\n         *  TODO \n         * \n         */\n    }\n\n    function claim() public {\n        /**\n         * TODO\n         * \n         */\n    }\n\n    function requestForWithdrawal(uint256 tokenId) public onlyGroupFunding {\n        s_requestForWithdrawal[tokenId][msg.sender] = true;\n        _withdrawers.increment();\n    }\n\n    // Receive any funds sent to the contract\n    receive() external payable {}\n\n    function withdrawalCheck() public onlyGroupFunding returns(bool){\n        uint256 numberOfWithdrawers = _withdrawers.current();\n        uint256 withdrawalLimit = s_funders.length.mul(60).div(100);\n        if(numberOfWithdrawers >= withdrawalLimit){\n            return true;\n        }\n        return false;\n    }\n\n\n\n    function withdrawFunds() public onlyOwner{\n        if(_isGroupWithdrawal){\n            require(withdrawalCheck(), 'There is no majority approval to withdraw');\n        }\n        uint256 amount = address(this).balance;\n        (bool success, ) = payable(msg.sender).call{value:amount}(\"\");\n        if(!success){\n            revert FundingContract__TransferFailed();\n        }\n    }\n\n    function getMinimumFundingAmount() public view returns(uint256){\n        return s_totalAmount.div(s_vestingPeriod);\n    }\n\n    function getTotalAmount() public view returns(uint256){\n        return s_totalAmount;\n    }\n\n\n    function getWithdrawalFee() public view returns(uint256){\n        return s_withdrawalFee;\n    }\n\n    function getVestingPeriod() public view returns(uint256){\n        return s_vestingPeriod;\n    }\n\n    function getIsGroupWithdrawal() public view returns(bool){\n        return _isGroupWithdrawal;\n    }\n\n    function getAddressToAmountFunded(address funder) public view returns(uint256){\n        return s_addressToAmountFunded[funder];\n    }\n\n    function getFunder(uint256 index) public view returns(address){\n        return s_funders[index];\n    }\n\n\n\n}"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"2018","formattedMessage":"Warning: Function state mutability can be restricted to view\n  --> contracts/FundingContract.sol:93:5:\n   |\n93 |     function withdrawalCheck() public onlyGroupFunding returns(bool){\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Function state mutability can be restricted to view","severity":"warning","sourceLocation":{"end":2750,"file":"contracts/FundingContract.sol","start":2439},"type":"Warning"}],"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[1570],"Ownable":[112]},"id":113,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:0"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":113,"sourceUnit":1571,"src":"127:30:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4,"name":"Context","nameLocations":["683:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":1570,"src":"683:7:0"},"id":5,"nodeType":"InheritanceSpecifier","src":"683:7:0"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"159:494:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":112,"linearizedBaseContracts":[112,1570],"name":"Ownable","nameLocation":"672:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":7,"mutability":"mutable","name":"_owner","nameLocation":"713:6:0","nodeType":"VariableDeclaration","scope":112,"src":"697:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6,"name":"address","nodeType":"ElementaryTypeName","src":"697:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":13,"name":"OwnershipTransferred","nameLocation":"732:20:0","nodeType":"EventDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"769:13:0","nodeType":"VariableDeclaration","scope":13,"src":"753:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8,"name":"address","nodeType":"ElementaryTypeName","src":"753:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":11,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"800:8:0","nodeType":"VariableDeclaration","scope":13,"src":"784:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"784:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"752:57:0"},"src":"726:84:0"},{"body":{"id":22,"nodeType":"Block","src":"926:49:0","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":18,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"955:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":19,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"955:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":17,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"936:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":20,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"936:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":21,"nodeType":"ExpressionStatement","src":"936:32:0"}]},"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"816:91:0","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":23,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[],"src":"923:2:0"},"returnParameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"926:0:0"},"scope":112,"src":"912:63:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":30,"nodeType":"Block","src":"1084:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":26,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"1094:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":27,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1094:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":28,"nodeType":"ExpressionStatement","src":"1094:13:0"},{"id":29,"nodeType":"PlaceholderStatement","src":"1117:1:0"}]},"documentation":{"id":24,"nodeType":"StructuredDocumentation","src":"981:77:0","text":" @dev Throws if called by any account other than the owner."},"id":31,"name":"onlyOwner","nameLocation":"1072:9:0","nodeType":"ModifierDefinition","parameters":{"id":25,"nodeType":"ParameterList","parameters":[],"src":"1081:2:0"},"src":"1063:62:0","virtual":false,"visibility":"internal"},{"body":{"id":39,"nodeType":"Block","src":"1256:30:0","statements":[{"expression":{"id":37,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"1273:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":36,"id":38,"nodeType":"Return","src":"1266:13:0"}]},"documentation":{"id":32,"nodeType":"StructuredDocumentation","src":"1131:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":40,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1210:5:0","nodeType":"FunctionDefinition","parameters":{"id":33,"nodeType":"ParameterList","parameters":[],"src":"1215:2:0"},"returnParameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":35,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":40,"src":"1247:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":34,"name":"address","nodeType":"ElementaryTypeName","src":"1247:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1246:9:0"},"scope":112,"src":"1201:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":53,"nodeType":"Block","src":"1404:85:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":49,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":45,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":40,"src":"1422:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":46,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1422:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":47,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"1433:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1433:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1422:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":50,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1447:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":44,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"1414:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":51,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1414:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":52,"nodeType":"ExpressionStatement","src":"1414:68:0"}]},"documentation":{"id":41,"nodeType":"StructuredDocumentation","src":"1292:62:0","text":" @dev Throws if the sender is not the owner."},"id":54,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1368:11:0","nodeType":"FunctionDefinition","parameters":{"id":42,"nodeType":"ParameterList","parameters":[],"src":"1379:2:0"},"returnParameters":{"id":43,"nodeType":"ParameterList","parameters":[],"src":"1404:0:0"},"scope":112,"src":"1359:130:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":67,"nodeType":"Block","src":"1885:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":63,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1922:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":62,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1914:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":61,"name":"address","nodeType":"ElementaryTypeName","src":"1914:7:0","typeDescriptions":{}}},"id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1914:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":60,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"1895:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1895:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":66,"nodeType":"ExpressionStatement","src":"1895:30:0"}]},"documentation":{"id":55,"nodeType":"StructuredDocumentation","src":"1495:331:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."},"functionSelector":"715018a6","id":68,"implemented":true,"kind":"function","modifiers":[{"id":58,"kind":"modifierInvocation","modifierName":{"id":57,"name":"onlyOwner","nameLocations":["1875:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"1875:9:0"},"nodeType":"ModifierInvocation","src":"1875:9:0"}],"name":"renounceOwnership","nameLocation":"1840:17:0","nodeType":"FunctionDefinition","parameters":{"id":56,"nodeType":"ParameterList","parameters":[],"src":"1857:2:0"},"returnParameters":{"id":59,"nodeType":"ParameterList","parameters":[],"src":"1885:0:0"},"scope":112,"src":"1831:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":90,"nodeType":"Block","src":"2151:128:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":82,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":77,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"2169:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":80,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2189:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":79,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2181:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":78,"name":"address","nodeType":"ElementaryTypeName","src":"2181:7:0","typeDescriptions":{}}},"id":81,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2181:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2169:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":83,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2193:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":76,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"2161:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":84,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2161:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":85,"nodeType":"ExpressionStatement","src":"2161:73:0"},{"expression":{"arguments":[{"id":87,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"2263:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":86,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"2244:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":88,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2244:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":89,"nodeType":"ExpressionStatement","src":"2244:28:0"}]},"documentation":{"id":69,"nodeType":"StructuredDocumentation","src":"1938:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":91,"implemented":true,"kind":"function","modifiers":[{"id":74,"kind":"modifierInvocation","modifierName":{"id":73,"name":"onlyOwner","nameLocations":["2141:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"2141:9:0"},"nodeType":"ModifierInvocation","src":"2141:9:0"}],"name":"transferOwnership","nameLocation":"2090:17:0","nodeType":"FunctionDefinition","parameters":{"id":72,"nodeType":"ParameterList","parameters":[{"constant":false,"id":71,"mutability":"mutable","name":"newOwner","nameLocation":"2116:8:0","nodeType":"VariableDeclaration","scope":91,"src":"2108:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":70,"name":"address","nodeType":"ElementaryTypeName","src":"2108:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2107:18:0"},"returnParameters":{"id":75,"nodeType":"ParameterList","parameters":[],"src":"2151:0:0"},"scope":112,"src":"2081:198:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":110,"nodeType":"Block","src":"2496:124:0","statements":[{"assignments":[98],"declarations":[{"constant":false,"id":98,"mutability":"mutable","name":"oldOwner","nameLocation":"2514:8:0","nodeType":"VariableDeclaration","scope":110,"src":"2506:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":97,"name":"address","nodeType":"ElementaryTypeName","src":"2506:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":100,"initialValue":{"id":99,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2525:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2506:25:0"},{"expression":{"id":103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":101,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2541:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":102,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2550:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2541:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":104,"nodeType":"ExpressionStatement","src":"2541:17:0"},{"eventCall":{"arguments":[{"id":106,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"2594:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":107,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2604:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":105,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"2573:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2573:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":109,"nodeType":"EmitStatement","src":"2568:45:0"}]},"documentation":{"id":92,"nodeType":"StructuredDocumentation","src":"2285:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":111,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2442:18:0","nodeType":"FunctionDefinition","parameters":{"id":95,"nodeType":"ParameterList","parameters":[{"constant":false,"id":94,"mutability":"mutable","name":"newOwner","nameLocation":"2469:8:0","nodeType":"VariableDeclaration","scope":111,"src":"2461:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":93,"name":"address","nodeType":"ElementaryTypeName","src":"2461:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2460:18:0"},"returnParameters":{"id":96,"nodeType":"ParameterList","parameters":[],"src":"2496:0:0"},"scope":112,"src":"2433:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":113,"src":"654:1968:0","usedErrors":[]}],"src":"102:2521:0"},"id":0},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","exportedSymbols":{"Address":[1548],"Context":[1570],"ERC165":[1843],"ERC721":[1057],"IERC165":[1855],"IERC721":[1173],"IERC721Metadata":[1218],"IERC721Receiver":[1191],"Math":[2720],"Strings":[1819]},"id":1058,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":114,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:1"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"./IERC721.sol","id":115,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1058,"sourceUnit":1174,"src":"132:23:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","file":"./IERC721Receiver.sol","id":116,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1058,"sourceUnit":1192,"src":"156:31:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","file":"./extensions/IERC721Metadata.sol","id":117,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1058,"sourceUnit":1219,"src":"188:42:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../utils/Address.sol","id":118,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1058,"sourceUnit":1549,"src":"231:33:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":119,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1058,"sourceUnit":1571,"src":"265:33:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../../utils/Strings.sol","id":120,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1058,"sourceUnit":1820,"src":"299:33:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../../utils/introspection/ERC165.sol","id":121,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1058,"sourceUnit":1844,"src":"333:46:1","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":123,"name":"Context","nameLocations":["647:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":1570,"src":"647:7:1"},"id":124,"nodeType":"InheritanceSpecifier","src":"647:7:1"},{"baseName":{"id":125,"name":"ERC165","nameLocations":["656:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":1843,"src":"656:6:1"},"id":126,"nodeType":"InheritanceSpecifier","src":"656:6:1"},{"baseName":{"id":127,"name":"IERC721","nameLocations":["664:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":1173,"src":"664:7:1"},"id":128,"nodeType":"InheritanceSpecifier","src":"664:7:1"},{"baseName":{"id":129,"name":"IERC721Metadata","nameLocations":["673:15:1"],"nodeType":"IdentifierPath","referencedDeclaration":1218,"src":"673:15:1"},"id":130,"nodeType":"InheritanceSpecifier","src":"673:15:1"}],"canonicalName":"ERC721","contractDependencies":[],"contractKind":"contract","documentation":{"id":122,"nodeType":"StructuredDocumentation","src":"381:246:1","text":" @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."},"fullyImplemented":true,"id":1057,"linearizedBaseContracts":[1057,1218,1173,1843,1855,1570],"name":"ERC721","nameLocation":"637:6:1","nodeType":"ContractDefinition","nodes":[{"global":false,"id":133,"libraryName":{"id":131,"name":"Address","nameLocations":["701:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":1548,"src":"701:7:1"},"nodeType":"UsingForDirective","src":"695:26:1","typeName":{"id":132,"name":"address","nodeType":"ElementaryTypeName","src":"713:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":136,"libraryName":{"id":134,"name":"Strings","nameLocations":["732:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":1819,"src":"732:7:1"},"nodeType":"UsingForDirective","src":"726:26:1","typeName":{"id":135,"name":"uint256","nodeType":"ElementaryTypeName","src":"744:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":138,"mutability":"mutable","name":"_name","nameLocation":"791:5:1","nodeType":"VariableDeclaration","scope":1057,"src":"776:20:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":137,"name":"string","nodeType":"ElementaryTypeName","src":"776:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":140,"mutability":"mutable","name":"_symbol","nameLocation":"838:7:1","nodeType":"VariableDeclaration","scope":1057,"src":"823:22:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":139,"name":"string","nodeType":"ElementaryTypeName","src":"823:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":144,"mutability":"mutable","name":"_owners","nameLocation":"934:7:1","nodeType":"VariableDeclaration","scope":1057,"src":"898:43:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":143,"keyType":{"id":141,"name":"uint256","nodeType":"ElementaryTypeName","src":"906:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"898:27:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueType":{"id":142,"name":"address","nodeType":"ElementaryTypeName","src":"917:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":148,"mutability":"mutable","name":"_balances","nameLocation":"1028:9:1","nodeType":"VariableDeclaration","scope":1057,"src":"992:45:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":147,"keyType":{"id":145,"name":"address","nodeType":"ElementaryTypeName","src":"1000:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"992:27:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":146,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":152,"mutability":"mutable","name":"_tokenApprovals","nameLocation":"1129:15:1","nodeType":"VariableDeclaration","scope":1057,"src":"1093:51:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":151,"keyType":{"id":149,"name":"uint256","nodeType":"ElementaryTypeName","src":"1101:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1093:27:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueType":{"id":150,"name":"address","nodeType":"ElementaryTypeName","src":"1112:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":158,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"1252:18:1","nodeType":"VariableDeclaration","scope":1057,"src":"1199:71:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":157,"keyType":{"id":153,"name":"address","nodeType":"ElementaryTypeName","src":"1207:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1199:44:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueType":{"id":156,"keyType":{"id":154,"name":"address","nodeType":"ElementaryTypeName","src":"1226:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1218:24:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":155,"name":"bool","nodeType":"ElementaryTypeName","src":"1237:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"body":{"id":174,"nodeType":"Block","src":"1446:57:1","statements":[{"expression":{"id":168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":166,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"1456:5:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":167,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"1464:5:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1456:13:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":169,"nodeType":"ExpressionStatement","src":"1456:13:1"},{"expression":{"id":172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":170,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":140,"src":"1479:7:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":171,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":163,"src":"1489:7:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1479:17:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":173,"nodeType":"ExpressionStatement","src":"1479:17:1"}]},"documentation":{"id":159,"nodeType":"StructuredDocumentation","src":"1277:108:1","text":" @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."},"id":175,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":161,"mutability":"mutable","name":"name_","nameLocation":"1416:5:1","nodeType":"VariableDeclaration","scope":175,"src":"1402:19:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":160,"name":"string","nodeType":"ElementaryTypeName","src":"1402:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":163,"mutability":"mutable","name":"symbol_","nameLocation":"1437:7:1","nodeType":"VariableDeclaration","scope":175,"src":"1423:21:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":162,"name":"string","nodeType":"ElementaryTypeName","src":"1423:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1401:44:1"},"returnParameters":{"id":165,"nodeType":"ParameterList","parameters":[],"src":"1446:0:1"},"scope":1057,"src":"1390:113:1","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1842,1854],"body":{"id":205,"nodeType":"Block","src":"1678:192:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":186,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":178,"src":"1707:11:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":188,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1173,"src":"1727:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$1173_$","typeString":"type(contract IERC721)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721_$1173_$","typeString":"type(contract IERC721)"}],"id":187,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"1722:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1722:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721_$1173","typeString":"type(contract IERC721)"}},"id":190,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1736:11:1","memberName":"interfaceId","nodeType":"MemberAccess","src":"1722:25:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1707:40:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":192,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":178,"src":"1763:11:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":194,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1218,"src":"1783:15:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1218_$","typeString":"type(contract IERC721Metadata)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1218_$","typeString":"type(contract IERC721Metadata)"}],"id":193,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"1778:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1778:21:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Metadata_$1218","typeString":"type(contract IERC721Metadata)"}},"id":196,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1800:11:1","memberName":"interfaceId","nodeType":"MemberAccess","src":"1778:33:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1763:48:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1707:104:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":201,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":178,"src":"1851:11:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":199,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967271,"src":"1827:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721_$1057_$","typeString":"type(contract super ERC721)"}},"id":200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1833:17:1","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":1842,"src":"1827:23:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":202,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1827:36:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1707:156:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":185,"id":204,"nodeType":"Return","src":"1688:175:1"}]},"documentation":{"id":176,"nodeType":"StructuredDocumentation","src":"1509:56:1","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":206,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1579:17:1","nodeType":"FunctionDefinition","overrides":{"id":182,"nodeType":"OverrideSpecifier","overrides":[{"id":180,"name":"ERC165","nameLocations":["1646:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":1843,"src":"1646:6:1"},{"id":181,"name":"IERC165","nameLocations":["1654:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":1855,"src":"1654:7:1"}],"src":"1637:25:1"},"parameters":{"id":179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":178,"mutability":"mutable","name":"interfaceId","nameLocation":"1604:11:1","nodeType":"VariableDeclaration","scope":206,"src":"1597:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":177,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1597:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1596:20:1"},"returnParameters":{"id":185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":184,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":206,"src":"1672:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":183,"name":"bool","nodeType":"ElementaryTypeName","src":"1672:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1671:6:1"},"scope":1057,"src":"1570:300:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1098],"body":{"id":229,"nodeType":"Block","src":"2010:123:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":216,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":209,"src":"2028:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2045:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":218,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2037:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":217,"name":"address","nodeType":"ElementaryTypeName","src":"2037:7:1","typeDescriptions":{}}},"id":220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2037:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2028:19:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f7420612076616c6964206f776e6572","id":222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2049:43:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""},"value":"ERC721: address zero is not a valid owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""}],"id":215,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"2020:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2020:73:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":224,"nodeType":"ExpressionStatement","src":"2020:73:1"},{"expression":{"baseExpression":{"id":225,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":148,"src":"2110:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":227,"indexExpression":{"id":226,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":209,"src":"2120:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2110:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":214,"id":228,"nodeType":"Return","src":"2103:23:1"}]},"documentation":{"id":207,"nodeType":"StructuredDocumentation","src":"1876:48:1","text":" @dev See {IERC721-balanceOf}."},"functionSelector":"70a08231","id":230,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1938:9:1","nodeType":"FunctionDefinition","overrides":{"id":211,"nodeType":"OverrideSpecifier","overrides":[],"src":"1983:8:1"},"parameters":{"id":210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":209,"mutability":"mutable","name":"owner","nameLocation":"1956:5:1","nodeType":"VariableDeclaration","scope":230,"src":"1948:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":208,"name":"address","nodeType":"ElementaryTypeName","src":"1948:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1947:15:1"},"returnParameters":{"id":214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":213,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":230,"src":"2001:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":212,"name":"uint256","nodeType":"ElementaryTypeName","src":"2001:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2000:9:1"},"scope":1057,"src":"1929:204:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1106],"body":{"id":257,"nodeType":"Block","src":"2271:138:1","statements":[{"assignments":[240],"declarations":[{"constant":false,"id":240,"mutability":"mutable","name":"owner","nameLocation":"2289:5:1","nodeType":"VariableDeclaration","scope":257,"src":"2281:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":239,"name":"address","nodeType":"ElementaryTypeName","src":"2281:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":244,"initialValue":{"arguments":[{"id":242,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"2306:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":241,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":540,"src":"2297:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2297:17:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2281:33:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":246,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":240,"src":"2332:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2349:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":248,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2341:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":247,"name":"address","nodeType":"ElementaryTypeName","src":"2341:7:1","typeDescriptions":{}}},"id":250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2341:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2332:19:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2353:26:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":245,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"2324:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2324:56:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":254,"nodeType":"ExpressionStatement","src":"2324:56:1"},{"expression":{"id":255,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":240,"src":"2397:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":238,"id":256,"nodeType":"Return","src":"2390:12:1"}]},"documentation":{"id":231,"nodeType":"StructuredDocumentation","src":"2139:46:1","text":" @dev See {IERC721-ownerOf}."},"functionSelector":"6352211e","id":258,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"2199:7:1","nodeType":"FunctionDefinition","overrides":{"id":235,"nodeType":"OverrideSpecifier","overrides":[],"src":"2244:8:1"},"parameters":{"id":234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":233,"mutability":"mutable","name":"tokenId","nameLocation":"2215:7:1","nodeType":"VariableDeclaration","scope":258,"src":"2207:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":232,"name":"uint256","nodeType":"ElementaryTypeName","src":"2207:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2206:17:1"},"returnParameters":{"id":238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":237,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":258,"src":"2262:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":236,"name":"address","nodeType":"ElementaryTypeName","src":"2262:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2261:9:1"},"scope":1057,"src":"2190:219:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1203],"body":{"id":267,"nodeType":"Block","src":"2540:29:1","statements":[{"expression":{"id":265,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"2557:5:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":264,"id":266,"nodeType":"Return","src":"2550:12:1"}]},"documentation":{"id":259,"nodeType":"StructuredDocumentation","src":"2415:51:1","text":" @dev See {IERC721Metadata-name}."},"functionSelector":"06fdde03","id":268,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2480:4:1","nodeType":"FunctionDefinition","overrides":{"id":261,"nodeType":"OverrideSpecifier","overrides":[],"src":"2507:8:1"},"parameters":{"id":260,"nodeType":"ParameterList","parameters":[],"src":"2484:2:1"},"returnParameters":{"id":264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":263,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":268,"src":"2525:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":262,"name":"string","nodeType":"ElementaryTypeName","src":"2525:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2524:15:1"},"scope":1057,"src":"2471:98:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1209],"body":{"id":277,"nodeType":"Block","src":"2704:31:1","statements":[{"expression":{"id":275,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":140,"src":"2721:7:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":274,"id":276,"nodeType":"Return","src":"2714:14:1"}]},"documentation":{"id":269,"nodeType":"StructuredDocumentation","src":"2575:53:1","text":" @dev See {IERC721Metadata-symbol}."},"functionSelector":"95d89b41","id":278,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2642:6:1","nodeType":"FunctionDefinition","overrides":{"id":271,"nodeType":"OverrideSpecifier","overrides":[],"src":"2671:8:1"},"parameters":{"id":270,"nodeType":"ParameterList","parameters":[],"src":"2648:2:1"},"returnParameters":{"id":274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":273,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":278,"src":"2689:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":272,"name":"string","nodeType":"ElementaryTypeName","src":"2689:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2688:15:1"},"scope":1057,"src":"2633:102:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1217],"body":{"id":316,"nodeType":"Block","src":"2889:188:1","statements":[{"expression":{"arguments":[{"id":288,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":281,"src":"2914:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":287,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":935,"src":"2899:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2899:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":290,"nodeType":"ExpressionStatement","src":"2899:23:1"},{"assignments":[292],"declarations":[{"constant":false,"id":292,"mutability":"mutable","name":"baseURI","nameLocation":"2947:7:1","nodeType":"VariableDeclaration","scope":316,"src":"2933:21:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":291,"name":"string","nodeType":"ElementaryTypeName","src":"2933:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":295,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":293,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":326,"src":"2957:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2957:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"2933:34:1"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":298,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":292,"src":"2990:7:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":297,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2984:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":296,"name":"bytes","nodeType":"ElementaryTypeName","src":"2984:5:1","typeDescriptions":{}}},"id":299,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2984:14:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2999:6:1","memberName":"length","nodeType":"MemberAccess","src":"2984:21:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3008:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2984:25:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":313,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3068:2:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2984:86:1","trueExpression":{"arguments":[{"arguments":[{"id":307,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":292,"src":"3036:7:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":308,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":281,"src":"3045:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3053:8:1","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1702,"src":"3045:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":310,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3045:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":305,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"3019:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":306,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3023:12:1","memberName":"encodePacked","nodeType":"MemberAccess","src":"3019:16:1","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":311,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3019:45:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":304,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3012:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":303,"name":"string","nodeType":"ElementaryTypeName","src":"3012:6:1","typeDescriptions":{}}},"id":312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3012:53:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":286,"id":315,"nodeType":"Return","src":"2977:93:1"}]},"documentation":{"id":279,"nodeType":"StructuredDocumentation","src":"2741:55:1","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":317,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"2810:8:1","nodeType":"FunctionDefinition","overrides":{"id":283,"nodeType":"OverrideSpecifier","overrides":[],"src":"2856:8:1"},"parameters":{"id":282,"nodeType":"ParameterList","parameters":[{"constant":false,"id":281,"mutability":"mutable","name":"tokenId","nameLocation":"2827:7:1","nodeType":"VariableDeclaration","scope":317,"src":"2819:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":280,"name":"uint256","nodeType":"ElementaryTypeName","src":"2819:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2818:17:1"},"returnParameters":{"id":286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":285,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":317,"src":"2874:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":284,"name":"string","nodeType":"ElementaryTypeName","src":"2874:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2873:15:1"},"scope":1057,"src":"2801:276:1","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":325,"nodeType":"Block","src":"3385:26:1","statements":[{"expression":{"hexValue":"","id":323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3402:2:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":322,"id":324,"nodeType":"Return","src":"3395:9:1"}]},"documentation":{"id":318,"nodeType":"StructuredDocumentation","src":"3083:231:1","text":" @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."},"id":326,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"3328:8:1","nodeType":"FunctionDefinition","parameters":{"id":319,"nodeType":"ParameterList","parameters":[],"src":"3336:2:1"},"returnParameters":{"id":322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":321,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":326,"src":"3370:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":320,"name":"string","nodeType":"ElementaryTypeName","src":"3370:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3369:15:1"},"scope":1057,"src":"3319:92:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[1146],"body":{"id":368,"nodeType":"Block","src":"3538:336:1","statements":[{"assignments":[336],"declarations":[{"constant":false,"id":336,"mutability":"mutable","name":"owner","nameLocation":"3556:5:1","nodeType":"VariableDeclaration","scope":368,"src":"3548:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":335,"name":"address","nodeType":"ElementaryTypeName","src":"3548:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":341,"initialValue":{"arguments":[{"id":339,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":331,"src":"3579:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":337,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"3564:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1057_$","typeString":"type(contract ERC721)"}},"id":338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3571:7:1","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":258,"src":"3564:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":340,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3564:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3548:39:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":343,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":329,"src":"3605:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":344,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":336,"src":"3611:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3605:11:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e6572","id":346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3618:35:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""},"value":"ERC721: approval to current owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""}],"id":342,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"3597:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3597:57:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":348,"nodeType":"ExpressionStatement","src":"3597:57:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":350,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"3686:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":351,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3686:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":352,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":336,"src":"3702:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3686:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":355,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":336,"src":"3728:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":356,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"3735:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":357,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3735:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":354,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":422,"src":"3711:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3711:37:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3686:62:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","id":360,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3762:63:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","typeString":"literal_string \"ERC721: approve caller is not token owner or approved for all\""},"value":"ERC721: approve caller is not token owner or approved for all"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","typeString":"literal_string \"ERC721: approve caller is not token owner or approved for all\""}],"id":349,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"3665:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":361,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3665:170:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":362,"nodeType":"ExpressionStatement","src":"3665:170:1"},{"expression":{"arguments":[{"id":364,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":329,"src":"3855:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":365,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":331,"src":"3859:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":363,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"3846:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":366,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3846:21:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":367,"nodeType":"ExpressionStatement","src":"3846:21:1"}]},"documentation":{"id":327,"nodeType":"StructuredDocumentation","src":"3417:46:1","text":" @dev See {IERC721-approve}."},"functionSelector":"095ea7b3","id":369,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3477:7:1","nodeType":"FunctionDefinition","overrides":{"id":333,"nodeType":"OverrideSpecifier","overrides":[],"src":"3529:8:1"},"parameters":{"id":332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":329,"mutability":"mutable","name":"to","nameLocation":"3493:2:1","nodeType":"VariableDeclaration","scope":369,"src":"3485:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":328,"name":"address","nodeType":"ElementaryTypeName","src":"3485:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":331,"mutability":"mutable","name":"tokenId","nameLocation":"3505:7:1","nodeType":"VariableDeclaration","scope":369,"src":"3497:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":330,"name":"uint256","nodeType":"ElementaryTypeName","src":"3497:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3484:29:1"},"returnParameters":{"id":334,"nodeType":"ParameterList","parameters":[],"src":"3538:0:1"},"scope":1057,"src":"3468:406:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1162],"body":{"id":386,"nodeType":"Block","src":"4020:82:1","statements":[{"expression":{"arguments":[{"id":379,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"4045:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":378,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":935,"src":"4030:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4030:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":381,"nodeType":"ExpressionStatement","src":"4030:23:1"},{"expression":{"baseExpression":{"id":382,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":152,"src":"4071:15:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":384,"indexExpression":{"id":383,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"4087:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4071:24:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":377,"id":385,"nodeType":"Return","src":"4064:31:1"}]},"documentation":{"id":370,"nodeType":"StructuredDocumentation","src":"3880:50:1","text":" @dev See {IERC721-getApproved}."},"functionSelector":"081812fc","id":387,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"3944:11:1","nodeType":"FunctionDefinition","overrides":{"id":374,"nodeType":"OverrideSpecifier","overrides":[],"src":"3993:8:1"},"parameters":{"id":373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":372,"mutability":"mutable","name":"tokenId","nameLocation":"3964:7:1","nodeType":"VariableDeclaration","scope":387,"src":"3956:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":371,"name":"uint256","nodeType":"ElementaryTypeName","src":"3956:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3955:17:1"},"returnParameters":{"id":377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":376,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":387,"src":"4011:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":375,"name":"address","nodeType":"ElementaryTypeName","src":"4011:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4010:9:1"},"scope":1057,"src":"3935:167:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1154],"body":{"id":403,"nodeType":"Block","src":"4253:69:1","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":397,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"4282:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":398,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4282:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":399,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":390,"src":"4296:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":400,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":392,"src":"4306:8:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":396,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":921,"src":"4263:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4263:52:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":402,"nodeType":"ExpressionStatement","src":"4263:52:1"}]},"documentation":{"id":388,"nodeType":"StructuredDocumentation","src":"4108:56:1","text":" @dev See {IERC721-setApprovalForAll}."},"functionSelector":"a22cb465","id":404,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4178:17:1","nodeType":"FunctionDefinition","overrides":{"id":394,"nodeType":"OverrideSpecifier","overrides":[],"src":"4244:8:1"},"parameters":{"id":393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":390,"mutability":"mutable","name":"operator","nameLocation":"4204:8:1","nodeType":"VariableDeclaration","scope":404,"src":"4196:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":389,"name":"address","nodeType":"ElementaryTypeName","src":"4196:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":392,"mutability":"mutable","name":"approved","nameLocation":"4219:8:1","nodeType":"VariableDeclaration","scope":404,"src":"4214:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":391,"name":"bool","nodeType":"ElementaryTypeName","src":"4214:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4195:33:1"},"returnParameters":{"id":395,"nodeType":"ParameterList","parameters":[],"src":"4253:0:1"},"scope":1057,"src":"4169:153:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1172],"body":{"id":421,"nodeType":"Block","src":"4491:59:1","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":415,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":158,"src":"4508:18:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":417,"indexExpression":{"id":416,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"4527:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4508:25:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":419,"indexExpression":{"id":418,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"4534:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4508:35:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":414,"id":420,"nodeType":"Return","src":"4501:42:1"}]},"documentation":{"id":405,"nodeType":"StructuredDocumentation","src":"4328:55:1","text":" @dev See {IERC721-isApprovedForAll}."},"functionSelector":"e985e9c5","id":422,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4397:16:1","nodeType":"FunctionDefinition","overrides":{"id":411,"nodeType":"OverrideSpecifier","overrides":[],"src":"4467:8:1"},"parameters":{"id":410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":407,"mutability":"mutable","name":"owner","nameLocation":"4422:5:1","nodeType":"VariableDeclaration","scope":422,"src":"4414:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":406,"name":"address","nodeType":"ElementaryTypeName","src":"4414:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":409,"mutability":"mutable","name":"operator","nameLocation":"4437:8:1","nodeType":"VariableDeclaration","scope":422,"src":"4429:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":408,"name":"address","nodeType":"ElementaryTypeName","src":"4429:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4413:33:1"},"returnParameters":{"id":414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":413,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":422,"src":"4485:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":412,"name":"bool","nodeType":"ElementaryTypeName","src":"4485:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4484:6:1"},"scope":1057,"src":"4388:162:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1138],"body":{"id":448,"nodeType":"Block","src":"4731:207:1","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":435,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"4820:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4820:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":437,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":429,"src":"4834:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":434,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":592,"src":"4801:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":438,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4801:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4844:47:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""},"value":"ERC721: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""}],"id":433,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"4793:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":440,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4793:99:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":441,"nodeType":"ExpressionStatement","src":"4793:99:1"},{"expression":{"arguments":[{"id":443,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":425,"src":"4913:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":444,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":427,"src":"4919:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":445,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":429,"src":"4923:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":442,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"4903:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4903:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":447,"nodeType":"ExpressionStatement","src":"4903:28:1"}]},"documentation":{"id":423,"nodeType":"StructuredDocumentation","src":"4556:51:1","text":" @dev See {IERC721-transferFrom}."},"functionSelector":"23b872dd","id":449,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"4621:12:1","nodeType":"FunctionDefinition","overrides":{"id":431,"nodeType":"OverrideSpecifier","overrides":[],"src":"4722:8:1"},"parameters":{"id":430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":425,"mutability":"mutable","name":"from","nameLocation":"4651:4:1","nodeType":"VariableDeclaration","scope":449,"src":"4643:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":424,"name":"address","nodeType":"ElementaryTypeName","src":"4643:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":427,"mutability":"mutable","name":"to","nameLocation":"4673:2:1","nodeType":"VariableDeclaration","scope":449,"src":"4665:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":426,"name":"address","nodeType":"ElementaryTypeName","src":"4665:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":429,"mutability":"mutable","name":"tokenId","nameLocation":"4693:7:1","nodeType":"VariableDeclaration","scope":449,"src":"4685:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":428,"name":"uint256","nodeType":"ElementaryTypeName","src":"4685:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4633:73:1"},"returnParameters":{"id":432,"nodeType":"ParameterList","parameters":[],"src":"4731:0:1"},"scope":1057,"src":"4612:326:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1128],"body":{"id":467,"nodeType":"Block","src":"5127:56:1","statements":[{"expression":{"arguments":[{"id":461,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":452,"src":"5154:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":462,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"5160:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":463,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":456,"src":"5164:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5173:2:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":460,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[468,498],"referencedDeclaration":498,"src":"5137:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":465,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5137:39:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":466,"nodeType":"ExpressionStatement","src":"5137:39:1"}]},"documentation":{"id":450,"nodeType":"StructuredDocumentation","src":"4944:55:1","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"42842e0e","id":468,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"5013:16:1","nodeType":"FunctionDefinition","overrides":{"id":458,"nodeType":"OverrideSpecifier","overrides":[],"src":"5118:8:1"},"parameters":{"id":457,"nodeType":"ParameterList","parameters":[{"constant":false,"id":452,"mutability":"mutable","name":"from","nameLocation":"5047:4:1","nodeType":"VariableDeclaration","scope":468,"src":"5039:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":451,"name":"address","nodeType":"ElementaryTypeName","src":"5039:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":454,"mutability":"mutable","name":"to","nameLocation":"5069:2:1","nodeType":"VariableDeclaration","scope":468,"src":"5061:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":453,"name":"address","nodeType":"ElementaryTypeName","src":"5061:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":456,"mutability":"mutable","name":"tokenId","nameLocation":"5089:7:1","nodeType":"VariableDeclaration","scope":468,"src":"5081:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":455,"name":"uint256","nodeType":"ElementaryTypeName","src":"5081:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5029:73:1"},"returnParameters":{"id":459,"nodeType":"ParameterList","parameters":[],"src":"5127:0:1"},"scope":1057,"src":"5004:179:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1118],"body":{"id":497,"nodeType":"Block","src":"5399:164:1","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":483,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"5436:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5436:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":485,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":475,"src":"5450:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":482,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":592,"src":"5417:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5417:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5460:47:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""},"value":"ERC721: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""}],"id":481,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"5409:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":488,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5409:99:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":489,"nodeType":"ExpressionStatement","src":"5409:99:1"},{"expression":{"arguments":[{"id":491,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":471,"src":"5532:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":492,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":473,"src":"5538:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":493,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":475,"src":"5542:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":494,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"5551:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":490,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":527,"src":"5518:13:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5518:38:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":496,"nodeType":"ExpressionStatement","src":"5518:38:1"}]},"documentation":{"id":469,"nodeType":"StructuredDocumentation","src":"5189:55:1","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"b88d4fde","id":498,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"5258:16:1","nodeType":"FunctionDefinition","overrides":{"id":479,"nodeType":"OverrideSpecifier","overrides":[],"src":"5390:8:1"},"parameters":{"id":478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":471,"mutability":"mutable","name":"from","nameLocation":"5292:4:1","nodeType":"VariableDeclaration","scope":498,"src":"5284:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":470,"name":"address","nodeType":"ElementaryTypeName","src":"5284:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":473,"mutability":"mutable","name":"to","nameLocation":"5314:2:1","nodeType":"VariableDeclaration","scope":498,"src":"5306:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":472,"name":"address","nodeType":"ElementaryTypeName","src":"5306:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":475,"mutability":"mutable","name":"tokenId","nameLocation":"5334:7:1","nodeType":"VariableDeclaration","scope":498,"src":"5326:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":474,"name":"uint256","nodeType":"ElementaryTypeName","src":"5326:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":477,"mutability":"mutable","name":"data","nameLocation":"5364:4:1","nodeType":"VariableDeclaration","scope":498,"src":"5351:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":476,"name":"bytes","nodeType":"ElementaryTypeName","src":"5351:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5274:100:1"},"returnParameters":{"id":480,"nodeType":"ParameterList","parameters":[],"src":"5399:0:1"},"scope":1057,"src":"5249:314:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":526,"nodeType":"Block","src":"6564:165:1","statements":[{"expression":{"arguments":[{"id":511,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":501,"src":"6584:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":512,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":503,"src":"6590:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":513,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":505,"src":"6594:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":510,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"6574:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6574:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":515,"nodeType":"ExpressionStatement","src":"6574:28:1"},{"expression":{"arguments":[{"arguments":[{"id":518,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":501,"src":"6643:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":519,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":503,"src":"6649:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":520,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":505,"src":"6653:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":521,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":507,"src":"6662:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":517,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"6620:22:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":522,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6620:47:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6669:52:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":516,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"6612:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6612:110:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":525,"nodeType":"ExpressionStatement","src":"6612:110:1"}]},"documentation":{"id":499,"nodeType":"StructuredDocumentation","src":"5569:850:1","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n `data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":527,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"6433:13:1","nodeType":"FunctionDefinition","parameters":{"id":508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":501,"mutability":"mutable","name":"from","nameLocation":"6464:4:1","nodeType":"VariableDeclaration","scope":527,"src":"6456:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":500,"name":"address","nodeType":"ElementaryTypeName","src":"6456:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":503,"mutability":"mutable","name":"to","nameLocation":"6486:2:1","nodeType":"VariableDeclaration","scope":527,"src":"6478:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":502,"name":"address","nodeType":"ElementaryTypeName","src":"6478:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":505,"mutability":"mutable","name":"tokenId","nameLocation":"6506:7:1","nodeType":"VariableDeclaration","scope":527,"src":"6498:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":504,"name":"uint256","nodeType":"ElementaryTypeName","src":"6498:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":507,"mutability":"mutable","name":"data","nameLocation":"6536:4:1","nodeType":"VariableDeclaration","scope":527,"src":"6523:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":506,"name":"bytes","nodeType":"ElementaryTypeName","src":"6523:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6446:100:1"},"returnParameters":{"id":509,"nodeType":"ParameterList","parameters":[],"src":"6564:0:1"},"scope":1057,"src":"6424:305:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":539,"nodeType":"Block","src":"6913:40:1","statements":[{"expression":{"baseExpression":{"id":535,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":144,"src":"6930:7:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":537,"indexExpression":{"id":536,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"6938:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6930:16:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":534,"id":538,"nodeType":"Return","src":"6923:23:1"}]},"documentation":{"id":528,"nodeType":"StructuredDocumentation","src":"6735:98:1","text":" @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist"},"id":540,"implemented":true,"kind":"function","modifiers":[],"name":"_ownerOf","nameLocation":"6847:8:1","nodeType":"FunctionDefinition","parameters":{"id":531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":530,"mutability":"mutable","name":"tokenId","nameLocation":"6864:7:1","nodeType":"VariableDeclaration","scope":540,"src":"6856:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":529,"name":"uint256","nodeType":"ElementaryTypeName","src":"6856:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6855:17:1"},"returnParameters":{"id":534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":533,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":540,"src":"6904:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":532,"name":"address","nodeType":"ElementaryTypeName","src":"6904:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6903:9:1"},"scope":1057,"src":"6838:115:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":557,"nodeType":"Block","src":"7327:55:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":549,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":543,"src":"7353:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":548,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":540,"src":"7344:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7344:17:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7373:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":552,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7365:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":551,"name":"address","nodeType":"ElementaryTypeName","src":"7365:7:1","typeDescriptions":{}}},"id":554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7365:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7344:31:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":547,"id":556,"nodeType":"Return","src":"7337:38:1"}]},"documentation":{"id":541,"nodeType":"StructuredDocumentation","src":"6959:292:1","text":" @dev Returns whether `tokenId` exists.\n Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n Tokens start existing when they are minted (`_mint`),\n and stop existing when they are burned (`_burn`)."},"id":558,"implemented":true,"kind":"function","modifiers":[],"name":"_exists","nameLocation":"7265:7:1","nodeType":"FunctionDefinition","parameters":{"id":544,"nodeType":"ParameterList","parameters":[{"constant":false,"id":543,"mutability":"mutable","name":"tokenId","nameLocation":"7281:7:1","nodeType":"VariableDeclaration","scope":558,"src":"7273:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":542,"name":"uint256","nodeType":"ElementaryTypeName","src":"7273:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7272:17:1"},"returnParameters":{"id":547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":546,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":558,"src":"7321:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":545,"name":"bool","nodeType":"ElementaryTypeName","src":"7321:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7320:6:1"},"scope":1057,"src":"7256:126:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":591,"nodeType":"Block","src":"7639:162:1","statements":[{"assignments":[569],"declarations":[{"constant":false,"id":569,"mutability":"mutable","name":"owner","nameLocation":"7657:5:1","nodeType":"VariableDeclaration","scope":591,"src":"7649:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":568,"name":"address","nodeType":"ElementaryTypeName","src":"7649:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":574,"initialValue":{"arguments":[{"id":572,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"7680:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":570,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"7665:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1057_$","typeString":"type(contract ERC721)"}},"id":571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7672:7:1","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":258,"src":"7665:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7665:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7649:39:1"},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":575,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"7706:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":576,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":569,"src":"7717:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7706:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":579,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":569,"src":"7743:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":580,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"7750:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":578,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":422,"src":"7726:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":581,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7726:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7706:52:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":584,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"7774:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":583,"name":"getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":387,"src":"7762:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7762:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":586,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"7786:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7762:31:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7706:87:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":589,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7705:89:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":567,"id":590,"nodeType":"Return","src":"7698:96:1"}]},"documentation":{"id":559,"nodeType":"StructuredDocumentation","src":"7388:147:1","text":" @dev Returns whether `spender` is allowed to manage `tokenId`.\n Requirements:\n - `tokenId` must exist."},"id":592,"implemented":true,"kind":"function","modifiers":[],"name":"_isApprovedOrOwner","nameLocation":"7549:18:1","nodeType":"FunctionDefinition","parameters":{"id":564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":561,"mutability":"mutable","name":"spender","nameLocation":"7576:7:1","nodeType":"VariableDeclaration","scope":592,"src":"7568:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":560,"name":"address","nodeType":"ElementaryTypeName","src":"7568:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":563,"mutability":"mutable","name":"tokenId","nameLocation":"7593:7:1","nodeType":"VariableDeclaration","scope":592,"src":"7585:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":562,"name":"uint256","nodeType":"ElementaryTypeName","src":"7585:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7567:34:1"},"returnParameters":{"id":567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":566,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":592,"src":"7633:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":565,"name":"bool","nodeType":"ElementaryTypeName","src":"7633:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7632:6:1"},"scope":1057,"src":"7540:261:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":606,"nodeType":"Block","src":"8196:43:1","statements":[{"expression":{"arguments":[{"id":601,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":595,"src":"8216:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":602,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":597,"src":"8220:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8229:2:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":600,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[607,636],"referencedDeclaration":636,"src":"8206:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":604,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8206:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":605,"nodeType":"ExpressionStatement","src":"8206:26:1"}]},"documentation":{"id":593,"nodeType":"StructuredDocumentation","src":"7807:319:1","text":" @dev Safely mints `tokenId` and transfers it to `to`.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":607,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"8140:9:1","nodeType":"FunctionDefinition","parameters":{"id":598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":595,"mutability":"mutable","name":"to","nameLocation":"8158:2:1","nodeType":"VariableDeclaration","scope":607,"src":"8150:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":594,"name":"address","nodeType":"ElementaryTypeName","src":"8150:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":597,"mutability":"mutable","name":"tokenId","nameLocation":"8170:7:1","nodeType":"VariableDeclaration","scope":607,"src":"8162:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":596,"name":"uint256","nodeType":"ElementaryTypeName","src":"8162:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8149:29:1"},"returnParameters":{"id":599,"nodeType":"ParameterList","parameters":[],"src":"8196:0:1"},"scope":1057,"src":"8131:108:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":635,"nodeType":"Block","src":"8574:195:1","statements":[{"expression":{"arguments":[{"id":618,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"8590:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":619,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"8594:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":617,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"8584:5:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8584:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":621,"nodeType":"ExpressionStatement","src":"8584:18:1"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"30","id":626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8664:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":625,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8656:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":624,"name":"address","nodeType":"ElementaryTypeName","src":"8656:7:1","typeDescriptions":{}}},"id":627,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8656:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":628,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"8668:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":629,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"8672:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":630,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":614,"src":"8681:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":623,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"8633:22:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":631,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8633:53:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8700:52:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":622,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"8612:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8612:150:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":634,"nodeType":"ExpressionStatement","src":"8612:150:1"}]},"documentation":{"id":608,"nodeType":"StructuredDocumentation","src":"8245:210:1","text":" @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":636,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"8469:9:1","nodeType":"FunctionDefinition","parameters":{"id":615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":610,"mutability":"mutable","name":"to","nameLocation":"8496:2:1","nodeType":"VariableDeclaration","scope":636,"src":"8488:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":609,"name":"address","nodeType":"ElementaryTypeName","src":"8488:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":612,"mutability":"mutable","name":"tokenId","nameLocation":"8516:7:1","nodeType":"VariableDeclaration","scope":636,"src":"8508:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":611,"name":"uint256","nodeType":"ElementaryTypeName","src":"8508:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":614,"mutability":"mutable","name":"data","nameLocation":"8546:4:1","nodeType":"VariableDeclaration","scope":636,"src":"8533:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":613,"name":"bytes","nodeType":"ElementaryTypeName","src":"8533:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8478:78:1"},"returnParameters":{"id":616,"nodeType":"ParameterList","parameters":[],"src":"8574:0:1"},"scope":1057,"src":"8460:309:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":712,"nodeType":"Block","src":"9152:859:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":645,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"9170:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9184:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":647,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9176:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":646,"name":"address","nodeType":"ElementaryTypeName","src":"9176:7:1","typeDescriptions":{}}},"id":649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9176:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9170:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","id":651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9188:34:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""},"value":"ERC721: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""}],"id":644,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"9162:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":652,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9162:61:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":653,"nodeType":"ExpressionStatement","src":"9162:61:1"},{"expression":{"arguments":[{"id":658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9241:17:1","subExpression":{"arguments":[{"id":656,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"9250:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":655,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"9242:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9242:16:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","id":659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9260:30:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""},"value":"ERC721: token already minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""}],"id":654,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"9233:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":660,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9233:58:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":661,"nodeType":"ExpressionStatement","src":"9233:58:1"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9331:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":664,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9323:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":663,"name":"address","nodeType":"ElementaryTypeName","src":"9323:7:1","typeDescriptions":{}}},"id":666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9323:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":667,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"9335:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":668,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"9339:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9348:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":662,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"9302:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":670,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9302:48:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":671,"nodeType":"ExpressionStatement","src":"9302:48:1"},{"expression":{"arguments":[{"id":676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9445:17:1","subExpression":{"arguments":[{"id":674,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"9454:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":673,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"9446:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":675,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9446:16:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","id":677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9464:30:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""},"value":"ERC721: token already minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""}],"id":672,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"9437:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9437:58:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":679,"nodeType":"ExpressionStatement","src":"9437:58:1"},{"id":686,"nodeType":"UncheckedBlock","src":"9506:360:1","statements":[{"expression":{"id":684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":680,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":148,"src":"9837:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":682,"indexExpression":{"id":681,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"9847:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9837:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9854:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9837:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":685,"nodeType":"ExpressionStatement","src":"9837:18:1"}]},{"expression":{"id":691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":687,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":144,"src":"9876:7:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":689,"indexExpression":{"id":688,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"9884:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9876:16:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":690,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"9895:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9876:21:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":692,"nodeType":"ExpressionStatement","src":"9876:21:1"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9930:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":695,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9922:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":694,"name":"address","nodeType":"ElementaryTypeName","src":"9922:7:1","typeDescriptions":{}}},"id":697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9922:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":698,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"9934:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":699,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"9938:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":693,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1072,"src":"9913:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":700,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9913:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":701,"nodeType":"EmitStatement","src":"9908:38:1"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9985:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":704,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9977:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":703,"name":"address","nodeType":"ElementaryTypeName","src":"9977:7:1","typeDescriptions":{}}},"id":706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9977:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":707,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"9989:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":708,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"9993:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":709,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10002:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":702,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1056,"src":"9957:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":710,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9957:47:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":711,"nodeType":"ExpressionStatement","src":"9957:47:1"}]},"documentation":{"id":637,"nodeType":"StructuredDocumentation","src":"8775:311:1","text":" @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."},"id":713,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"9100:5:1","nodeType":"FunctionDefinition","parameters":{"id":642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":639,"mutability":"mutable","name":"to","nameLocation":"9114:2:1","nodeType":"VariableDeclaration","scope":713,"src":"9106:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":638,"name":"address","nodeType":"ElementaryTypeName","src":"9106:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":641,"mutability":"mutable","name":"tokenId","nameLocation":"9126:7:1","nodeType":"VariableDeclaration","scope":713,"src":"9118:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":640,"name":"uint256","nodeType":"ElementaryTypeName","src":"9118:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9105:29:1"},"returnParameters":{"id":643,"nodeType":"ParameterList","parameters":[],"src":"9152:0:1"},"scope":1057,"src":"9091:920:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":779,"nodeType":"Block","src":"10386:713:1","statements":[{"assignments":[720],"declarations":[{"constant":false,"id":720,"mutability":"mutable","name":"owner","nameLocation":"10404:5:1","nodeType":"VariableDeclaration","scope":779,"src":"10396:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":719,"name":"address","nodeType":"ElementaryTypeName","src":"10396:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":725,"initialValue":{"arguments":[{"id":723,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"10427:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":721,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"10412:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1057_$","typeString":"type(contract ERC721)"}},"id":722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10419:7:1","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":258,"src":"10412:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":724,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10412:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10396:39:1"},{"expression":{"arguments":[{"id":727,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"10467:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":730,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10482:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":729,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10474:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":728,"name":"address","nodeType":"ElementaryTypeName","src":"10474:7:1","typeDescriptions":{}}},"id":731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10474:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":732,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"10486:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10495:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":726,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"10446:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10446:51:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":735,"nodeType":"ExpressionStatement","src":"10446:51:1"},{"expression":{"id":741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":736,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"10599:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":739,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"10622:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":737,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"10607:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1057_$","typeString":"type(contract ERC721)"}},"id":738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10614:7:1","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":258,"src":"10607:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10607:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10599:31:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":742,"nodeType":"ExpressionStatement","src":"10599:31:1"},{"expression":{"id":746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"10668:31:1","subExpression":{"baseExpression":{"id":743,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":152,"src":"10675:15:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":745,"indexExpression":{"id":744,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"10691:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10675:24:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":747,"nodeType":"ExpressionStatement","src":"10668:31:1"},{"id":754,"nodeType":"UncheckedBlock","src":"10710:237:1","statements":[{"expression":{"id":752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":748,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":148,"src":"10915:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":750,"indexExpression":{"id":749,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"10925:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10915:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10935:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10915:21:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":753,"nodeType":"ExpressionStatement","src":"10915:21:1"}]},{"expression":{"id":758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"10956:23:1","subExpression":{"baseExpression":{"id":755,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":144,"src":"10963:7:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":757,"indexExpression":{"id":756,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"10971:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10963:16:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":759,"nodeType":"ExpressionStatement","src":"10956:23:1"},{"eventCall":{"arguments":[{"id":761,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"11004:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11019:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":763,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11011:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":762,"name":"address","nodeType":"ElementaryTypeName","src":"11011:7:1","typeDescriptions":{}}},"id":765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11011:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":766,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"11023:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":760,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1072,"src":"10995:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":767,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10995:36:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":768,"nodeType":"EmitStatement","src":"10990:41:1"},{"expression":{"arguments":[{"id":770,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"11062:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":773,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11077:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":772,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11069:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":771,"name":"address","nodeType":"ElementaryTypeName","src":"11069:7:1","typeDescriptions":{}}},"id":774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11069:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":775,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"11081:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11090:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":769,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1056,"src":"11042:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":777,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11042:50:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":778,"nodeType":"ExpressionStatement","src":"11042:50:1"}]},"documentation":{"id":714,"nodeType":"StructuredDocumentation","src":"10017:315:1","text":" @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n This is an internal function that does not check if the sender is authorized to operate on the token.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."},"id":780,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"10346:5:1","nodeType":"FunctionDefinition","parameters":{"id":717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":716,"mutability":"mutable","name":"tokenId","nameLocation":"10360:7:1","nodeType":"VariableDeclaration","scope":780,"src":"10352:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":715,"name":"uint256","nodeType":"ElementaryTypeName","src":"10352:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10351:17:1"},"returnParameters":{"id":718,"nodeType":"ParameterList","parameters":[],"src":"10386:0:1"},"scope":1057,"src":"10337:762:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":864,"nodeType":"Block","src":"11532:1124:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":793,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"11565:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":791,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"11550:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1057_$","typeString":"type(contract ERC721)"}},"id":792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11557:7:1","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":258,"src":"11550:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11550:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":795,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"11577:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11550:31:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":797,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11583:39:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":790,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"11542:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":798,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11542:81:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":799,"nodeType":"ExpressionStatement","src":"11542:81:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":801,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"11641:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11655:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":803,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11647:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":802,"name":"address","nodeType":"ElementaryTypeName","src":"11647:7:1","typeDescriptions":{}}},"id":805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11647:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11641:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f2061646472657373","id":807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11659:38:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""},"value":"ERC721: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""}],"id":800,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"11633:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11633:65:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":809,"nodeType":"ExpressionStatement","src":"11633:65:1"},{"expression":{"arguments":[{"id":811,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"11730:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":812,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"11736:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":813,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"11740:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11749:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":810,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"11709:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11709:42:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":816,"nodeType":"ExpressionStatement","src":"11709:42:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":820,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"11866:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":818,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"11851:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1057_$","typeString":"type(contract ERC721)"}},"id":819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11858:7:1","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":258,"src":"11851:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11851:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":822,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"11878:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11851:31:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11884:39:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":817,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"11843:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11843:81:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":826,"nodeType":"ExpressionStatement","src":"11843:81:1"},{"expression":{"id":830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"11986:31:1","subExpression":{"baseExpression":{"id":827,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":152,"src":"11993:15:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":829,"indexExpression":{"id":828,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"12009:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11993:24:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":831,"nodeType":"ExpressionStatement","src":"11986:31:1"},{"id":844,"nodeType":"UncheckedBlock","src":"12028:496:1","statements":[{"expression":{"id":836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":832,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":148,"src":"12461:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":834,"indexExpression":{"id":833,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"12471:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12461:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":835,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12480:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12461:20:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":837,"nodeType":"ExpressionStatement","src":"12461:20:1"},{"expression":{"id":842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":838,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":148,"src":"12495:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":840,"indexExpression":{"id":839,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"12505:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12495:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12512:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12495:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":843,"nodeType":"ExpressionStatement","src":"12495:18:1"}]},{"expression":{"id":849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":845,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":144,"src":"12533:7:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":847,"indexExpression":{"id":846,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"12541:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12533:16:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":848,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"12552:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12533:21:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":850,"nodeType":"ExpressionStatement","src":"12533:21:1"},{"eventCall":{"arguments":[{"id":852,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"12579:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":853,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"12585:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":854,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"12589:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":851,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1072,"src":"12570:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":855,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12570:27:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":856,"nodeType":"EmitStatement","src":"12565:32:1"},{"expression":{"arguments":[{"id":858,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"12628:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":859,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"12634:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":860,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"12638:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12647:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":857,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1056,"src":"12608:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":862,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12608:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":863,"nodeType":"ExpressionStatement","src":"12608:41:1"}]},"documentation":{"id":781,"nodeType":"StructuredDocumentation","src":"11105:313:1","text":" @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."},"id":865,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"11432:9:1","nodeType":"FunctionDefinition","parameters":{"id":788,"nodeType":"ParameterList","parameters":[{"constant":false,"id":783,"mutability":"mutable","name":"from","nameLocation":"11459:4:1","nodeType":"VariableDeclaration","scope":865,"src":"11451:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":782,"name":"address","nodeType":"ElementaryTypeName","src":"11451:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":785,"mutability":"mutable","name":"to","nameLocation":"11481:2:1","nodeType":"VariableDeclaration","scope":865,"src":"11473:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":784,"name":"address","nodeType":"ElementaryTypeName","src":"11473:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":787,"mutability":"mutable","name":"tokenId","nameLocation":"11501:7:1","nodeType":"VariableDeclaration","scope":865,"src":"11493:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":786,"name":"uint256","nodeType":"ElementaryTypeName","src":"11493:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11441:73:1"},"returnParameters":{"id":789,"nodeType":"ParameterList","parameters":[],"src":"11532:0:1"},"scope":1057,"src":"11423:1233:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":888,"nodeType":"Block","src":"12832:107:1","statements":[{"expression":{"id":877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":873,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":152,"src":"12842:15:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":875,"indexExpression":{"id":874,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"12858:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12842:24:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":876,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"12869:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12842:29:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":878,"nodeType":"ExpressionStatement","src":"12842:29:1"},{"eventCall":{"arguments":[{"arguments":[{"id":882,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"12910:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":880,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"12895:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1057_$","typeString":"type(contract ERC721)"}},"id":881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12902:7:1","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":258,"src":"12895:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12895:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":884,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"12920:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":885,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"12924:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":879,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1081,"src":"12886:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":886,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12886:46:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":887,"nodeType":"EmitStatement","src":"12881:51:1"}]},"documentation":{"id":866,"nodeType":"StructuredDocumentation","src":"12662:101:1","text":" @dev Approve `to` to operate on `tokenId`\n Emits an {Approval} event."},"id":889,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"12777:8:1","nodeType":"FunctionDefinition","parameters":{"id":871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":868,"mutability":"mutable","name":"to","nameLocation":"12794:2:1","nodeType":"VariableDeclaration","scope":889,"src":"12786:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":867,"name":"address","nodeType":"ElementaryTypeName","src":"12786:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":870,"mutability":"mutable","name":"tokenId","nameLocation":"12806:7:1","nodeType":"VariableDeclaration","scope":889,"src":"12798:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":869,"name":"uint256","nodeType":"ElementaryTypeName","src":"12798:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12785:29:1"},"returnParameters":{"id":872,"nodeType":"ParameterList","parameters":[],"src":"12832:0:1"},"scope":1057,"src":"12768:171:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":920,"nodeType":"Block","src":"13198:184:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":900,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":892,"src":"13216:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":901,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"13225:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13216:17:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","id":903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13235:27:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""},"value":"ERC721: approve to caller"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""}],"id":899,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"13208:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13208:55:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":905,"nodeType":"ExpressionStatement","src":"13208:55:1"},{"expression":{"id":912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":906,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":158,"src":"13273:18:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":909,"indexExpression":{"id":907,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":892,"src":"13292:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13273:25:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":910,"indexExpression":{"id":908,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"13299:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13273:35:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":911,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":896,"src":"13311:8:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13273:46:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":913,"nodeType":"ExpressionStatement","src":"13273:46:1"},{"eventCall":{"arguments":[{"id":915,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":892,"src":"13349:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":916,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"13356:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":917,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":896,"src":"13366:8:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":914,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"13334:14:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":918,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13334:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":919,"nodeType":"EmitStatement","src":"13329:46:1"}]},"documentation":{"id":890,"nodeType":"StructuredDocumentation","src":"12945:125:1","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Emits an {ApprovalForAll} event."},"id":921,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"13084:18:1","nodeType":"FunctionDefinition","parameters":{"id":897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":892,"mutability":"mutable","name":"owner","nameLocation":"13120:5:1","nodeType":"VariableDeclaration","scope":921,"src":"13112:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":891,"name":"address","nodeType":"ElementaryTypeName","src":"13112:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":894,"mutability":"mutable","name":"operator","nameLocation":"13143:8:1","nodeType":"VariableDeclaration","scope":921,"src":"13135:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":893,"name":"address","nodeType":"ElementaryTypeName","src":"13135:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":896,"mutability":"mutable","name":"approved","nameLocation":"13166:8:1","nodeType":"VariableDeclaration","scope":921,"src":"13161:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":895,"name":"bool","nodeType":"ElementaryTypeName","src":"13161:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13102:78:1"},"returnParameters":{"id":898,"nodeType":"ParameterList","parameters":[],"src":"13198:0:1"},"scope":1057,"src":"13075:307:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":934,"nodeType":"Block","src":"13529:70:1","statements":[{"expression":{"arguments":[{"arguments":[{"id":929,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":924,"src":"13555:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":928,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"13547:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13547:16:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":931,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13565:26:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":927,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"13539:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":932,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13539:53:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":933,"nodeType":"ExpressionStatement","src":"13539:53:1"}]},"documentation":{"id":922,"nodeType":"StructuredDocumentation","src":"13388:73:1","text":" @dev Reverts if the `tokenId` has not been minted yet."},"id":935,"implemented":true,"kind":"function","modifiers":[],"name":"_requireMinted","nameLocation":"13475:14:1","nodeType":"FunctionDefinition","parameters":{"id":925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":924,"mutability":"mutable","name":"tokenId","nameLocation":"13498:7:1","nodeType":"VariableDeclaration","scope":935,"src":"13490:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":923,"name":"uint256","nodeType":"ElementaryTypeName","src":"13490:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13489:17:1"},"returnParameters":{"id":926,"nodeType":"ParameterList","parameters":[],"src":"13529:0:1"},"scope":1057,"src":"13466:133:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":996,"nodeType":"Block","src":"14306:676:1","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":949,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"14320:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14323:10:1","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1236,"src":"14320:13:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":951,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14320:15:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":994,"nodeType":"Block","src":"14940:36:1","statements":[{"expression":{"hexValue":"74727565","id":992,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14961:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":948,"id":993,"nodeType":"Return","src":"14954:11:1"}]},"id":995,"nodeType":"IfStatement","src":"14316:660:1","trueBody":{"id":991,"nodeType":"Block","src":"14337:597:1","statements":[{"clauses":[{"block":{"id":971,"nodeType":"Block","src":"14451:91:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":965,"name":"retval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":963,"src":"14476:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":966,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1191,"src":"14486:15:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1191_$","typeString":"type(contract IERC721Receiver)"}},"id":967,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14502:16:1","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1190,"src":"14486:32:1","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":968,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14519:8:1","memberName":"selector","nodeType":"MemberAccess","src":"14486:41:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"14476:51:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":948,"id":970,"nodeType":"Return","src":"14469:58:1"}]},"errorName":"","id":972,"nodeType":"TryCatchClause","parameters":{"id":964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":963,"mutability":"mutable","name":"retval","nameLocation":"14443:6:1","nodeType":"VariableDeclaration","scope":972,"src":"14436:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":962,"name":"bytes4","nodeType":"ElementaryTypeName","src":"14436:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"14435:15:1"},"src":"14427:115:1"},{"block":{"id":988,"nodeType":"Block","src":"14571:353:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":976,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":974,"src":"14593:6:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14600:6:1","memberName":"length","nodeType":"MemberAccess","src":"14593:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14610:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14593:18:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":986,"nodeType":"Block","src":"14720:190:1","statements":[{"AST":{"nodeType":"YulBlock","src":"14806:86:1","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14843:2:1","type":"","value":"32"},{"name":"reason","nodeType":"YulIdentifier","src":"14847:6:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14839:3:1"},"nodeType":"YulFunctionCall","src":"14839:15:1"},{"arguments":[{"name":"reason","nodeType":"YulIdentifier","src":"14862:6:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14856:5:1"},"nodeType":"YulFunctionCall","src":"14856:13:1"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14832:6:1"},"nodeType":"YulFunctionCall","src":"14832:38:1"},"nodeType":"YulExpressionStatement","src":"14832:38:1"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":974,"isOffset":false,"isSlot":false,"src":"14847:6:1","valueSize":1},{"declaration":974,"isOffset":false,"isSlot":false,"src":"14862:6:1","valueSize":1}],"id":985,"nodeType":"InlineAssembly","src":"14797:95:1"}]},"id":987,"nodeType":"IfStatement","src":"14589:321:1","trueBody":{"id":984,"nodeType":"Block","src":"14613:101:1","statements":[{"expression":{"arguments":[{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":981,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14642:52:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":980,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[4294967277,4294967277],"referencedDeclaration":4294967277,"src":"14635:6:1","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":982,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14635:60:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":983,"nodeType":"ExpressionStatement","src":"14635:60:1"}]}}]},"errorName":"","id":989,"nodeType":"TryCatchClause","parameters":{"id":975,"nodeType":"ParameterList","parameters":[{"constant":false,"id":974,"mutability":"mutable","name":"reason","nameLocation":"14563:6:1","nodeType":"VariableDeclaration","scope":989,"src":"14550:19:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":973,"name":"bytes","nodeType":"ElementaryTypeName","src":"14550:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14549:21:1"},"src":"14543:381:1"}],"externalCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":956,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"14392:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":957,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14392:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":958,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"14406:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":959,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":942,"src":"14412:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":960,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"14421:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":953,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"14371:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":952,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1191,"src":"14355:15:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1191_$","typeString":"type(contract IERC721Receiver)"}},"id":954,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14355:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Receiver_$1191","typeString":"contract IERC721Receiver"}},"id":955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14375:16:1","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1190,"src":"14355:36:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":961,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14355:71:1","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":990,"nodeType":"TryStatement","src":"14351:573:1"}]}}]},"documentation":{"id":936,"nodeType":"StructuredDocumentation","src":"13605:541:1","text":" @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param data bytes optional data to send along with the call\n @return bool whether the call correctly returned the expected magic value"},"id":997,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOnERC721Received","nameLocation":"14160:22:1","nodeType":"FunctionDefinition","parameters":{"id":945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":938,"mutability":"mutable","name":"from","nameLocation":"14200:4:1","nodeType":"VariableDeclaration","scope":997,"src":"14192:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":937,"name":"address","nodeType":"ElementaryTypeName","src":"14192:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":940,"mutability":"mutable","name":"to","nameLocation":"14222:2:1","nodeType":"VariableDeclaration","scope":997,"src":"14214:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":939,"name":"address","nodeType":"ElementaryTypeName","src":"14214:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":942,"mutability":"mutable","name":"tokenId","nameLocation":"14242:7:1","nodeType":"VariableDeclaration","scope":997,"src":"14234:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":941,"name":"uint256","nodeType":"ElementaryTypeName","src":"14234:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":944,"mutability":"mutable","name":"data","nameLocation":"14272:4:1","nodeType":"VariableDeclaration","scope":997,"src":"14259:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":943,"name":"bytes","nodeType":"ElementaryTypeName","src":"14259:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14182:100:1"},"returnParameters":{"id":948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":947,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":997,"src":"14300:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":946,"name":"bool","nodeType":"ElementaryTypeName","src":"14300:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14299:6:1"},"scope":1057,"src":"14151:831:1","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1042,"nodeType":"Block","src":"15856:238:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1009,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1006,"src":"15870:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1010,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15882:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15870:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1041,"nodeType":"IfStatement","src":"15866:222:1","trueBody":{"id":1040,"nodeType":"Block","src":"15885:203:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1012,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"15903:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15919:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1014,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15911:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1013,"name":"address","nodeType":"ElementaryTypeName","src":"15911:7:1","typeDescriptions":{}}},"id":1016,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15911:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15903:18:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1025,"nodeType":"IfStatement","src":"15899:85:1","trueBody":{"id":1024,"nodeType":"Block","src":"15923:61:1","statements":[{"expression":{"id":1022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1018,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":148,"src":"15941:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1020,"indexExpression":{"id":1019,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"15951:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15941:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":1021,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1006,"src":"15960:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15941:28:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1023,"nodeType":"ExpressionStatement","src":"15941:28:1"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1026,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1002,"src":"16001:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16015:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1028,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16007:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1027,"name":"address","nodeType":"ElementaryTypeName","src":"16007:7:1","typeDescriptions":{}}},"id":1030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16007:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"16001:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1039,"nodeType":"IfStatement","src":"15997:81:1","trueBody":{"id":1038,"nodeType":"Block","src":"16019:59:1","statements":[{"expression":{"id":1036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1032,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":148,"src":"16037:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1034,"indexExpression":{"id":1033,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1002,"src":"16047:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16037:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1035,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1006,"src":"16054:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16037:26:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1037,"nodeType":"ExpressionStatement","src":"16037:26:1"}]}}]}}]},"documentation":{"id":998,"nodeType":"StructuredDocumentation","src":"14988:705:1","text":" @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n - When `from` is zero, the tokens will be minted for `to`.\n - When `to` is zero, ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1043,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"15707:20:1","nodeType":"FunctionDefinition","parameters":{"id":1007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1000,"mutability":"mutable","name":"from","nameLocation":"15745:4:1","nodeType":"VariableDeclaration","scope":1043,"src":"15737:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":999,"name":"address","nodeType":"ElementaryTypeName","src":"15737:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1002,"mutability":"mutable","name":"to","nameLocation":"15767:2:1","nodeType":"VariableDeclaration","scope":1043,"src":"15759:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1001,"name":"address","nodeType":"ElementaryTypeName","src":"15759:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1004,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1043,"src":"15779:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1003,"name":"uint256","nodeType":"ElementaryTypeName","src":"15779:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1006,"mutability":"mutable","name":"batchSize","nameLocation":"15823:9:1","nodeType":"VariableDeclaration","scope":1043,"src":"15815:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1005,"name":"uint256","nodeType":"ElementaryTypeName","src":"15815:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15727:111:1"},"returnParameters":{"id":1008,"nodeType":"ParameterList","parameters":[],"src":"15856:0:1"},"scope":1057,"src":"15698:396:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1055,"nodeType":"Block","src":"16951:2:1","statements":[]},"documentation":{"id":1044,"nodeType":"StructuredDocumentation","src":"16100:695:1","text":" @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n - When `from` is zero, the tokens were minted for `to`.\n - When `to` is zero, ``from``'s tokens were burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1056,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"16809:19:1","nodeType":"FunctionDefinition","parameters":{"id":1053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1046,"mutability":"mutable","name":"from","nameLocation":"16846:4:1","nodeType":"VariableDeclaration","scope":1056,"src":"16838:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1045,"name":"address","nodeType":"ElementaryTypeName","src":"16838:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1048,"mutability":"mutable","name":"to","nameLocation":"16868:2:1","nodeType":"VariableDeclaration","scope":1056,"src":"16860:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1047,"name":"address","nodeType":"ElementaryTypeName","src":"16860:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1050,"mutability":"mutable","name":"firstTokenId","nameLocation":"16888:12:1","nodeType":"VariableDeclaration","scope":1056,"src":"16880:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1049,"name":"uint256","nodeType":"ElementaryTypeName","src":"16880:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1052,"mutability":"mutable","name":"batchSize","nameLocation":"16918:9:1","nodeType":"VariableDeclaration","scope":1056,"src":"16910:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1051,"name":"uint256","nodeType":"ElementaryTypeName","src":"16910:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16828:105:1"},"returnParameters":{"id":1054,"nodeType":"ParameterList","parameters":[],"src":"16951:0:1"},"scope":1057,"src":"16800:153:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1058,"src":"628:16327:1","usedErrors":[]}],"src":"107:16849:1"},"id":1},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","exportedSymbols":{"IERC165":[1855],"IERC721":[1173]},"id":1174,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1059,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:2"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":1060,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1174,"sourceUnit":1856,"src":"133:47:2","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1062,"name":"IERC165","nameLocations":["271:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":1855,"src":"271:7:2"},"id":1063,"nodeType":"InheritanceSpecifier","src":"271:7:2"}],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":1061,"nodeType":"StructuredDocumentation","src":"182:67:2","text":" @dev Required interface of an ERC721 compliant contract."},"fullyImplemented":false,"id":1173,"linearizedBaseContracts":[1173,1855],"name":"IERC721","nameLocation":"260:7:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1064,"nodeType":"StructuredDocumentation","src":"285:88:2","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":1072,"name":"Transfer","nameLocation":"384:8:2","nodeType":"EventDefinition","parameters":{"id":1071,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1066,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"409:4:2","nodeType":"VariableDeclaration","scope":1072,"src":"393:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1065,"name":"address","nodeType":"ElementaryTypeName","src":"393:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1068,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"431:2:2","nodeType":"VariableDeclaration","scope":1072,"src":"415:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1067,"name":"address","nodeType":"ElementaryTypeName","src":"415:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1070,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"451:7:2","nodeType":"VariableDeclaration","scope":1072,"src":"435:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1069,"name":"uint256","nodeType":"ElementaryTypeName","src":"435:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"392:67:2"},"src":"378:82:2"},{"anonymous":false,"documentation":{"id":1073,"nodeType":"StructuredDocumentation","src":"466:94:2","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":1081,"name":"Approval","nameLocation":"571:8:2","nodeType":"EventDefinition","parameters":{"id":1080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1075,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"596:5:2","nodeType":"VariableDeclaration","scope":1081,"src":"580:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1074,"name":"address","nodeType":"ElementaryTypeName","src":"580:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1077,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"619:8:2","nodeType":"VariableDeclaration","scope":1081,"src":"603:24:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1076,"name":"address","nodeType":"ElementaryTypeName","src":"603:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1079,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"645:7:2","nodeType":"VariableDeclaration","scope":1081,"src":"629:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1078,"name":"uint256","nodeType":"ElementaryTypeName","src":"629:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"579:74:2"},"src":"565:89:2"},{"anonymous":false,"documentation":{"id":1082,"nodeType":"StructuredDocumentation","src":"660:117:2","text":" @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":1090,"name":"ApprovalForAll","nameLocation":"788:14:2","nodeType":"EventDefinition","parameters":{"id":1089,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1084,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"819:5:2","nodeType":"VariableDeclaration","scope":1090,"src":"803:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1083,"name":"address","nodeType":"ElementaryTypeName","src":"803:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1086,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"842:8:2","nodeType":"VariableDeclaration","scope":1090,"src":"826:24:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1085,"name":"address","nodeType":"ElementaryTypeName","src":"826:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1088,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"857:8:2","nodeType":"VariableDeclaration","scope":1090,"src":"852:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1087,"name":"bool","nodeType":"ElementaryTypeName","src":"852:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"802:64:2"},"src":"782:85:2"},{"documentation":{"id":1091,"nodeType":"StructuredDocumentation","src":"873:76:2","text":" @dev Returns the number of tokens in ``owner``'s account."},"functionSelector":"70a08231","id":1098,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"963:9:2","nodeType":"FunctionDefinition","parameters":{"id":1094,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1093,"mutability":"mutable","name":"owner","nameLocation":"981:5:2","nodeType":"VariableDeclaration","scope":1098,"src":"973:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1092,"name":"address","nodeType":"ElementaryTypeName","src":"973:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"972:15:2"},"returnParameters":{"id":1097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1096,"mutability":"mutable","name":"balance","nameLocation":"1019:7:2","nodeType":"VariableDeclaration","scope":1098,"src":"1011:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1095,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1010:17:2"},"scope":1173,"src":"954:74:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1099,"nodeType":"StructuredDocumentation","src":"1034:131:2","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":1106,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"1179:7:2","nodeType":"FunctionDefinition","parameters":{"id":1102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1101,"mutability":"mutable","name":"tokenId","nameLocation":"1195:7:2","nodeType":"VariableDeclaration","scope":1106,"src":"1187:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1100,"name":"uint256","nodeType":"ElementaryTypeName","src":"1187:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1186:17:2"},"returnParameters":{"id":1105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1104,"mutability":"mutable","name":"owner","nameLocation":"1235:5:2","nodeType":"VariableDeclaration","scope":1106,"src":"1227:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1103,"name":"address","nodeType":"ElementaryTypeName","src":"1227:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1226:15:2"},"scope":1173,"src":"1170:72:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1107,"nodeType":"StructuredDocumentation","src":"1248:556:2","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":1118,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1818:16:2","nodeType":"FunctionDefinition","parameters":{"id":1116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1109,"mutability":"mutable","name":"from","nameLocation":"1852:4:2","nodeType":"VariableDeclaration","scope":1118,"src":"1844:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1108,"name":"address","nodeType":"ElementaryTypeName","src":"1844:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1111,"mutability":"mutable","name":"to","nameLocation":"1874:2:2","nodeType":"VariableDeclaration","scope":1118,"src":"1866:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1110,"name":"address","nodeType":"ElementaryTypeName","src":"1866:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1113,"mutability":"mutable","name":"tokenId","nameLocation":"1894:7:2","nodeType":"VariableDeclaration","scope":1118,"src":"1886:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1112,"name":"uint256","nodeType":"ElementaryTypeName","src":"1886:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1115,"mutability":"mutable","name":"data","nameLocation":"1926:4:2","nodeType":"VariableDeclaration","scope":1118,"src":"1911:19:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1114,"name":"bytes","nodeType":"ElementaryTypeName","src":"1911:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1834:102:2"},"returnParameters":{"id":1117,"nodeType":"ParameterList","parameters":[],"src":"1945:0:2"},"scope":1173,"src":"1809:137:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1119,"nodeType":"StructuredDocumentation","src":"1952:687:2","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"42842e0e","id":1128,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2653:16:2","nodeType":"FunctionDefinition","parameters":{"id":1126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1121,"mutability":"mutable","name":"from","nameLocation":"2687:4:2","nodeType":"VariableDeclaration","scope":1128,"src":"2679:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1120,"name":"address","nodeType":"ElementaryTypeName","src":"2679:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1123,"mutability":"mutable","name":"to","nameLocation":"2709:2:2","nodeType":"VariableDeclaration","scope":1128,"src":"2701:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1122,"name":"address","nodeType":"ElementaryTypeName","src":"2701:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1125,"mutability":"mutable","name":"tokenId","nameLocation":"2729:7:2","nodeType":"VariableDeclaration","scope":1128,"src":"2721:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1124,"name":"uint256","nodeType":"ElementaryTypeName","src":"2721:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2669:73:2"},"returnParameters":{"id":1127,"nodeType":"ParameterList","parameters":[],"src":"2751:0:2"},"scope":1173,"src":"2644:108:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1129,"nodeType":"StructuredDocumentation","src":"2758:732:2","text":" @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":1138,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"3504:12:2","nodeType":"FunctionDefinition","parameters":{"id":1136,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1131,"mutability":"mutable","name":"from","nameLocation":"3534:4:2","nodeType":"VariableDeclaration","scope":1138,"src":"3526:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1130,"name":"address","nodeType":"ElementaryTypeName","src":"3526:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1133,"mutability":"mutable","name":"to","nameLocation":"3556:2:2","nodeType":"VariableDeclaration","scope":1138,"src":"3548:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1132,"name":"address","nodeType":"ElementaryTypeName","src":"3548:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1135,"mutability":"mutable","name":"tokenId","nameLocation":"3576:7:2","nodeType":"VariableDeclaration","scope":1138,"src":"3568:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1134,"name":"uint256","nodeType":"ElementaryTypeName","src":"3568:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3516:73:2"},"returnParameters":{"id":1137,"nodeType":"ParameterList","parameters":[],"src":"3598:0:2"},"scope":1173,"src":"3495:104:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1139,"nodeType":"StructuredDocumentation","src":"3605:452:2","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":1146,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4071:7:2","nodeType":"FunctionDefinition","parameters":{"id":1144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1141,"mutability":"mutable","name":"to","nameLocation":"4087:2:2","nodeType":"VariableDeclaration","scope":1146,"src":"4079:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1140,"name":"address","nodeType":"ElementaryTypeName","src":"4079:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1143,"mutability":"mutable","name":"tokenId","nameLocation":"4099:7:2","nodeType":"VariableDeclaration","scope":1146,"src":"4091:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1142,"name":"uint256","nodeType":"ElementaryTypeName","src":"4091:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4078:29:2"},"returnParameters":{"id":1145,"nodeType":"ParameterList","parameters":[],"src":"4116:0:2"},"scope":1173,"src":"4062:55:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1147,"nodeType":"StructuredDocumentation","src":"4123:309:2","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":1154,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4446:17:2","nodeType":"FunctionDefinition","parameters":{"id":1152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1149,"mutability":"mutable","name":"operator","nameLocation":"4472:8:2","nodeType":"VariableDeclaration","scope":1154,"src":"4464:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1148,"name":"address","nodeType":"ElementaryTypeName","src":"4464:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1151,"mutability":"mutable","name":"_approved","nameLocation":"4487:9:2","nodeType":"VariableDeclaration","scope":1154,"src":"4482:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1150,"name":"bool","nodeType":"ElementaryTypeName","src":"4482:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4463:34:2"},"returnParameters":{"id":1153,"nodeType":"ParameterList","parameters":[],"src":"4506:0:2"},"scope":1173,"src":"4437:70:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1155,"nodeType":"StructuredDocumentation","src":"4513:139:2","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":1162,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4666:11:2","nodeType":"FunctionDefinition","parameters":{"id":1158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1157,"mutability":"mutable","name":"tokenId","nameLocation":"4686:7:2","nodeType":"VariableDeclaration","scope":1162,"src":"4678:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1156,"name":"uint256","nodeType":"ElementaryTypeName","src":"4678:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4677:17:2"},"returnParameters":{"id":1161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1160,"mutability":"mutable","name":"operator","nameLocation":"4726:8:2","nodeType":"VariableDeclaration","scope":1162,"src":"4718:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1159,"name":"address","nodeType":"ElementaryTypeName","src":"4718:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4717:18:2"},"scope":1173,"src":"4657:79:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1163,"nodeType":"StructuredDocumentation","src":"4742:138:2","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"},"functionSelector":"e985e9c5","id":1172,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4894:16:2","nodeType":"FunctionDefinition","parameters":{"id":1168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1165,"mutability":"mutable","name":"owner","nameLocation":"4919:5:2","nodeType":"VariableDeclaration","scope":1172,"src":"4911:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1164,"name":"address","nodeType":"ElementaryTypeName","src":"4911:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1167,"mutability":"mutable","name":"operator","nameLocation":"4934:8:2","nodeType":"VariableDeclaration","scope":1172,"src":"4926:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1166,"name":"address","nodeType":"ElementaryTypeName","src":"4926:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4910:33:2"},"returnParameters":{"id":1171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1170,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1172,"src":"4967:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1169,"name":"bool","nodeType":"ElementaryTypeName","src":"4967:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4966:6:2"},"scope":1173,"src":"4885:88:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1174,"src":"250:4725:2","usedErrors":[]}],"src":"108:4868:2"},"id":2},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","exportedSymbols":{"IERC721Receiver":[1191]},"id":1192,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1175,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"116:23:3"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":1176,"nodeType":"StructuredDocumentation","src":"141:152:3","text":" @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."},"fullyImplemented":false,"id":1191,"linearizedBaseContracts":[1191],"name":"IERC721Receiver","nameLocation":"304:15:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1177,"nodeType":"StructuredDocumentation","src":"326:493:3","text":" @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."},"functionSelector":"150b7a02","id":1190,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"833:16:3","nodeType":"FunctionDefinition","parameters":{"id":1186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1179,"mutability":"mutable","name":"operator","nameLocation":"867:8:3","nodeType":"VariableDeclaration","scope":1190,"src":"859:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1178,"name":"address","nodeType":"ElementaryTypeName","src":"859:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1181,"mutability":"mutable","name":"from","nameLocation":"893:4:3","nodeType":"VariableDeclaration","scope":1190,"src":"885:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1180,"name":"address","nodeType":"ElementaryTypeName","src":"885:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1183,"mutability":"mutable","name":"tokenId","nameLocation":"915:7:3","nodeType":"VariableDeclaration","scope":1190,"src":"907:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1182,"name":"uint256","nodeType":"ElementaryTypeName","src":"907:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1185,"mutability":"mutable","name":"data","nameLocation":"947:4:3","nodeType":"VariableDeclaration","scope":1190,"src":"932:19:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1184,"name":"bytes","nodeType":"ElementaryTypeName","src":"932:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"849:108:3"},"returnParameters":{"id":1189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1188,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1190,"src":"976:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1187,"name":"bytes4","nodeType":"ElementaryTypeName","src":"976:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"975:8:3"},"scope":1191,"src":"824:160:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1192,"src":"294:692:3","usedErrors":[]}],"src":"116:871:3"},"id":3},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","exportedSymbols":{"IERC165":[1855],"IERC721":[1173],"IERC721Metadata":[1218]},"id":1219,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1193,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:4"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../IERC721.sol","id":1194,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1219,"sourceUnit":1174,"src":"137:24:4","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1196,"name":"IERC721","nameLocations":["326:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":1173,"src":"326:7:4"},"id":1197,"nodeType":"InheritanceSpecifier","src":"326:7:4"}],"canonicalName":"IERC721Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":1195,"nodeType":"StructuredDocumentation","src":"163:133:4","text":" @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":1218,"linearizedBaseContracts":[1218,1173,1855],"name":"IERC721Metadata","nameLocation":"307:15:4","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1198,"nodeType":"StructuredDocumentation","src":"340:58:4","text":" @dev Returns the token collection name."},"functionSelector":"06fdde03","id":1203,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"412:4:4","nodeType":"FunctionDefinition","parameters":{"id":1199,"nodeType":"ParameterList","parameters":[],"src":"416:2:4"},"returnParameters":{"id":1202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1201,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1203,"src":"442:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1200,"name":"string","nodeType":"ElementaryTypeName","src":"442:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"441:15:4"},"scope":1218,"src":"403:54:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1204,"nodeType":"StructuredDocumentation","src":"463:60:4","text":" @dev Returns the token collection symbol."},"functionSelector":"95d89b41","id":1209,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"537:6:4","nodeType":"FunctionDefinition","parameters":{"id":1205,"nodeType":"ParameterList","parameters":[],"src":"543:2:4"},"returnParameters":{"id":1208,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1207,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1209,"src":"569:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1206,"name":"string","nodeType":"ElementaryTypeName","src":"569:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"568:15:4"},"scope":1218,"src":"528:56:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1210,"nodeType":"StructuredDocumentation","src":"590:90:4","text":" @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"functionSelector":"c87b56dd","id":1217,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"694:8:4","nodeType":"FunctionDefinition","parameters":{"id":1213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1212,"mutability":"mutable","name":"tokenId","nameLocation":"711:7:4","nodeType":"VariableDeclaration","scope":1217,"src":"703:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1211,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"702:17:4"},"returnParameters":{"id":1216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1215,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1217,"src":"743:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1214,"name":"string","nodeType":"ElementaryTypeName","src":"743:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"742:15:4"},"scope":1218,"src":"685:73:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1219,"src":"297:463:4","usedErrors":[]}],"src":"112:649:4"},"id":4},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[1548]},"id":1549,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1220,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:5"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":1221,"nodeType":"StructuredDocumentation","src":"126:67:5","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1548,"linearizedBaseContracts":[1548],"name":"Address","nameLocation":"202:7:5","nodeType":"ContractDefinition","nodes":[{"body":{"id":1235,"nodeType":"Block","src":"1241:254:5","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1229,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1224,"src":"1465:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1473:4:5","memberName":"code","nodeType":"MemberAccess","src":"1465:12:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1478:6:5","memberName":"length","nodeType":"MemberAccess","src":"1465:19:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1487:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1465:23:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1228,"id":1234,"nodeType":"Return","src":"1458:30:5"}]},"documentation":{"id":1222,"nodeType":"StructuredDocumentation","src":"216:954:5","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":1236,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1184:10:5","nodeType":"FunctionDefinition","parameters":{"id":1225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1224,"mutability":"mutable","name":"account","nameLocation":"1203:7:5","nodeType":"VariableDeclaration","scope":1236,"src":"1195:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1223,"name":"address","nodeType":"ElementaryTypeName","src":"1195:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1194:17:5"},"returnParameters":{"id":1228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1227,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1236,"src":"1235:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1226,"name":"bool","nodeType":"ElementaryTypeName","src":"1235:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1234:6:5"},"scope":1548,"src":"1175:320:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1269,"nodeType":"Block","src":"2483:241:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1247,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"2509:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1548","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1548","typeString":"library Address"}],"id":1246,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2501:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1245,"name":"address","nodeType":"ElementaryTypeName","src":"2501:7:5","typeDescriptions":{}}},"id":1248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2501:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2515:7:5","memberName":"balance","nodeType":"MemberAccess","src":"2501:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1250,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"2526:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2501:31:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":1252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2534:31:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":1244,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"2493:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2493:73:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1254,"nodeType":"ExpressionStatement","src":"2493:73:5"},{"assignments":[1256,null],"declarations":[{"constant":false,"id":1256,"mutability":"mutable","name":"success","nameLocation":"2583:7:5","nodeType":"VariableDeclaration","scope":1269,"src":"2578:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1255,"name":"bool","nodeType":"ElementaryTypeName","src":"2578:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1263,"initialValue":{"arguments":[{"hexValue":"","id":1261,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2626:2:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1257,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1239,"src":"2596:9:5","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2606:4:5","memberName":"call","nodeType":"MemberAccess","src":"2596:14:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1259,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"2618:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2596:29:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2596:33:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2577:52:5"},{"expression":{"arguments":[{"id":1265,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1256,"src":"2647:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2656:60:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1264,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"2639:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:78:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1268,"nodeType":"ExpressionStatement","src":"2639:78:5"}]},"documentation":{"id":1237,"nodeType":"StructuredDocumentation","src":"1501:906:5","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1270,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2421:9:5","nodeType":"FunctionDefinition","parameters":{"id":1242,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1239,"mutability":"mutable","name":"recipient","nameLocation":"2447:9:5","nodeType":"VariableDeclaration","scope":1270,"src":"2431:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1238,"name":"address","nodeType":"ElementaryTypeName","src":"2431:15:5","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1241,"mutability":"mutable","name":"amount","nameLocation":"2466:6:5","nodeType":"VariableDeclaration","scope":1270,"src":"2458:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1240,"name":"uint256","nodeType":"ElementaryTypeName","src":"2458:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2430:43:5"},"returnParameters":{"id":1243,"nodeType":"ParameterList","parameters":[],"src":"2483:0:5"},"scope":1548,"src":"2412:312:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1287,"nodeType":"Block","src":"3555:96:5","statements":[{"expression":{"arguments":[{"id":1281,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1273,"src":"3594:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1282,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1275,"src":"3602:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3608:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3611:32:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1280,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1328,1372],"referencedDeclaration":1372,"src":"3572:21:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1285,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3572:72:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1279,"id":1286,"nodeType":"Return","src":"3565:79:5"}]},"documentation":{"id":1271,"nodeType":"StructuredDocumentation","src":"2730:731:5","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1288,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3475:12:5","nodeType":"FunctionDefinition","parameters":{"id":1276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1273,"mutability":"mutable","name":"target","nameLocation":"3496:6:5","nodeType":"VariableDeclaration","scope":1288,"src":"3488:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1272,"name":"address","nodeType":"ElementaryTypeName","src":"3488:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1275,"mutability":"mutable","name":"data","nameLocation":"3517:4:5","nodeType":"VariableDeclaration","scope":1288,"src":"3504:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1274,"name":"bytes","nodeType":"ElementaryTypeName","src":"3504:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3487:35:5"},"returnParameters":{"id":1279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1278,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1288,"src":"3541:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1277,"name":"bytes","nodeType":"ElementaryTypeName","src":"3541:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3540:14:5"},"scope":1548,"src":"3466:185:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1307,"nodeType":"Block","src":"4020:76:5","statements":[{"expression":{"arguments":[{"id":1301,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1291,"src":"4059:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1302,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1293,"src":"4067:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1303,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4073:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1304,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1295,"src":"4076:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1300,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1328,1372],"referencedDeclaration":1372,"src":"4037:21:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4037:52:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1299,"id":1306,"nodeType":"Return","src":"4030:59:5"}]},"documentation":{"id":1289,"nodeType":"StructuredDocumentation","src":"3657:211:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1308,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3882:12:5","nodeType":"FunctionDefinition","parameters":{"id":1296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1291,"mutability":"mutable","name":"target","nameLocation":"3912:6:5","nodeType":"VariableDeclaration","scope":1308,"src":"3904:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1290,"name":"address","nodeType":"ElementaryTypeName","src":"3904:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1293,"mutability":"mutable","name":"data","nameLocation":"3941:4:5","nodeType":"VariableDeclaration","scope":1308,"src":"3928:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1292,"name":"bytes","nodeType":"ElementaryTypeName","src":"3928:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1295,"mutability":"mutable","name":"errorMessage","nameLocation":"3969:12:5","nodeType":"VariableDeclaration","scope":1308,"src":"3955:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1294,"name":"string","nodeType":"ElementaryTypeName","src":"3955:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3894:93:5"},"returnParameters":{"id":1299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1298,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1308,"src":"4006:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1297,"name":"bytes","nodeType":"ElementaryTypeName","src":"4006:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4005:14:5"},"scope":1548,"src":"3873:223:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1327,"nodeType":"Block","src":"4601:111:5","statements":[{"expression":{"arguments":[{"id":1321,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1311,"src":"4640:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1322,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1313,"src":"4648:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1323,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1315,"src":"4654:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4661:43:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1320,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1328,1372],"referencedDeclaration":1372,"src":"4618:21:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4618:87:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1319,"id":1326,"nodeType":"Return","src":"4611:94:5"}]},"documentation":{"id":1309,"nodeType":"StructuredDocumentation","src":"4102:351:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1328,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4467:21:5","nodeType":"FunctionDefinition","parameters":{"id":1316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1311,"mutability":"mutable","name":"target","nameLocation":"4506:6:5","nodeType":"VariableDeclaration","scope":1328,"src":"4498:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1310,"name":"address","nodeType":"ElementaryTypeName","src":"4498:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1313,"mutability":"mutable","name":"data","nameLocation":"4535:4:5","nodeType":"VariableDeclaration","scope":1328,"src":"4522:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1312,"name":"bytes","nodeType":"ElementaryTypeName","src":"4522:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1315,"mutability":"mutable","name":"value","nameLocation":"4557:5:5","nodeType":"VariableDeclaration","scope":1328,"src":"4549:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1314,"name":"uint256","nodeType":"ElementaryTypeName","src":"4549:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4488:80:5"},"returnParameters":{"id":1319,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1318,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1328,"src":"4587:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1317,"name":"bytes","nodeType":"ElementaryTypeName","src":"4587:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4586:14:5"},"scope":1548,"src":"4458:254:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1371,"nodeType":"Block","src":"5139:267:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1345,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"5165:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1548","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1548","typeString":"library Address"}],"id":1344,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5157:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1343,"name":"address","nodeType":"ElementaryTypeName","src":"5157:7:5","typeDescriptions":{}}},"id":1346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5157:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5171:7:5","memberName":"balance","nodeType":"MemberAccess","src":"5157:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1348,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1335,"src":"5182:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:30:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5189:40:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1342,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"5149:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1351,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5149:81:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1352,"nodeType":"ExpressionStatement","src":"5149:81:5"},{"assignments":[1354,1356],"declarations":[{"constant":false,"id":1354,"mutability":"mutable","name":"success","nameLocation":"5246:7:5","nodeType":"VariableDeclaration","scope":1371,"src":"5241:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1353,"name":"bool","nodeType":"ElementaryTypeName","src":"5241:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1356,"mutability":"mutable","name":"returndata","nameLocation":"5268:10:5","nodeType":"VariableDeclaration","scope":1371,"src":"5255:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1355,"name":"bytes","nodeType":"ElementaryTypeName","src":"5255:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1363,"initialValue":{"arguments":[{"id":1361,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1333,"src":"5308:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1357,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1331,"src":"5282:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5289:4:5","memberName":"call","nodeType":"MemberAccess","src":"5282:11:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1359,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1335,"src":"5301:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5282:25:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5282:31:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5240:73:5"},{"expression":{"arguments":[{"id":1365,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1331,"src":"5357:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1366,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1354,"src":"5365:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1367,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1356,"src":"5374:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1368,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1337,"src":"5386:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1364,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1503,"src":"5330:26:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1369,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5330:69:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1341,"id":1370,"nodeType":"Return","src":"5323:76:5"}]},"documentation":{"id":1329,"nodeType":"StructuredDocumentation","src":"4718:237:5","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1372,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4969:21:5","nodeType":"FunctionDefinition","parameters":{"id":1338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1331,"mutability":"mutable","name":"target","nameLocation":"5008:6:5","nodeType":"VariableDeclaration","scope":1372,"src":"5000:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1330,"name":"address","nodeType":"ElementaryTypeName","src":"5000:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1333,"mutability":"mutable","name":"data","nameLocation":"5037:4:5","nodeType":"VariableDeclaration","scope":1372,"src":"5024:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1332,"name":"bytes","nodeType":"ElementaryTypeName","src":"5024:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1335,"mutability":"mutable","name":"value","nameLocation":"5059:5:5","nodeType":"VariableDeclaration","scope":1372,"src":"5051:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1334,"name":"uint256","nodeType":"ElementaryTypeName","src":"5051:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1337,"mutability":"mutable","name":"errorMessage","nameLocation":"5088:12:5","nodeType":"VariableDeclaration","scope":1372,"src":"5074:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1336,"name":"string","nodeType":"ElementaryTypeName","src":"5074:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4990:116:5"},"returnParameters":{"id":1341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1340,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1372,"src":"5125:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1339,"name":"bytes","nodeType":"ElementaryTypeName","src":"5125:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5124:14:5"},"scope":1548,"src":"4960:446:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1388,"nodeType":"Block","src":"5683:97:5","statements":[{"expression":{"arguments":[{"id":1383,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"5719:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1384,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1377,"src":"5727:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5733:39:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1382,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1389,1418],"referencedDeclaration":1418,"src":"5700:18:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1386,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5700:73:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1381,"id":1387,"nodeType":"Return","src":"5693:80:5"}]},"documentation":{"id":1373,"nodeType":"StructuredDocumentation","src":"5412:166:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1389,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5592:18:5","nodeType":"FunctionDefinition","parameters":{"id":1378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1375,"mutability":"mutable","name":"target","nameLocation":"5619:6:5","nodeType":"VariableDeclaration","scope":1389,"src":"5611:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1374,"name":"address","nodeType":"ElementaryTypeName","src":"5611:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1377,"mutability":"mutable","name":"data","nameLocation":"5640:4:5","nodeType":"VariableDeclaration","scope":1389,"src":"5627:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1376,"name":"bytes","nodeType":"ElementaryTypeName","src":"5627:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5610:35:5"},"returnParameters":{"id":1381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1380,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1389,"src":"5669:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1379,"name":"bytes","nodeType":"ElementaryTypeName","src":"5669:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5668:14:5"},"scope":1548,"src":"5583:197:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1417,"nodeType":"Block","src":"6122:168:5","statements":[{"assignments":[1402,1404],"declarations":[{"constant":false,"id":1402,"mutability":"mutable","name":"success","nameLocation":"6138:7:5","nodeType":"VariableDeclaration","scope":1417,"src":"6133:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1401,"name":"bool","nodeType":"ElementaryTypeName","src":"6133:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1404,"mutability":"mutable","name":"returndata","nameLocation":"6160:10:5","nodeType":"VariableDeclaration","scope":1417,"src":"6147:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1403,"name":"bytes","nodeType":"ElementaryTypeName","src":"6147:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1409,"initialValue":{"arguments":[{"id":1407,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1394,"src":"6192:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1405,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1392,"src":"6174:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6181:10:5","memberName":"staticcall","nodeType":"MemberAccess","src":"6174:17:5","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1408,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:23:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6132:65:5"},{"expression":{"arguments":[{"id":1411,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1392,"src":"6241:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1412,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1402,"src":"6249:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1413,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"6258:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1414,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1396,"src":"6270:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1410,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1503,"src":"6214:26:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1415,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6214:69:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1400,"id":1416,"nodeType":"Return","src":"6207:76:5"}]},"documentation":{"id":1390,"nodeType":"StructuredDocumentation","src":"5786:173:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1418,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5973:18:5","nodeType":"FunctionDefinition","parameters":{"id":1397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1392,"mutability":"mutable","name":"target","nameLocation":"6009:6:5","nodeType":"VariableDeclaration","scope":1418,"src":"6001:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1391,"name":"address","nodeType":"ElementaryTypeName","src":"6001:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1394,"mutability":"mutable","name":"data","nameLocation":"6038:4:5","nodeType":"VariableDeclaration","scope":1418,"src":"6025:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1393,"name":"bytes","nodeType":"ElementaryTypeName","src":"6025:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1396,"mutability":"mutable","name":"errorMessage","nameLocation":"6066:12:5","nodeType":"VariableDeclaration","scope":1418,"src":"6052:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1395,"name":"string","nodeType":"ElementaryTypeName","src":"6052:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5991:93:5"},"returnParameters":{"id":1400,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1399,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1418,"src":"6108:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1398,"name":"bytes","nodeType":"ElementaryTypeName","src":"6108:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6107:14:5"},"scope":1548,"src":"5964:326:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1434,"nodeType":"Block","src":"6566:101:5","statements":[{"expression":{"arguments":[{"id":1429,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1421,"src":"6604:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1430,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1423,"src":"6612:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6618:41:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1428,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1435,1464],"referencedDeclaration":1464,"src":"6583:20:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6583:77:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1427,"id":1433,"nodeType":"Return","src":"6576:84:5"}]},"documentation":{"id":1419,"nodeType":"StructuredDocumentation","src":"6296:168:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1435,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6478:20:5","nodeType":"FunctionDefinition","parameters":{"id":1424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1421,"mutability":"mutable","name":"target","nameLocation":"6507:6:5","nodeType":"VariableDeclaration","scope":1435,"src":"6499:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1420,"name":"address","nodeType":"ElementaryTypeName","src":"6499:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1423,"mutability":"mutable","name":"data","nameLocation":"6528:4:5","nodeType":"VariableDeclaration","scope":1435,"src":"6515:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1422,"name":"bytes","nodeType":"ElementaryTypeName","src":"6515:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6498:35:5"},"returnParameters":{"id":1427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1426,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1435,"src":"6552:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1425,"name":"bytes","nodeType":"ElementaryTypeName","src":"6552:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6551:14:5"},"scope":1548,"src":"6469:198:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1463,"nodeType":"Block","src":"7008:170:5","statements":[{"assignments":[1448,1450],"declarations":[{"constant":false,"id":1448,"mutability":"mutable","name":"success","nameLocation":"7024:7:5","nodeType":"VariableDeclaration","scope":1463,"src":"7019:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1447,"name":"bool","nodeType":"ElementaryTypeName","src":"7019:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1450,"mutability":"mutable","name":"returndata","nameLocation":"7046:10:5","nodeType":"VariableDeclaration","scope":1463,"src":"7033:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1449,"name":"bytes","nodeType":"ElementaryTypeName","src":"7033:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1455,"initialValue":{"arguments":[{"id":1453,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1440,"src":"7080:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1451,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"7060:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7067:12:5","memberName":"delegatecall","nodeType":"MemberAccess","src":"7060:19:5","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1454,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7060:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7018:67:5"},{"expression":{"arguments":[{"id":1457,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"7129:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1458,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1448,"src":"7137:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1459,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1450,"src":"7146:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1460,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1442,"src":"7158:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1456,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1503,"src":"7102:26:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1461,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7102:69:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1446,"id":1462,"nodeType":"Return","src":"7095:76:5"}]},"documentation":{"id":1436,"nodeType":"StructuredDocumentation","src":"6673:175:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1464,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6862:20:5","nodeType":"FunctionDefinition","parameters":{"id":1443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1438,"mutability":"mutable","name":"target","nameLocation":"6900:6:5","nodeType":"VariableDeclaration","scope":1464,"src":"6892:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1437,"name":"address","nodeType":"ElementaryTypeName","src":"6892:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1440,"mutability":"mutable","name":"data","nameLocation":"6929:4:5","nodeType":"VariableDeclaration","scope":1464,"src":"6916:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1439,"name":"bytes","nodeType":"ElementaryTypeName","src":"6916:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1442,"mutability":"mutable","name":"errorMessage","nameLocation":"6957:12:5","nodeType":"VariableDeclaration","scope":1464,"src":"6943:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1441,"name":"string","nodeType":"ElementaryTypeName","src":"6943:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6882:93:5"},"returnParameters":{"id":1446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1445,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1464,"src":"6994:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1444,"name":"bytes","nodeType":"ElementaryTypeName","src":"6994:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6993:14:5"},"scope":1548,"src":"6853:325:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1502,"nodeType":"Block","src":"7660:434:5","statements":[{"condition":{"id":1478,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1469,"src":"7674:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1500,"nodeType":"Block","src":"8030:58:5","statements":[{"expression":{"arguments":[{"id":1496,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"8052:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1497,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"8064:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1495,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1547,"src":"8044:7:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1498,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8044:33:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1499,"nodeType":"ExpressionStatement","src":"8044:33:5"}]},"id":1501,"nodeType":"IfStatement","src":"7670:418:5","trueBody":{"id":1494,"nodeType":"Block","src":"7683:341:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1479,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"7701:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7712:6:5","memberName":"length","nodeType":"MemberAccess","src":"7701:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7722:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7701:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1491,"nodeType":"IfStatement","src":"7697:286:5","trueBody":{"id":1490,"nodeType":"Block","src":"7725:258:5","statements":[{"expression":{"arguments":[{"arguments":[{"id":1485,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1467,"src":"7927:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1484,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1236,"src":"7916:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7916:18:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7936:31:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1483,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"7908:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1488,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7908:60:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1489,"nodeType":"ExpressionStatement","src":"7908:60:5"}]}},{"expression":{"id":1492,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"8003:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1477,"id":1493,"nodeType":"Return","src":"7996:17:5"}]}}]},"documentation":{"id":1465,"nodeType":"StructuredDocumentation","src":"7184:277:5","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1503,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7475:26:5","nodeType":"FunctionDefinition","parameters":{"id":1474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1467,"mutability":"mutable","name":"target","nameLocation":"7519:6:5","nodeType":"VariableDeclaration","scope":1503,"src":"7511:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1466,"name":"address","nodeType":"ElementaryTypeName","src":"7511:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1469,"mutability":"mutable","name":"success","nameLocation":"7540:7:5","nodeType":"VariableDeclaration","scope":1503,"src":"7535:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1468,"name":"bool","nodeType":"ElementaryTypeName","src":"7535:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1471,"mutability":"mutable","name":"returndata","nameLocation":"7570:10:5","nodeType":"VariableDeclaration","scope":1503,"src":"7557:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1470,"name":"bytes","nodeType":"ElementaryTypeName","src":"7557:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1473,"mutability":"mutable","name":"errorMessage","nameLocation":"7604:12:5","nodeType":"VariableDeclaration","scope":1503,"src":"7590:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1472,"name":"string","nodeType":"ElementaryTypeName","src":"7590:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7501:121:5"},"returnParameters":{"id":1477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1476,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1503,"src":"7646:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1475,"name":"bytes","nodeType":"ElementaryTypeName","src":"7646:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7645:14:5"},"scope":1548,"src":"7466:628:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1526,"nodeType":"Block","src":"8475:135:5","statements":[{"condition":{"id":1515,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"8489:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1524,"nodeType":"Block","src":"8546:58:5","statements":[{"expression":{"arguments":[{"id":1520,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1508,"src":"8568:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1521,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"8580:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1519,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1547,"src":"8560:7:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1522,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8560:33:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1523,"nodeType":"ExpressionStatement","src":"8560:33:5"}]},"id":1525,"nodeType":"IfStatement","src":"8485:119:5","trueBody":{"id":1518,"nodeType":"Block","src":"8498:42:5","statements":[{"expression":{"id":1516,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1508,"src":"8519:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1514,"id":1517,"nodeType":"Return","src":"8512:17:5"}]}}]},"documentation":{"id":1504,"nodeType":"StructuredDocumentation","src":"8100:210:5","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1527,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8324:16:5","nodeType":"FunctionDefinition","parameters":{"id":1511,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1506,"mutability":"mutable","name":"success","nameLocation":"8355:7:5","nodeType":"VariableDeclaration","scope":1527,"src":"8350:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1505,"name":"bool","nodeType":"ElementaryTypeName","src":"8350:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1508,"mutability":"mutable","name":"returndata","nameLocation":"8385:10:5","nodeType":"VariableDeclaration","scope":1527,"src":"8372:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1507,"name":"bytes","nodeType":"ElementaryTypeName","src":"8372:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1510,"mutability":"mutable","name":"errorMessage","nameLocation":"8419:12:5","nodeType":"VariableDeclaration","scope":1527,"src":"8405:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1509,"name":"string","nodeType":"ElementaryTypeName","src":"8405:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8340:97:5"},"returnParameters":{"id":1514,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1513,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1527,"src":"8461:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1512,"name":"bytes","nodeType":"ElementaryTypeName","src":"8461:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8460:14:5"},"scope":1548,"src":"8315:295:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1546,"nodeType":"Block","src":"8699:457:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1534,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1529,"src":"8775:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8786:6:5","memberName":"length","nodeType":"MemberAccess","src":"8775:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8795:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8775:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1544,"nodeType":"Block","src":"9105:45:5","statements":[{"expression":{"arguments":[{"id":1541,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1531,"src":"9126:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1540,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[4294967277,4294967277],"referencedDeclaration":4294967277,"src":"9119:6:5","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9119:20:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1543,"nodeType":"ExpressionStatement","src":"9119:20:5"}]},"id":1545,"nodeType":"IfStatement","src":"8771:379:5","trueBody":{"id":1539,"nodeType":"Block","src":"8798:301:5","statements":[{"AST":{"nodeType":"YulBlock","src":"8956:133:5","statements":[{"nodeType":"YulVariableDeclaration","src":"8974:40:5","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9003:10:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8997:5:5"},"nodeType":"YulFunctionCall","src":"8997:17:5"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"8978:15:5","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9042:2:5","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9046:10:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9038:3:5"},"nodeType":"YulFunctionCall","src":"9038:19:5"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9059:15:5"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9031:6:5"},"nodeType":"YulFunctionCall","src":"9031:44:5"},"nodeType":"YulExpressionStatement","src":"9031:44:5"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1529,"isOffset":false,"isSlot":false,"src":"9003:10:5","valueSize":1},{"declaration":1529,"isOffset":false,"isSlot":false,"src":"9046:10:5","valueSize":1}],"id":1538,"nodeType":"InlineAssembly","src":"8947:142:5"}]}}]},"id":1547,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8625:7:5","nodeType":"FunctionDefinition","parameters":{"id":1532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1529,"mutability":"mutable","name":"returndata","nameLocation":"8646:10:5","nodeType":"VariableDeclaration","scope":1547,"src":"8633:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1528,"name":"bytes","nodeType":"ElementaryTypeName","src":"8633:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1531,"mutability":"mutable","name":"errorMessage","nameLocation":"8672:12:5","nodeType":"VariableDeclaration","scope":1547,"src":"8658:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1530,"name":"string","nodeType":"ElementaryTypeName","src":"8658:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8632:53:5"},"returnParameters":{"id":1533,"nodeType":"ParameterList","parameters":[],"src":"8699:0:5"},"scope":1548,"src":"8616:540:5","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1549,"src":"194:8964:5","usedErrors":[]}],"src":"101:9058:5"},"id":5},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[1570]},"id":1571,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1550,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:6"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":1551,"nodeType":"StructuredDocumentation","src":"111:496:6","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1570,"linearizedBaseContracts":[1570],"name":"Context","nameLocation":"626:7:6","nodeType":"ContractDefinition","nodes":[{"body":{"id":1559,"nodeType":"Block","src":"702:34:6","statements":[{"expression":{"expression":{"id":1556,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"719:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:6","memberName":"sender","nodeType":"MemberAccess","src":"719:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1555,"id":1558,"nodeType":"Return","src":"712:17:6"}]},"id":1560,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:6","nodeType":"FunctionDefinition","parameters":{"id":1552,"nodeType":"ParameterList","parameters":[],"src":"659:2:6"},"returnParameters":{"id":1555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1554,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1560,"src":"693:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1553,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:6"},"scope":1570,"src":"640:96:6","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1568,"nodeType":"Block","src":"809:32:6","statements":[{"expression":{"expression":{"id":1565,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"826:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:6","memberName":"data","nodeType":"MemberAccess","src":"826:8:6","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1564,"id":1567,"nodeType":"Return","src":"819:15:6"}]},"id":1569,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:6","nodeType":"FunctionDefinition","parameters":{"id":1561,"nodeType":"ParameterList","parameters":[],"src":"759:2:6"},"returnParameters":{"id":1564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1563,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1569,"src":"793:14:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1562,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:6"},"scope":1570,"src":"742:99:6","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1571,"src":"608:235:6","usedErrors":[]}],"src":"86:758:6"},"id":6},"@openzeppelin/contracts/utils/Counters.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Counters.sol","exportedSymbols":{"Counters":[1644]},"id":1645,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1572,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"87:23:7"},{"abstract":false,"baseContracts":[],"canonicalName":"Counters","contractDependencies":[],"contractKind":"library","documentation":{"id":1573,"nodeType":"StructuredDocumentation","src":"112:311:7","text":" @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`"},"fullyImplemented":true,"id":1644,"linearizedBaseContracts":[1644],"name":"Counters","nameLocation":"432:8:7","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Counters.Counter","id":1576,"members":[{"constant":false,"id":1575,"mutability":"mutable","name":"_value","nameLocation":"794:6:7","nodeType":"VariableDeclaration","scope":1576,"src":"786:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1574,"name":"uint256","nodeType":"ElementaryTypeName","src":"786:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Counter","nameLocation":"454:7:7","nodeType":"StructDefinition","scope":1644,"src":"447:374:7","visibility":"public"},{"body":{"id":1587,"nodeType":"Block","src":"901:38:7","statements":[{"expression":{"expression":{"id":1584,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1579,"src":"918:7:7","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1576_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":1585,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"926:6:7","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":1575,"src":"918:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1583,"id":1586,"nodeType":"Return","src":"911:21:7"}]},"id":1588,"implemented":true,"kind":"function","modifiers":[],"name":"current","nameLocation":"836:7:7","nodeType":"FunctionDefinition","parameters":{"id":1580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1579,"mutability":"mutable","name":"counter","nameLocation":"860:7:7","nodeType":"VariableDeclaration","scope":1588,"src":"844:23:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1576_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":1578,"nodeType":"UserDefinedTypeName","pathNode":{"id":1577,"name":"Counter","nameLocations":["844:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":1576,"src":"844:7:7"},"referencedDeclaration":1576,"src":"844:7:7","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1576_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"843:25:7"},"returnParameters":{"id":1583,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1582,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1588,"src":"892:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1581,"name":"uint256","nodeType":"ElementaryTypeName","src":"892:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"891:9:7"},"scope":1644,"src":"827:112:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1601,"nodeType":"Block","src":"998:70:7","statements":[{"id":1600,"nodeType":"UncheckedBlock","src":"1008:54:7","statements":[{"expression":{"id":1598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1594,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1591,"src":"1032:7:7","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1576_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":1596,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1040:6:7","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":1575,"src":"1032:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1597,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1050:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1032:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1599,"nodeType":"ExpressionStatement","src":"1032:19:7"}]}]},"id":1602,"implemented":true,"kind":"function","modifiers":[],"name":"increment","nameLocation":"954:9:7","nodeType":"FunctionDefinition","parameters":{"id":1592,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1591,"mutability":"mutable","name":"counter","nameLocation":"980:7:7","nodeType":"VariableDeclaration","scope":1602,"src":"964:23:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1576_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":1590,"nodeType":"UserDefinedTypeName","pathNode":{"id":1589,"name":"Counter","nameLocations":["964:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":1576,"src":"964:7:7"},"referencedDeclaration":1576,"src":"964:7:7","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1576_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"963:25:7"},"returnParameters":{"id":1593,"nodeType":"ParameterList","parameters":[],"src":"998:0:7"},"scope":1644,"src":"945:123:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1629,"nodeType":"Block","src":"1127:176:7","statements":[{"assignments":[1609],"declarations":[{"constant":false,"id":1609,"mutability":"mutable","name":"value","nameLocation":"1145:5:7","nodeType":"VariableDeclaration","scope":1629,"src":"1137:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1608,"name":"uint256","nodeType":"ElementaryTypeName","src":"1137:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1612,"initialValue":{"expression":{"id":1610,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1605,"src":"1153:7:7","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1576_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":1611,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1161:6:7","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":1575,"src":"1153:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1137:30:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1614,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1609,"src":"1185:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1615,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1193:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1185:9:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"436f756e7465723a2064656372656d656e74206f766572666c6f77","id":1617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1196:29:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""},"value":"Counter: decrement overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""}],"id":1613,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"1177:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1618,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1177:49:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1619,"nodeType":"ExpressionStatement","src":"1177:49:7"},{"id":1628,"nodeType":"UncheckedBlock","src":"1236:61:7","statements":[{"expression":{"id":1626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1620,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1605,"src":"1260:7:7","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1576_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":1622,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1268:6:7","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":1575,"src":"1260:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1623,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1609,"src":"1277:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1285:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1277:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1260:26:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1627,"nodeType":"ExpressionStatement","src":"1260:26:7"}]}]},"id":1630,"implemented":true,"kind":"function","modifiers":[],"name":"decrement","nameLocation":"1083:9:7","nodeType":"FunctionDefinition","parameters":{"id":1606,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1605,"mutability":"mutable","name":"counter","nameLocation":"1109:7:7","nodeType":"VariableDeclaration","scope":1630,"src":"1093:23:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1576_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":1604,"nodeType":"UserDefinedTypeName","pathNode":{"id":1603,"name":"Counter","nameLocations":["1093:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":1576,"src":"1093:7:7"},"referencedDeclaration":1576,"src":"1093:7:7","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1576_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"1092:25:7"},"returnParameters":{"id":1607,"nodeType":"ParameterList","parameters":[],"src":"1127:0:7"},"scope":1644,"src":"1074:229:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1642,"nodeType":"Block","src":"1358:35:7","statements":[{"expression":{"id":1640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1636,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1633,"src":"1368:7:7","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1576_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":1638,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1376:6:7","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":1575,"src":"1368:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1385:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1368:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1641,"nodeType":"ExpressionStatement","src":"1368:18:7"}]},"id":1643,"implemented":true,"kind":"function","modifiers":[],"name":"reset","nameLocation":"1318:5:7","nodeType":"FunctionDefinition","parameters":{"id":1634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1633,"mutability":"mutable","name":"counter","nameLocation":"1340:7:7","nodeType":"VariableDeclaration","scope":1643,"src":"1324:23:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1576_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":1632,"nodeType":"UserDefinedTypeName","pathNode":{"id":1631,"name":"Counter","nameLocations":["1324:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":1576,"src":"1324:7:7"},"referencedDeclaration":1576,"src":"1324:7:7","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1576_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"1323:25:7"},"returnParameters":{"id":1635,"nodeType":"ParameterList","parameters":[],"src":"1358:0:7"},"scope":1644,"src":"1309:84:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1645,"src":"424:971:7","usedErrors":[]}],"src":"87:1309:7"},"id":7},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[2720],"Strings":[1819]},"id":1820,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1646,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:8"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":1647,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1820,"sourceUnit":2721,"src":"126:25:8","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":1648,"nodeType":"StructuredDocumentation","src":"153:34:8","text":" @dev String operations."},"fullyImplemented":true,"id":1819,"linearizedBaseContracts":[1819],"name":"Strings","nameLocation":"196:7:8","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1651,"mutability":"constant","name":"_SYMBOLS","nameLocation":"235:8:8","nodeType":"VariableDeclaration","scope":1819,"src":"210:54:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1649,"name":"bytes16","nodeType":"ElementaryTypeName","src":"210:7:8","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"246:18:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1654,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"293:15:8","nodeType":"VariableDeclaration","scope":1819,"src":"270:43:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1652,"name":"uint8","nodeType":"ElementaryTypeName","src":"270:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"311:2:8","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":1701,"nodeType":"Block","src":"486:625:8","statements":[{"id":1700,"nodeType":"UncheckedBlock","src":"496:609:8","statements":[{"assignments":[1663],"declarations":[{"constant":false,"id":1663,"mutability":"mutable","name":"length","nameLocation":"528:6:8","nodeType":"VariableDeclaration","scope":1700,"src":"520:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1662,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1670,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1666,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1657,"src":"548:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1664,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2720,"src":"537:4:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2720_$","typeString":"type(library Math)"}},"id":1665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"542:5:8","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":2557,"src":"537:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1667,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"537:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"557:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"537:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"520:38:8"},{"assignments":[1672],"declarations":[{"constant":false,"id":1672,"mutability":"mutable","name":"buffer","nameLocation":"586:6:8","nodeType":"VariableDeclaration","scope":1700,"src":"572:20:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1671,"name":"string","nodeType":"ElementaryTypeName","src":"572:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1677,"initialValue":{"arguments":[{"id":1675,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"606:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1674,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"595:10:8","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1673,"name":"string","nodeType":"ElementaryTypeName","src":"599:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1676,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"595:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"572:41:8"},{"assignments":[1679],"declarations":[{"constant":false,"id":1679,"mutability":"mutable","name":"ptr","nameLocation":"635:3:8","nodeType":"VariableDeclaration","scope":1700,"src":"627:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1678,"name":"uint256","nodeType":"ElementaryTypeName","src":"627:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1680,"nodeType":"VariableDeclarationStatement","src":"627:11:8"},{"AST":{"nodeType":"YulBlock","src":"708:67:8","statements":[{"nodeType":"YulAssignment","src":"726:35:8","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"737:6:8"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"749:2:8","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"753:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"745:3:8"},"nodeType":"YulFunctionCall","src":"745:15:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"733:3:8"},"nodeType":"YulFunctionCall","src":"733:28:8"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"726:3:8"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1672,"isOffset":false,"isSlot":false,"src":"737:6:8","valueSize":1},{"declaration":1663,"isOffset":false,"isSlot":false,"src":"753:6:8","valueSize":1},{"declaration":1679,"isOffset":false,"isSlot":false,"src":"726:3:8","valueSize":1}],"id":1681,"nodeType":"InlineAssembly","src":"699:76:8"},{"body":{"id":1696,"nodeType":"Block","src":"801:267:8","statements":[{"expression":{"id":1684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"819:5:8","subExpression":{"id":1683,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1679,"src":"819:3:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1685,"nodeType":"ExpressionStatement","src":"819:5:8"},{"AST":{"nodeType":"YulBlock","src":"902:84:8","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"932:3:8"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"946:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"953:2:8","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"942:3:8"},"nodeType":"YulFunctionCall","src":"942:14:8"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"958:8:8"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"937:4:8"},"nodeType":"YulFunctionCall","src":"937:30:8"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"924:7:8"},"nodeType":"YulFunctionCall","src":"924:44:8"},"nodeType":"YulExpressionStatement","src":"924:44:8"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1651,"isOffset":false,"isSlot":false,"src":"958:8:8","valueSize":1},{"declaration":1679,"isOffset":false,"isSlot":false,"src":"932:3:8","valueSize":1},{"declaration":1657,"isOffset":false,"isSlot":false,"src":"946:5:8","valueSize":1}],"id":1686,"nodeType":"InlineAssembly","src":"893:93:8"},{"expression":{"id":1689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1687,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1657,"src":"1003:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1688,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1012:2:8","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1003:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1690,"nodeType":"ExpressionStatement","src":"1003:11:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1691,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1657,"src":"1036:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1045:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1036:10:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1695,"nodeType":"IfStatement","src":"1032:21:8","trueBody":{"id":1694,"nodeType":"Break","src":"1048:5:8"}}]},"condition":{"hexValue":"74727565","id":1682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"795:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1697,"nodeType":"WhileStatement","src":"788:280:8"},{"expression":{"id":1698,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1672,"src":"1088:6:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1661,"id":1699,"nodeType":"Return","src":"1081:13:8"}]}]},"documentation":{"id":1655,"nodeType":"StructuredDocumentation","src":"320:90:8","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1702,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"424:8:8","nodeType":"FunctionDefinition","parameters":{"id":1658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1657,"mutability":"mutable","name":"value","nameLocation":"441:5:8","nodeType":"VariableDeclaration","scope":1702,"src":"433:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1656,"name":"uint256","nodeType":"ElementaryTypeName","src":"433:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"432:15:8"},"returnParameters":{"id":1661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1660,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1702,"src":"471:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1659,"name":"string","nodeType":"ElementaryTypeName","src":"471:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"470:15:8"},"scope":1819,"src":"415:696:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1721,"nodeType":"Block","src":"1290:100:8","statements":[{"id":1720,"nodeType":"UncheckedBlock","src":"1300:84:8","statements":[{"expression":{"arguments":[{"id":1711,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1705,"src":"1343:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1714,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1705,"src":"1362:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1712,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2720,"src":"1350:4:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2720_$","typeString":"type(library Math)"}},"id":1713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1355:6:8","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":2680,"src":"1350:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1715,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1350:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1716,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1371:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1350:22:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1710,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1722,1798,1818],"referencedDeclaration":1798,"src":"1331:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1718,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1331:42:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1709,"id":1719,"nodeType":"Return","src":"1324:49:8"}]}]},"documentation":{"id":1703,"nodeType":"StructuredDocumentation","src":"1117:94:8","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":1722,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1225:11:8","nodeType":"FunctionDefinition","parameters":{"id":1706,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1705,"mutability":"mutable","name":"value","nameLocation":"1245:5:8","nodeType":"VariableDeclaration","scope":1722,"src":"1237:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1704,"name":"uint256","nodeType":"ElementaryTypeName","src":"1237:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1236:15:8"},"returnParameters":{"id":1709,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1708,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1722,"src":"1275:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1707,"name":"string","nodeType":"ElementaryTypeName","src":"1275:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1274:15:8"},"scope":1819,"src":"1216:174:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1797,"nodeType":"Block","src":"1603:347:8","statements":[{"assignments":[1733],"declarations":[{"constant":false,"id":1733,"mutability":"mutable","name":"buffer","nameLocation":"1626:6:8","nodeType":"VariableDeclaration","scope":1797,"src":"1613:19:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1732,"name":"bytes","nodeType":"ElementaryTypeName","src":"1613:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1742,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1736,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1645:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1737,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1727,"src":"1649:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1645:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1658:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1645:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1735,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1635:9:8","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1734,"name":"bytes","nodeType":"ElementaryTypeName","src":"1639:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1741,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1635:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1613:47:8"},{"expression":{"id":1747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1743,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1733,"src":"1670:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1745,"indexExpression":{"hexValue":"30","id":1744,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1677:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1670:9:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1682:3:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1670:15:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1748,"nodeType":"ExpressionStatement","src":"1670:15:8"},{"expression":{"id":1753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1749,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1733,"src":"1695:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1751,"indexExpression":{"hexValue":"31","id":1750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1702:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1695:9:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":1752,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1707:3:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"1695:15:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1754,"nodeType":"ExpressionStatement","src":"1695:15:8"},{"body":{"id":1783,"nodeType":"Block","src":"1765:83:8","statements":[{"expression":{"id":1777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1769,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1733,"src":"1779:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1771,"indexExpression":{"id":1770,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"1786:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1779:9:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1772,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1651,"src":"1791:8:8","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":1776,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1773,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1725,"src":"1800:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":1774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1808:3:8","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"1800:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1791:21:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1779:33:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1778,"nodeType":"ExpressionStatement","src":"1779:33:8"},{"expression":{"id":1781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1779,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1725,"src":"1826:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1780,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1836:1:8","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1826:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1782,"nodeType":"ExpressionStatement","src":"1826:11:8"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1763,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"1753:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1757:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1753:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1784,"initializationExpression":{"assignments":[1756],"declarations":[{"constant":false,"id":1756,"mutability":"mutable","name":"i","nameLocation":"1733:1:8","nodeType":"VariableDeclaration","scope":1784,"src":"1725:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1755,"name":"uint256","nodeType":"ElementaryTypeName","src":"1725:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1762,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1757,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1737:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1758,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1727,"src":"1741:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1737:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1750:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1737:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1725:26:8"},"loopExpression":{"expression":{"id":1767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"1760:3:8","subExpression":{"id":1766,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"1762:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1768,"nodeType":"ExpressionStatement","src":"1760:3:8"},"nodeType":"ForStatement","src":"1720:128:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1786,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1725,"src":"1865:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1874:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1865:10:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":1789,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1877:34:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":1785,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"1857:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1790,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1857:55:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1791,"nodeType":"ExpressionStatement","src":"1857:55:8"},{"expression":{"arguments":[{"id":1794,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1733,"src":"1936:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1793,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1929:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1792,"name":"string","nodeType":"ElementaryTypeName","src":"1929:6:8","typeDescriptions":{}}},"id":1795,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1929:14:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1731,"id":1796,"nodeType":"Return","src":"1922:21:8"}]},"documentation":{"id":1723,"nodeType":"StructuredDocumentation","src":"1396:112:8","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":1798,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1522:11:8","nodeType":"FunctionDefinition","parameters":{"id":1728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1725,"mutability":"mutable","name":"value","nameLocation":"1542:5:8","nodeType":"VariableDeclaration","scope":1798,"src":"1534:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1724,"name":"uint256","nodeType":"ElementaryTypeName","src":"1534:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1727,"mutability":"mutable","name":"length","nameLocation":"1557:6:8","nodeType":"VariableDeclaration","scope":1798,"src":"1549:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1726,"name":"uint256","nodeType":"ElementaryTypeName","src":"1549:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1533:31:8"},"returnParameters":{"id":1731,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1730,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1798,"src":"1588:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1729,"name":"string","nodeType":"ElementaryTypeName","src":"1588:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1587:15:8"},"scope":1819,"src":"1513:437:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1817,"nodeType":"Block","src":"2175:76:8","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1811,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1801,"src":"2220:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1810,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2212:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1809,"name":"uint160","nodeType":"ElementaryTypeName","src":"2212:7:8","typeDescriptions":{}}},"id":1812,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2212:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1808,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2204:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1807,"name":"uint256","nodeType":"ElementaryTypeName","src":"2204:7:8","typeDescriptions":{}}},"id":1813,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2204:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1814,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1654,"src":"2228:15:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1806,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1722,1798,1818],"referencedDeclaration":1798,"src":"2192:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2192:52:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1805,"id":1816,"nodeType":"Return","src":"2185:59:8"}]},"documentation":{"id":1799,"nodeType":"StructuredDocumentation","src":"1956:141:8","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":1818,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2111:11:8","nodeType":"FunctionDefinition","parameters":{"id":1802,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1801,"mutability":"mutable","name":"addr","nameLocation":"2131:4:8","nodeType":"VariableDeclaration","scope":1818,"src":"2123:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1800,"name":"address","nodeType":"ElementaryTypeName","src":"2123:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2122:14:8"},"returnParameters":{"id":1805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1804,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1818,"src":"2160:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1803,"name":"string","nodeType":"ElementaryTypeName","src":"2160:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2159:15:8"},"scope":1819,"src":"2102:149:8","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1820,"src":"188:2065:8","usedErrors":[]}],"src":"101:2153:8"},"id":8},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[1843],"IERC165":[1855]},"id":1844,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1821,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:9"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":1822,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1844,"sourceUnit":1856,"src":"124:23:9","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1824,"name":"IERC165","nameLocations":["754:7:9"],"nodeType":"IdentifierPath","referencedDeclaration":1855,"src":"754:7:9"},"id":1825,"nodeType":"InheritanceSpecifier","src":"754:7:9"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":1823,"nodeType":"StructuredDocumentation","src":"149:576:9","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":1843,"linearizedBaseContracts":[1843,1855],"name":"ERC165","nameLocation":"744:6:9","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[1854],"body":{"id":1841,"nodeType":"Block","src":"920:64:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1834,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1828,"src":"937:11:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1836,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"957:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$1855_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$1855_$","typeString":"type(contract IERC165)"}],"id":1835,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"952:4:9","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"952:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$1855","typeString":"type(contract IERC165)"}},"id":1838,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"966:11:9","memberName":"interfaceId","nodeType":"MemberAccess","src":"952:25:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"937:40:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1833,"id":1840,"nodeType":"Return","src":"930:47:9"}]},"documentation":{"id":1826,"nodeType":"StructuredDocumentation","src":"768:56:9","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1842,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"838:17:9","nodeType":"FunctionDefinition","overrides":{"id":1830,"nodeType":"OverrideSpecifier","overrides":[],"src":"896:8:9"},"parameters":{"id":1829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1828,"mutability":"mutable","name":"interfaceId","nameLocation":"863:11:9","nodeType":"VariableDeclaration","scope":1842,"src":"856:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1827,"name":"bytes4","nodeType":"ElementaryTypeName","src":"856:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"855:20:9"},"returnParameters":{"id":1833,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1832,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1842,"src":"914:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1831,"name":"bool","nodeType":"ElementaryTypeName","src":"914:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"913:6:9"},"scope":1843,"src":"829:155:9","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":1844,"src":"726:260:9","usedErrors":[]}],"src":"99:888:9"},"id":9},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[1855]},"id":1856,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1845,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:10"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":1846,"nodeType":"StructuredDocumentation","src":"125:279:10","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":1855,"linearizedBaseContracts":[1855],"name":"IERC165","nameLocation":"415:7:10","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1847,"nodeType":"StructuredDocumentation","src":"429:340:10","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":1854,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"783:17:10","nodeType":"FunctionDefinition","parameters":{"id":1850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1849,"mutability":"mutable","name":"interfaceId","nameLocation":"808:11:10","nodeType":"VariableDeclaration","scope":1854,"src":"801:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1848,"name":"bytes4","nodeType":"ElementaryTypeName","src":"801:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"800:20:10"},"returnParameters":{"id":1853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1852,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1854,"src":"844:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1851,"name":"bool","nodeType":"ElementaryTypeName","src":"844:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"843:6:10"},"scope":1855,"src":"774:76:10","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1856,"src":"405:447:10","usedErrors":[]}],"src":"100:753:10"},"id":10},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[2720]},"id":2721,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1857,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:11"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":1858,"nodeType":"StructuredDocumentation","src":"128:73:11","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2720,"linearizedBaseContracts":[2720],"name":"Math","nameLocation":"210:4:11","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":1862,"members":[{"id":1859,"name":"Down","nameLocation":"245:4:11","nodeType":"EnumValue","src":"245:4:11"},{"id":1860,"name":"Up","nameLocation":"287:2:11","nodeType":"EnumValue","src":"287:2:11"},{"id":1861,"name":"Zero","nameLocation":"318:4:11","nodeType":"EnumValue","src":"318:4:11"}],"name":"Rounding","nameLocation":"226:8:11","nodeType":"EnumDefinition","src":"221:122:11"},{"body":{"id":1879,"nodeType":"Block","src":"480:37:11","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1872,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1865,"src":"497:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1873,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1867,"src":"501:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1876,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1867,"src":"509:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:11","trueExpression":{"id":1875,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1865,"src":"505:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1871,"id":1878,"nodeType":"Return","src":"490:20:11"}]},"documentation":{"id":1863,"nodeType":"StructuredDocumentation","src":"349:59:11","text":" @dev Returns the largest of two numbers."},"id":1880,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:11","nodeType":"FunctionDefinition","parameters":{"id":1868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1865,"mutability":"mutable","name":"a","nameLocation":"434:1:11","nodeType":"VariableDeclaration","scope":1880,"src":"426:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1864,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1867,"mutability":"mutable","name":"b","nameLocation":"445:1:11","nodeType":"VariableDeclaration","scope":1880,"src":"437:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1866,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:11"},"returnParameters":{"id":1871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1870,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1880,"src":"471:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1869,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:11"},"scope":2720,"src":"413:104:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1897,"nodeType":"Block","src":"655:37:11","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1890,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"672:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1891,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1885,"src":"676:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1894,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1885,"src":"684:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:11","trueExpression":{"id":1893,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"680:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1889,"id":1896,"nodeType":"Return","src":"665:20:11"}]},"documentation":{"id":1881,"nodeType":"StructuredDocumentation","src":"523:60:11","text":" @dev Returns the smallest of two numbers."},"id":1898,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:11","nodeType":"FunctionDefinition","parameters":{"id":1886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1883,"mutability":"mutable","name":"a","nameLocation":"609:1:11","nodeType":"VariableDeclaration","scope":1898,"src":"601:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1882,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1885,"mutability":"mutable","name":"b","nameLocation":"620:1:11","nodeType":"VariableDeclaration","scope":1898,"src":"612:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1884,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:11"},"returnParameters":{"id":1889,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1888,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1898,"src":"646:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1887,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:11"},"scope":2720,"src":"588:104:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1920,"nodeType":"Block","src":"876:82:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1908,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1901,"src":"931:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":1909,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1903,"src":"935:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1911,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1912,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1901,"src":"941:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1913,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1903,"src":"945:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1915,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":1916,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1907,"id":1919,"nodeType":"Return","src":"923:28:11"}]},"documentation":{"id":1899,"nodeType":"StructuredDocumentation","src":"698:102:11","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":1921,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:11","nodeType":"FunctionDefinition","parameters":{"id":1904,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1901,"mutability":"mutable","name":"a","nameLocation":"830:1:11","nodeType":"VariableDeclaration","scope":1921,"src":"822:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1900,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1903,"mutability":"mutable","name":"b","nameLocation":"841:1:11","nodeType":"VariableDeclaration","scope":1921,"src":"833:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1902,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:11"},"returnParameters":{"id":1907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1906,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1921,"src":"867:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1905,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:11"},"scope":2720,"src":"805:153:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1945,"nodeType":"Block","src":"1228:123:11","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1931,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1924,"src":"1316:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1935,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1924,"src":"1330:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1936,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1938,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1939,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1926,"src":"1339:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1941,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:11","trueExpression":{"hexValue":"30","id":1934,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1930,"id":1944,"nodeType":"Return","src":"1309:35:11"}]},"documentation":{"id":1922,"nodeType":"StructuredDocumentation","src":"964:188:11","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":1946,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:11","nodeType":"FunctionDefinition","parameters":{"id":1927,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1924,"mutability":"mutable","name":"a","nameLocation":"1182:1:11","nodeType":"VariableDeclaration","scope":1946,"src":"1174:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1923,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1926,"mutability":"mutable","name":"b","nameLocation":"1193:1:11","nodeType":"VariableDeclaration","scope":1946,"src":"1185:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1925,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:11"},"returnParameters":{"id":1930,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1929,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1946,"src":"1219:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1928,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:11"},"scope":2720,"src":"1157:194:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2067,"nodeType":"Block","src":"1795:3797:11","statements":[{"id":2066,"nodeType":"UncheckedBlock","src":"1805:3781:11","statements":[{"assignments":[1959],"declarations":[{"constant":false,"id":1959,"mutability":"mutable","name":"prod0","nameLocation":"2134:5:11","nodeType":"VariableDeclaration","scope":2066,"src":"2126:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1958,"name":"uint256","nodeType":"ElementaryTypeName","src":"2126:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1960,"nodeType":"VariableDeclarationStatement","src":"2126:13:11"},{"assignments":[1962],"declarations":[{"constant":false,"id":1962,"mutability":"mutable","name":"prod1","nameLocation":"2206:5:11","nodeType":"VariableDeclaration","scope":2066,"src":"2198:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1961,"name":"uint256","nodeType":"ElementaryTypeName","src":"2198:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1963,"nodeType":"VariableDeclarationStatement","src":"2198:13:11"},{"AST":{"nodeType":"YulBlock","src":"2278:157:11","statements":[{"nodeType":"YulVariableDeclaration","src":"2296:30:11","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2313:1:11"},{"name":"y","nodeType":"YulIdentifier","src":"2316:1:11"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2323:1:11","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2319:3:11"},"nodeType":"YulFunctionCall","src":"2319:6:11"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2306:6:11"},"nodeType":"YulFunctionCall","src":"2306:20:11"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2300:2:11","type":""}]},{"nodeType":"YulAssignment","src":"2343:18:11","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2356:1:11"},{"name":"y","nodeType":"YulIdentifier","src":"2359:1:11"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2352:3:11"},"nodeType":"YulFunctionCall","src":"2352:9:11"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2343:5:11"}]},{"nodeType":"YulAssignment","src":"2378:43:11","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2395:2:11"},{"name":"prod0","nodeType":"YulIdentifier","src":"2399:5:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2391:3:11"},"nodeType":"YulFunctionCall","src":"2391:14:11"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2410:2:11"},{"name":"prod0","nodeType":"YulIdentifier","src":"2414:5:11"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2407:2:11"},"nodeType":"YulFunctionCall","src":"2407:13:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2387:3:11"},"nodeType":"YulFunctionCall","src":"2387:34:11"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2378:5:11"}]}]},"evmVersion":"london","externalReferences":[{"declaration":1959,"isOffset":false,"isSlot":false,"src":"2343:5:11","valueSize":1},{"declaration":1959,"isOffset":false,"isSlot":false,"src":"2399:5:11","valueSize":1},{"declaration":1959,"isOffset":false,"isSlot":false,"src":"2414:5:11","valueSize":1},{"declaration":1962,"isOffset":false,"isSlot":false,"src":"2378:5:11","valueSize":1},{"declaration":1949,"isOffset":false,"isSlot":false,"src":"2313:1:11","valueSize":1},{"declaration":1949,"isOffset":false,"isSlot":false,"src":"2356:1:11","valueSize":1},{"declaration":1951,"isOffset":false,"isSlot":false,"src":"2316:1:11","valueSize":1},{"declaration":1951,"isOffset":false,"isSlot":false,"src":"2359:1:11","valueSize":1}],"id":1964,"nodeType":"InlineAssembly","src":"2269:166:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1965,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1962,"src":"2516:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1966,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2525:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2516:10:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1973,"nodeType":"IfStatement","src":"2512:75:11","trueBody":{"id":1972,"nodeType":"Block","src":"2528:59:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1968,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1959,"src":"2553:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1969,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"2561:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2553:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1957,"id":1971,"nodeType":"Return","src":"2546:26:11"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1975,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"2697:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1976,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1962,"src":"2711:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2697:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1974,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"2689:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1978,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2689:28:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1979,"nodeType":"ExpressionStatement","src":"2689:28:11"},{"assignments":[1981],"declarations":[{"constant":false,"id":1981,"mutability":"mutable","name":"remainder","nameLocation":"2981:9:11","nodeType":"VariableDeclaration","scope":2066,"src":"2973:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1980,"name":"uint256","nodeType":"ElementaryTypeName","src":"2973:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1982,"nodeType":"VariableDeclarationStatement","src":"2973:17:11"},{"AST":{"nodeType":"YulBlock","src":"3013:291:11","statements":[{"nodeType":"YulAssignment","src":"3082:38:11","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3102:1:11"},{"name":"y","nodeType":"YulIdentifier","src":"3105:1:11"},{"name":"denominator","nodeType":"YulIdentifier","src":"3108:11:11"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3095:6:11"},"nodeType":"YulFunctionCall","src":"3095:25:11"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3082:9:11"}]},{"nodeType":"YulAssignment","src":"3202:41:11","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3215:5:11"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3225:9:11"},{"name":"prod0","nodeType":"YulIdentifier","src":"3236:5:11"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3222:2:11"},"nodeType":"YulFunctionCall","src":"3222:20:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3211:3:11"},"nodeType":"YulFunctionCall","src":"3211:32:11"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3202:5:11"}]},{"nodeType":"YulAssignment","src":"3260:30:11","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3273:5:11"},{"name":"remainder","nodeType":"YulIdentifier","src":"3280:9:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3269:3:11"},"nodeType":"YulFunctionCall","src":"3269:21:11"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3260:5:11"}]}]},"evmVersion":"london","externalReferences":[{"declaration":1953,"isOffset":false,"isSlot":false,"src":"3108:11:11","valueSize":1},{"declaration":1959,"isOffset":false,"isSlot":false,"src":"3236:5:11","valueSize":1},{"declaration":1959,"isOffset":false,"isSlot":false,"src":"3260:5:11","valueSize":1},{"declaration":1959,"isOffset":false,"isSlot":false,"src":"3273:5:11","valueSize":1},{"declaration":1962,"isOffset":false,"isSlot":false,"src":"3202:5:11","valueSize":1},{"declaration":1962,"isOffset":false,"isSlot":false,"src":"3215:5:11","valueSize":1},{"declaration":1981,"isOffset":false,"isSlot":false,"src":"3082:9:11","valueSize":1},{"declaration":1981,"isOffset":false,"isSlot":false,"src":"3225:9:11","valueSize":1},{"declaration":1981,"isOffset":false,"isSlot":false,"src":"3280:9:11","valueSize":1},{"declaration":1949,"isOffset":false,"isSlot":false,"src":"3102:1:11","valueSize":1},{"declaration":1951,"isOffset":false,"isSlot":false,"src":"3105:1:11","valueSize":1}],"id":1983,"nodeType":"InlineAssembly","src":"3004:300:11"},{"assignments":[1985],"declarations":[{"constant":false,"id":1985,"mutability":"mutable","name":"twos","nameLocation":"3619:4:11","nodeType":"VariableDeclaration","scope":2066,"src":"3611:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1984,"name":"uint256","nodeType":"ElementaryTypeName","src":"3611:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1993,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1986,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"3626:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3641:12:11","subExpression":{"id":1987,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"3642:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3656:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3641:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1991,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3640:18:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3626:32:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3611:47:11"},{"AST":{"nodeType":"YulBlock","src":"3681:362:11","statements":[{"nodeType":"YulAssignment","src":"3746:37:11","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"3765:11:11"},{"name":"twos","nodeType":"YulIdentifier","src":"3778:4:11"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3761:3:11"},"nodeType":"YulFunctionCall","src":"3761:22:11"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"3746:11:11"}]},{"nodeType":"YulAssignment","src":"3850:25:11","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3863:5:11"},{"name":"twos","nodeType":"YulIdentifier","src":"3870:4:11"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3859:3:11"},"nodeType":"YulFunctionCall","src":"3859:16:11"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3850:5:11"}]},{"nodeType":"YulAssignment","src":"3990:39:11","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4010:1:11","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4013:4:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4006:3:11"},"nodeType":"YulFunctionCall","src":"4006:12:11"},{"name":"twos","nodeType":"YulIdentifier","src":"4020:4:11"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4002:3:11"},"nodeType":"YulFunctionCall","src":"4002:23:11"},{"kind":"number","nodeType":"YulLiteral","src":"4027:1:11","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3998:3:11"},"nodeType":"YulFunctionCall","src":"3998:31:11"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"3990:4:11"}]}]},"evmVersion":"london","externalReferences":[{"declaration":1953,"isOffset":false,"isSlot":false,"src":"3746:11:11","valueSize":1},{"declaration":1953,"isOffset":false,"isSlot":false,"src":"3765:11:11","valueSize":1},{"declaration":1959,"isOffset":false,"isSlot":false,"src":"3850:5:11","valueSize":1},{"declaration":1959,"isOffset":false,"isSlot":false,"src":"3863:5:11","valueSize":1},{"declaration":1985,"isOffset":false,"isSlot":false,"src":"3778:4:11","valueSize":1},{"declaration":1985,"isOffset":false,"isSlot":false,"src":"3870:4:11","valueSize":1},{"declaration":1985,"isOffset":false,"isSlot":false,"src":"3990:4:11","valueSize":1},{"declaration":1985,"isOffset":false,"isSlot":false,"src":"4013:4:11","valueSize":1},{"declaration":1985,"isOffset":false,"isSlot":false,"src":"4020:4:11","valueSize":1}],"id":1994,"nodeType":"InlineAssembly","src":"3672:371:11"},{"expression":{"id":1999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1995,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1959,"src":"4109:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1996,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1962,"src":"4118:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1997,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"4126:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4118:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4109:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2000,"nodeType":"ExpressionStatement","src":"4109:21:11"},{"assignments":[2002],"declarations":[{"constant":false,"id":2002,"mutability":"mutable","name":"inverse","nameLocation":"4456:7:11","nodeType":"VariableDeclaration","scope":2066,"src":"4448:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2001,"name":"uint256","nodeType":"ElementaryTypeName","src":"4448:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2009,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":2003,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4467:1:11","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2004,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"4471:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4467:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2006,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4466:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":2007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4486:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4466:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4448:39:11"},{"expression":{"id":2016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2010,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"4704:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2011,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4715:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2012,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"4719:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2013,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"4733:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4719:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4715:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4704:36:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2017,"nodeType":"ExpressionStatement","src":"4704:36:11"},{"expression":{"id":2024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2018,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"4773:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2019,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4784:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2020,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"4788:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2021,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"4802:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4788:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4784:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4773:36:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2025,"nodeType":"ExpressionStatement","src":"4773:36:11"},{"expression":{"id":2032,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2026,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"4843:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2027,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4854:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2028,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"4858:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2029,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"4872:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4858:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4854:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4843:36:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2033,"nodeType":"ExpressionStatement","src":"4843:36:11"},{"expression":{"id":2040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2034,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"4913:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2035,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4924:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2036,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"4928:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2037,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"4942:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4928:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4924:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4913:36:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2041,"nodeType":"ExpressionStatement","src":"4913:36:11"},{"expression":{"id":2048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2042,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"4983:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4994:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2044,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"4998:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2045,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"5012:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4998:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4994:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4983:36:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2049,"nodeType":"ExpressionStatement","src":"4983:36:11"},{"expression":{"id":2056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2050,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"5054:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2051,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5065:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2052,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"5069:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2053,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"5083:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5069:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5054:36:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2057,"nodeType":"ExpressionStatement","src":"5054:36:11"},{"expression":{"id":2062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2058,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1956,"src":"5524:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2059,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1959,"src":"5533:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2060,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"5541:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5533:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5524:24:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2063,"nodeType":"ExpressionStatement","src":"5524:24:11"},{"expression":{"id":2064,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1956,"src":"5569:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1957,"id":2065,"nodeType":"Return","src":"5562:13:11"}]}]},"documentation":{"id":1947,"nodeType":"StructuredDocumentation","src":"1357:305:11","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":2068,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:11","nodeType":"FunctionDefinition","parameters":{"id":1954,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1949,"mutability":"mutable","name":"x","nameLocation":"1700:1:11","nodeType":"VariableDeclaration","scope":2068,"src":"1692:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1948,"name":"uint256","nodeType":"ElementaryTypeName","src":"1692:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1951,"mutability":"mutable","name":"y","nameLocation":"1719:1:11","nodeType":"VariableDeclaration","scope":2068,"src":"1711:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1950,"name":"uint256","nodeType":"ElementaryTypeName","src":"1711:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1953,"mutability":"mutable","name":"denominator","nameLocation":"1738:11:11","nodeType":"VariableDeclaration","scope":2068,"src":"1730:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1952,"name":"uint256","nodeType":"ElementaryTypeName","src":"1730:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:73:11"},"returnParameters":{"id":1957,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1956,"mutability":"mutable","name":"result","nameLocation":"1787:6:11","nodeType":"VariableDeclaration","scope":2068,"src":"1779:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1955,"name":"uint256","nodeType":"ElementaryTypeName","src":"1779:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1778:16:11"},"scope":2720,"src":"1667:3925:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2111,"nodeType":"Block","src":"5872:189:11","statements":[{"assignments":[2084],"declarations":[{"constant":false,"id":2084,"mutability":"mutable","name":"result","nameLocation":"5890:6:11","nodeType":"VariableDeclaration","scope":2111,"src":"5882:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2083,"name":"uint256","nodeType":"ElementaryTypeName","src":"5882:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2090,"initialValue":{"arguments":[{"id":2086,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2071,"src":"5906:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2087,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2073,"src":"5909:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2088,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2075,"src":"5912:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2085,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[2068,2112],"referencedDeclaration":2068,"src":"5899:6:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2089,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5899:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5882:42:11"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1862","typeString":"enum Math.Rounding"},"id":2094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2091,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2078,"src":"5938:8:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1862","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2092,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1862,"src":"5950:8:11","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1862_$","typeString":"type(enum Math.Rounding)"}},"id":2093,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5959:2:11","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1860,"src":"5950:11:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1862","typeString":"enum Math.Rounding"}},"src":"5938:23:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2096,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2071,"src":"5972:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2097,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2073,"src":"5975:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2098,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2075,"src":"5978:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2095,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967280,"src":"5965:6:11","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2099,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5965:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2100,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5993:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5965:29:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5938:56:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2108,"nodeType":"IfStatement","src":"5934:98:11","trueBody":{"id":2107,"nodeType":"Block","src":"5996:36:11","statements":[{"expression":{"id":2105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2103,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2084,"src":"6010:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6020:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6010:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2106,"nodeType":"ExpressionStatement","src":"6010:11:11"}]}},{"expression":{"id":2109,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2084,"src":"6048:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2082,"id":2110,"nodeType":"Return","src":"6041:13:11"}]},"documentation":{"id":2069,"nodeType":"StructuredDocumentation","src":"5598:121:11","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":2112,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"5733:6:11","nodeType":"FunctionDefinition","parameters":{"id":2079,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2071,"mutability":"mutable","name":"x","nameLocation":"5757:1:11","nodeType":"VariableDeclaration","scope":2112,"src":"5749:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2070,"name":"uint256","nodeType":"ElementaryTypeName","src":"5749:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2073,"mutability":"mutable","name":"y","nameLocation":"5776:1:11","nodeType":"VariableDeclaration","scope":2112,"src":"5768:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2072,"name":"uint256","nodeType":"ElementaryTypeName","src":"5768:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2075,"mutability":"mutable","name":"denominator","nameLocation":"5795:11:11","nodeType":"VariableDeclaration","scope":2112,"src":"5787:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2074,"name":"uint256","nodeType":"ElementaryTypeName","src":"5787:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2078,"mutability":"mutable","name":"rounding","nameLocation":"5825:8:11","nodeType":"VariableDeclaration","scope":2112,"src":"5816:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1862","typeString":"enum Math.Rounding"},"typeName":{"id":2077,"nodeType":"UserDefinedTypeName","pathNode":{"id":2076,"name":"Rounding","nameLocations":["5816:8:11"],"nodeType":"IdentifierPath","referencedDeclaration":1862,"src":"5816:8:11"},"referencedDeclaration":1862,"src":"5816:8:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1862","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"5739:100:11"},"returnParameters":{"id":2082,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2081,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2112,"src":"5863:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2080,"name":"uint256","nodeType":"ElementaryTypeName","src":"5863:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5862:9:11"},"scope":2720,"src":"5724:337:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2223,"nodeType":"Block","src":"6337:1585:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2120,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"6351:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6356:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6351:6:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2126,"nodeType":"IfStatement","src":"6347:45:11","trueBody":{"id":2125,"nodeType":"Block","src":"6359:33:11","statements":[{"expression":{"hexValue":"30","id":2123,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6380:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2119,"id":2124,"nodeType":"Return","src":"6373:8:11"}]}},{"assignments":[2128],"declarations":[{"constant":false,"id":2128,"mutability":"mutable","name":"result","nameLocation":"7079:6:11","nodeType":"VariableDeclaration","scope":2223,"src":"7071:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2127,"name":"uint256","nodeType":"ElementaryTypeName","src":"7071:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2137,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7088:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2131,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"7099:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2130,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2392,2428],"referencedDeclaration":2392,"src":"7094:4:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2132,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7094:7:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7105:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7094:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2135,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7093:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7088:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7071:36:11"},{"id":2222,"nodeType":"UncheckedBlock","src":"7508:408:11","statements":[{"expression":{"id":2147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2138,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"7532:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2139,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"7542:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2140,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"7551:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2141,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"7555:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7551:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7542:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2144,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7541:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7566:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7541:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7532:35:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2148,"nodeType":"ExpressionStatement","src":"7532:35:11"},{"expression":{"id":2158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2149,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"7581:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2150,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"7591:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2151,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"7600:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2152,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"7604:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7600:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7591:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2155,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7590:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7615:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7590:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7581:35:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2159,"nodeType":"ExpressionStatement","src":"7581:35:11"},{"expression":{"id":2169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2160,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"7630:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2161,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"7640:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2162,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"7649:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2163,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"7653:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7649:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7640:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2166,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7639:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7664:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7639:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7630:35:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2170,"nodeType":"ExpressionStatement","src":"7630:35:11"},{"expression":{"id":2180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2171,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"7679:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2172,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"7689:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2173,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"7698:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2174,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"7702:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7698:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7689:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2177,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7688:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7713:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7688:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7679:35:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2181,"nodeType":"ExpressionStatement","src":"7679:35:11"},{"expression":{"id":2191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2182,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"7728:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2183,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"7738:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2184,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"7747:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2185,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"7751:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7747:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7738:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2188,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7737:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7762:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7737:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7728:35:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2192,"nodeType":"ExpressionStatement","src":"7728:35:11"},{"expression":{"id":2202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2193,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"7777:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2194,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"7787:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2195,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"7796:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2196,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"7800:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7796:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7787:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2199,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7786:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7811:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7786:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7777:35:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2203,"nodeType":"ExpressionStatement","src":"7777:35:11"},{"expression":{"id":2213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2204,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"7826:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2205,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"7836:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2206,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"7845:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2207,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"7849:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7845:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7836:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2210,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7835:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7860:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7835:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7826:35:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2214,"nodeType":"ExpressionStatement","src":"7826:35:11"},{"expression":{"arguments":[{"id":2216,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"7886:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2217,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"7894:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2218,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"7898:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7894:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2215,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1898,"src":"7882:3:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7882:23:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2119,"id":2221,"nodeType":"Return","src":"7875:30:11"}]}]},"documentation":{"id":2113,"nodeType":"StructuredDocumentation","src":"6067:208:11","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2224,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6289:4:11","nodeType":"FunctionDefinition","parameters":{"id":2116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2115,"mutability":"mutable","name":"a","nameLocation":"6302:1:11","nodeType":"VariableDeclaration","scope":2224,"src":"6294:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2114,"name":"uint256","nodeType":"ElementaryTypeName","src":"6294:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6293:11:11"},"returnParameters":{"id":2119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2118,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2224,"src":"6328:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2117,"name":"uint256","nodeType":"ElementaryTypeName","src":"6328:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6327:9:11"},"scope":2720,"src":"6280:1642:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2259,"nodeType":"Block","src":"8098:161:11","statements":[{"id":2258,"nodeType":"UncheckedBlock","src":"8108:145:11","statements":[{"assignments":[2236],"declarations":[{"constant":false,"id":2236,"mutability":"mutable","name":"result","nameLocation":"8140:6:11","nodeType":"VariableDeclaration","scope":2258,"src":"8132:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2235,"name":"uint256","nodeType":"ElementaryTypeName","src":"8132:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2240,"initialValue":{"arguments":[{"id":2238,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"8154:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2237,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2224,2260],"referencedDeclaration":2224,"src":"8149:4:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2239,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8149:7:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8132:24:11"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2241,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2236,"src":"8177:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1862","typeString":"enum Math.Rounding"},"id":2245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2242,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"8187:8:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1862","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2243,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1862,"src":"8199:8:11","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1862_$","typeString":"type(enum Math.Rounding)"}},"id":2244,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8208:2:11","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1860,"src":"8199:11:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1862","typeString":"enum Math.Rounding"}},"src":"8187:23:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2246,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2236,"src":"8214:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2247,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2236,"src":"8223:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2249,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"8232:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8187:46:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8240:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8187:54:11","trueExpression":{"hexValue":"31","id":2252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8236:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2255,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8186:56:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8177:65:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2234,"id":2257,"nodeType":"Return","src":"8170:72:11"}]}]},"documentation":{"id":2225,"nodeType":"StructuredDocumentation","src":"7928:89:11","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2260,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8031:4:11","nodeType":"FunctionDefinition","parameters":{"id":2231,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2227,"mutability":"mutable","name":"a","nameLocation":"8044:1:11","nodeType":"VariableDeclaration","scope":2260,"src":"8036:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2226,"name":"uint256","nodeType":"ElementaryTypeName","src":"8036:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2230,"mutability":"mutable","name":"rounding","nameLocation":"8056:8:11","nodeType":"VariableDeclaration","scope":2260,"src":"8047:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1862","typeString":"enum Math.Rounding"},"typeName":{"id":2229,"nodeType":"UserDefinedTypeName","pathNode":{"id":2228,"name":"Rounding","nameLocations":["8047:8:11"],"nodeType":"IdentifierPath","referencedDeclaration":1862,"src":"8047:8:11"},"referencedDeclaration":1862,"src":"8047:8:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1862","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8035:30:11"},"returnParameters":{"id":2234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2233,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2260,"src":"8089:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2232,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8088:9:11"},"scope":2720,"src":"8022:237:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2391,"nodeType":"Block","src":"8444:922:11","statements":[{"assignments":[2269],"declarations":[{"constant":false,"id":2269,"mutability":"mutable","name":"result","nameLocation":"8462:6:11","nodeType":"VariableDeclaration","scope":2391,"src":"8454:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2268,"name":"uint256","nodeType":"ElementaryTypeName","src":"8454:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2271,"initialValue":{"hexValue":"30","id":2270,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8471:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8454:18:11"},{"id":2388,"nodeType":"UncheckedBlock","src":"8482:855:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2272,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"8510:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8519:3:11","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8510:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8525:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8510:16:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2286,"nodeType":"IfStatement","src":"8506:99:11","trueBody":{"id":2285,"nodeType":"Block","src":"8528:77:11","statements":[{"expression":{"id":2279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2277,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"8546:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2278,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8556:3:11","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8546:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2280,"nodeType":"ExpressionStatement","src":"8546:13:11"},{"expression":{"id":2283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2281,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2269,"src":"8577:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2282,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8587:3:11","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8577:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2284,"nodeType":"ExpressionStatement","src":"8577:13:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2287,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"8622:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2288,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8631:2:11","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8622:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8636:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8622:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2301,"nodeType":"IfStatement","src":"8618:96:11","trueBody":{"id":2300,"nodeType":"Block","src":"8639:75:11","statements":[{"expression":{"id":2294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2292,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"8657:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8667:2:11","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8657:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2295,"nodeType":"ExpressionStatement","src":"8657:12:11"},{"expression":{"id":2298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2296,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2269,"src":"8687:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8697:2:11","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8687:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2299,"nodeType":"ExpressionStatement","src":"8687:12:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2302,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"8731:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2303,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8740:2:11","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8731:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8745:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8731:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2316,"nodeType":"IfStatement","src":"8727:96:11","trueBody":{"id":2315,"nodeType":"Block","src":"8748:75:11","statements":[{"expression":{"id":2309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2307,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"8766:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8776:2:11","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8766:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2310,"nodeType":"ExpressionStatement","src":"8766:12:11"},{"expression":{"id":2313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2311,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2269,"src":"8796:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:2:11","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8796:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2314,"nodeType":"ExpressionStatement","src":"8796:12:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2317,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"8840:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8849:2:11","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8840:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8854:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8840:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2331,"nodeType":"IfStatement","src":"8836:96:11","trueBody":{"id":2330,"nodeType":"Block","src":"8857:75:11","statements":[{"expression":{"id":2324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2322,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"8875:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8885:2:11","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8875:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2325,"nodeType":"ExpressionStatement","src":"8875:12:11"},{"expression":{"id":2328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2326,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2269,"src":"8905:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8915:2:11","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8905:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2329,"nodeType":"ExpressionStatement","src":"8905:12:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2332,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"8949:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8958:1:11","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8949:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8962:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8949:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2346,"nodeType":"IfStatement","src":"8945:93:11","trueBody":{"id":2345,"nodeType":"Block","src":"8965:73:11","statements":[{"expression":{"id":2339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2337,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"8983:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8993:1:11","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8983:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2340,"nodeType":"ExpressionStatement","src":"8983:11:11"},{"expression":{"id":2343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2341,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2269,"src":"9012:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9022:1:11","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9012:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2344,"nodeType":"ExpressionStatement","src":"9012:11:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2347,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"9055:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9064:1:11","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9055:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9068:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9055:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2361,"nodeType":"IfStatement","src":"9051:93:11","trueBody":{"id":2360,"nodeType":"Block","src":"9071:73:11","statements":[{"expression":{"id":2354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2352,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"9089:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2353,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:1:11","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9089:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2355,"nodeType":"ExpressionStatement","src":"9089:11:11"},{"expression":{"id":2358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2356,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2269,"src":"9118:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9128:1:11","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9118:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2359,"nodeType":"ExpressionStatement","src":"9118:11:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2362,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"9161:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":2363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9170:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9161:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9174:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9161:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2376,"nodeType":"IfStatement","src":"9157:93:11","trueBody":{"id":2375,"nodeType":"Block","src":"9177:73:11","statements":[{"expression":{"id":2369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2367,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"9195:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":2368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9205:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9195:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2370,"nodeType":"ExpressionStatement","src":"9195:11:11"},{"expression":{"id":2373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2371,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2269,"src":"9224:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9234:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9224:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2374,"nodeType":"ExpressionStatement","src":"9224:11:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2377,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"9267:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9276:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9267:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9280:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9267:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2387,"nodeType":"IfStatement","src":"9263:64:11","trueBody":{"id":2386,"nodeType":"Block","src":"9283:44:11","statements":[{"expression":{"id":2384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2382,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2269,"src":"9301:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9311:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9301:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2385,"nodeType":"ExpressionStatement","src":"9301:11:11"}]}}]},{"expression":{"id":2389,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2269,"src":"9353:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2267,"id":2390,"nodeType":"Return","src":"9346:13:11"}]},"documentation":{"id":2261,"nodeType":"StructuredDocumentation","src":"8265:113:11","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2392,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8392:4:11","nodeType":"FunctionDefinition","parameters":{"id":2264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2263,"mutability":"mutable","name":"value","nameLocation":"8405:5:11","nodeType":"VariableDeclaration","scope":2392,"src":"8397:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2262,"name":"uint256","nodeType":"ElementaryTypeName","src":"8397:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8396:15:11"},"returnParameters":{"id":2267,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2266,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2392,"src":"8435:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2265,"name":"uint256","nodeType":"ElementaryTypeName","src":"8435:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8434:9:11"},"scope":2720,"src":"8383:983:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2427,"nodeType":"Block","src":"9599:165:11","statements":[{"id":2426,"nodeType":"UncheckedBlock","src":"9609:149:11","statements":[{"assignments":[2404],"declarations":[{"constant":false,"id":2404,"mutability":"mutable","name":"result","nameLocation":"9641:6:11","nodeType":"VariableDeclaration","scope":2426,"src":"9633:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2403,"name":"uint256","nodeType":"ElementaryTypeName","src":"9633:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2408,"initialValue":{"arguments":[{"id":2406,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"9655:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2405,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2392,2428],"referencedDeclaration":2392,"src":"9650:4:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9650:11:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9633:28:11"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2409,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2404,"src":"9682:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1862","typeString":"enum Math.Rounding"},"id":2413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2410,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2398,"src":"9692:8:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1862","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2411,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1862,"src":"9704:8:11","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1862_$","typeString":"type(enum Math.Rounding)"}},"id":2412,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9713:2:11","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1860,"src":"9704:11:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1862","typeString":"enum Math.Rounding"}},"src":"9692:23:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9719:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2415,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2404,"src":"9724:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2417,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"9733:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9692:46:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9745:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9692:54:11","trueExpression":{"hexValue":"31","id":2420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9741:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2423,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9691:56:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9682:65:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2402,"id":2425,"nodeType":"Return","src":"9675:72:11"}]}]},"documentation":{"id":2393,"nodeType":"StructuredDocumentation","src":"9372:142:11","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2428,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9528:4:11","nodeType":"FunctionDefinition","parameters":{"id":2399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2395,"mutability":"mutable","name":"value","nameLocation":"9541:5:11","nodeType":"VariableDeclaration","scope":2428,"src":"9533:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2394,"name":"uint256","nodeType":"ElementaryTypeName","src":"9533:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2398,"mutability":"mutable","name":"rounding","nameLocation":"9557:8:11","nodeType":"VariableDeclaration","scope":2428,"src":"9548:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1862","typeString":"enum Math.Rounding"},"typeName":{"id":2397,"nodeType":"UserDefinedTypeName","pathNode":{"id":2396,"name":"Rounding","nameLocations":["9548:8:11"],"nodeType":"IdentifierPath","referencedDeclaration":1862,"src":"9548:8:11"},"referencedDeclaration":1862,"src":"9548:8:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1862","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9532:34:11"},"returnParameters":{"id":2402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2401,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2428,"src":"9590:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2400,"name":"uint256","nodeType":"ElementaryTypeName","src":"9590:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9589:9:11"},"scope":2720,"src":"9519:245:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2556,"nodeType":"Block","src":"9951:828:11","statements":[{"assignments":[2437],"declarations":[{"constant":false,"id":2437,"mutability":"mutable","name":"result","nameLocation":"9969:6:11","nodeType":"VariableDeclaration","scope":2556,"src":"9961:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2436,"name":"uint256","nodeType":"ElementaryTypeName","src":"9961:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2439,"initialValue":{"hexValue":"30","id":2438,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9978:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9961:18:11"},{"id":2553,"nodeType":"UncheckedBlock","src":"9989:761:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2440,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2431,"src":"10017:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2443,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10026:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10030:2:11","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10026:6:11","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10017:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2456,"nodeType":"IfStatement","src":"10013:99:11","trueBody":{"id":2455,"nodeType":"Block","src":"10034:78:11","statements":[{"expression":{"id":2449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2445,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2431,"src":"10052:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2448,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10061:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10065:2:11","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10061:6:11","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10052:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2450,"nodeType":"ExpressionStatement","src":"10052:15:11"},{"expression":{"id":2453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2451,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"10085:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10095:2:11","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10085:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2454,"nodeType":"ExpressionStatement","src":"10085:12:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2457,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2431,"src":"10129:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2460,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10138:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10142:2:11","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10138:6:11","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10129:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2473,"nodeType":"IfStatement","src":"10125:99:11","trueBody":{"id":2472,"nodeType":"Block","src":"10146:78:11","statements":[{"expression":{"id":2466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2462,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2431,"src":"10164:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2465,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10173:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10177:2:11","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10173:6:11","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10164:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2467,"nodeType":"ExpressionStatement","src":"10164:15:11"},{"expression":{"id":2470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2468,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"10197:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2469,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10207:2:11","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10197:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2471,"nodeType":"ExpressionStatement","src":"10197:12:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2474,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2431,"src":"10241:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2477,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10250:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10254:2:11","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10250:6:11","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10241:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2490,"nodeType":"IfStatement","src":"10237:99:11","trueBody":{"id":2489,"nodeType":"Block","src":"10258:78:11","statements":[{"expression":{"id":2483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2479,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2431,"src":"10276:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2482,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10285:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10289:2:11","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10285:6:11","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10276:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2484,"nodeType":"ExpressionStatement","src":"10276:15:11"},{"expression":{"id":2487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2485,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"10309:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2486,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:11","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10309:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2488,"nodeType":"ExpressionStatement","src":"10309:12:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2491,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2431,"src":"10353:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2494,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2492,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10362:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2493,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10366:1:11","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10362:5:11","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10353:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2507,"nodeType":"IfStatement","src":"10349:96:11","trueBody":{"id":2506,"nodeType":"Block","src":"10369:76:11","statements":[{"expression":{"id":2500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2496,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2431,"src":"10387:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2499,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2497,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10396:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10400:1:11","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10396:5:11","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10387:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2501,"nodeType":"ExpressionStatement","src":"10387:14:11"},{"expression":{"id":2504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2502,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"10419:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2503,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:1:11","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10419:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2505,"nodeType":"ExpressionStatement","src":"10419:11:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2508,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2431,"src":"10462:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2511,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10471:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10475:1:11","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10471:5:11","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10462:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2524,"nodeType":"IfStatement","src":"10458:96:11","trueBody":{"id":2523,"nodeType":"Block","src":"10478:76:11","statements":[{"expression":{"id":2517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2513,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2431,"src":"10496:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2516,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2514,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10505:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10509:1:11","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10505:5:11","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10496:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2518,"nodeType":"ExpressionStatement","src":"10496:14:11"},{"expression":{"id":2521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2519,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"10528:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10538:1:11","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10528:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2522,"nodeType":"ExpressionStatement","src":"10528:11:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2525,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2431,"src":"10571:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2528,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2526,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10580:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2527,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10584:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10580:5:11","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10571:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2541,"nodeType":"IfStatement","src":"10567:96:11","trueBody":{"id":2540,"nodeType":"Block","src":"10587:76:11","statements":[{"expression":{"id":2534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2530,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2431,"src":"10605:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2533,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10614:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2532,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10618:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10614:5:11","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10605:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2535,"nodeType":"ExpressionStatement","src":"10605:14:11"},{"expression":{"id":2538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2536,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"10637:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10647:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10637:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2539,"nodeType":"ExpressionStatement","src":"10637:11:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2542,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2431,"src":"10680:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":2545,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10689:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":2544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10693:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10689:5:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10680:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2552,"nodeType":"IfStatement","src":"10676:64:11","trueBody":{"id":2551,"nodeType":"Block","src":"10696:44:11","statements":[{"expression":{"id":2549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2547,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"10714:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2548,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10724:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10714:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2550,"nodeType":"ExpressionStatement","src":"10714:11:11"}]}}]},{"expression":{"id":2554,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"10766:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2435,"id":2555,"nodeType":"Return","src":"10759:13:11"}]},"documentation":{"id":2429,"nodeType":"StructuredDocumentation","src":"9770:114:11","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2557,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"9898:5:11","nodeType":"FunctionDefinition","parameters":{"id":2432,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2431,"mutability":"mutable","name":"value","nameLocation":"9912:5:11","nodeType":"VariableDeclaration","scope":2557,"src":"9904:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2430,"name":"uint256","nodeType":"ElementaryTypeName","src":"9904:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9903:15:11"},"returnParameters":{"id":2435,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2434,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2557,"src":"9942:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2433,"name":"uint256","nodeType":"ElementaryTypeName","src":"9942:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9941:9:11"},"scope":2720,"src":"9889:890:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2592,"nodeType":"Block","src":"11014:165:11","statements":[{"id":2591,"nodeType":"UncheckedBlock","src":"11024:149:11","statements":[{"assignments":[2569],"declarations":[{"constant":false,"id":2569,"mutability":"mutable","name":"result","nameLocation":"11056:6:11","nodeType":"VariableDeclaration","scope":2591,"src":"11048:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2568,"name":"uint256","nodeType":"ElementaryTypeName","src":"11048:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2573,"initialValue":{"arguments":[{"id":2571,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2560,"src":"11071:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2570,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[2557,2593],"referencedDeclaration":2557,"src":"11065:5:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11065:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11048:29:11"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2574,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2569,"src":"11098:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1862","typeString":"enum Math.Rounding"},"id":2578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2575,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2563,"src":"11108:8:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1862","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2576,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1862,"src":"11120:8:11","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1862_$","typeString":"type(enum Math.Rounding)"}},"id":2577,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11129:2:11","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1860,"src":"11120:11:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1862","typeString":"enum Math.Rounding"}},"src":"11108:23:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11135:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":2580,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2569,"src":"11139:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2582,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2560,"src":"11148:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:18:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11108:45:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11160:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11108:53:11","trueExpression":{"hexValue":"31","id":2585,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11156:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2588,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11107:55:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11098:64:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2567,"id":2590,"nodeType":"Return","src":"11091:71:11"}]}]},"documentation":{"id":2558,"nodeType":"StructuredDocumentation","src":"10785:143:11","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2593,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10942:5:11","nodeType":"FunctionDefinition","parameters":{"id":2564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2560,"mutability":"mutable","name":"value","nameLocation":"10956:5:11","nodeType":"VariableDeclaration","scope":2593,"src":"10948:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2559,"name":"uint256","nodeType":"ElementaryTypeName","src":"10948:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2563,"mutability":"mutable","name":"rounding","nameLocation":"10972:8:11","nodeType":"VariableDeclaration","scope":2593,"src":"10963:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1862","typeString":"enum Math.Rounding"},"typeName":{"id":2562,"nodeType":"UserDefinedTypeName","pathNode":{"id":2561,"name":"Rounding","nameLocations":["10963:8:11"],"nodeType":"IdentifierPath","referencedDeclaration":1862,"src":"10963:8:11"},"referencedDeclaration":1862,"src":"10963:8:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1862","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10947:34:11"},"returnParameters":{"id":2567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2566,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2593,"src":"11005:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2565,"name":"uint256","nodeType":"ElementaryTypeName","src":"11005:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11004:9:11"},"scope":2720,"src":"10933:246:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2679,"nodeType":"Block","src":"11493:600:11","statements":[{"assignments":[2602],"declarations":[{"constant":false,"id":2602,"mutability":"mutable","name":"result","nameLocation":"11511:6:11","nodeType":"VariableDeclaration","scope":2679,"src":"11503:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2601,"name":"uint256","nodeType":"ElementaryTypeName","src":"11503:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2604,"initialValue":{"hexValue":"30","id":2603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11520:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11503:18:11"},{"id":2676,"nodeType":"UncheckedBlock","src":"11531:533:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2605,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2596,"src":"11559:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2606,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11568:3:11","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11559:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2608,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11574:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11559:16:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2619,"nodeType":"IfStatement","src":"11555:98:11","trueBody":{"id":2618,"nodeType":"Block","src":"11577:76:11","statements":[{"expression":{"id":2612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2610,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2596,"src":"11595:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2611,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11605:3:11","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11595:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2613,"nodeType":"ExpressionStatement","src":"11595:13:11"},{"expression":{"id":2616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2614,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2602,"src":"11626:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2615,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11636:2:11","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11626:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2617,"nodeType":"ExpressionStatement","src":"11626:12:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2620,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2596,"src":"11670:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2621,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11679:2:11","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11670:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11684:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11670:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2634,"nodeType":"IfStatement","src":"11666:95:11","trueBody":{"id":2633,"nodeType":"Block","src":"11687:74:11","statements":[{"expression":{"id":2627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2625,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2596,"src":"11705:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11715:2:11","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11705:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2628,"nodeType":"ExpressionStatement","src":"11705:12:11"},{"expression":{"id":2631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2629,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2602,"src":"11735:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2630,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11745:1:11","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11735:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2632,"nodeType":"ExpressionStatement","src":"11735:11:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2635,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2596,"src":"11778:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2636,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11787:2:11","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11778:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11792:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11778:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2649,"nodeType":"IfStatement","src":"11774:95:11","trueBody":{"id":2648,"nodeType":"Block","src":"11795:74:11","statements":[{"expression":{"id":2642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2640,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2596,"src":"11813:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11823:2:11","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11813:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2643,"nodeType":"ExpressionStatement","src":"11813:12:11"},{"expression":{"id":2646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2644,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2602,"src":"11843:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2645,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11853:1:11","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11843:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2647,"nodeType":"ExpressionStatement","src":"11843:11:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2650,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2596,"src":"11886:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11895:2:11","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11886:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11900:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11886:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2664,"nodeType":"IfStatement","src":"11882:95:11","trueBody":{"id":2663,"nodeType":"Block","src":"11903:74:11","statements":[{"expression":{"id":2657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2655,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2596,"src":"11921:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11931:2:11","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11921:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2658,"nodeType":"ExpressionStatement","src":"11921:12:11"},{"expression":{"id":2661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2659,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2602,"src":"11951:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2660,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11961:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11951:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2662,"nodeType":"ExpressionStatement","src":"11951:11:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2665,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2596,"src":"11994:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12003:1:11","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11994:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12007:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11994:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2675,"nodeType":"IfStatement","src":"11990:64:11","trueBody":{"id":2674,"nodeType":"Block","src":"12010:44:11","statements":[{"expression":{"id":2672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2670,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2602,"src":"12028:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12028:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2673,"nodeType":"ExpressionStatement","src":"12028:11:11"}]}}]},{"expression":{"id":2677,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2602,"src":"12080:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2600,"id":2678,"nodeType":"Return","src":"12073:13:11"}]},"documentation":{"id":2594,"nodeType":"StructuredDocumentation","src":"11185:240:11","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":2680,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11439:6:11","nodeType":"FunctionDefinition","parameters":{"id":2597,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2596,"mutability":"mutable","name":"value","nameLocation":"11454:5:11","nodeType":"VariableDeclaration","scope":2680,"src":"11446:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2595,"name":"uint256","nodeType":"ElementaryTypeName","src":"11446:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11445:15:11"},"returnParameters":{"id":2600,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2599,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2680,"src":"11484:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2598,"name":"uint256","nodeType":"ElementaryTypeName","src":"11484:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11483:9:11"},"scope":2720,"src":"11430:663:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2718,"nodeType":"Block","src":"12329:173:11","statements":[{"id":2717,"nodeType":"UncheckedBlock","src":"12339:157:11","statements":[{"assignments":[2692],"declarations":[{"constant":false,"id":2692,"mutability":"mutable","name":"result","nameLocation":"12371:6:11","nodeType":"VariableDeclaration","scope":2717,"src":"12363:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2691,"name":"uint256","nodeType":"ElementaryTypeName","src":"12363:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2696,"initialValue":{"arguments":[{"id":2694,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2683,"src":"12387:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2693,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[2680,2719],"referencedDeclaration":2680,"src":"12380:6:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2695,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12380:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12363:30:11"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2697,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2692,"src":"12414:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1862","typeString":"enum Math.Rounding"},"id":2701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2698,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2686,"src":"12424:8:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1862","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2699,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1862,"src":"12436:8:11","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1862_$","typeString":"type(enum Math.Rounding)"}},"id":2700,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12445:2:11","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1860,"src":"12436:11:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1862","typeString":"enum Math.Rounding"}},"src":"12424:23:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2702,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12451:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2703,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2692,"src":"12457:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"38","id":2704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12466:1:11","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12457:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2706,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12456:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2708,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2683,"src":"12471:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:25:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12424:52:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12483:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12424:60:11","trueExpression":{"hexValue":"31","id":2711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12479:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2714,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12423:62:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12414:71:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2690,"id":2716,"nodeType":"Return","src":"12407:78:11"}]}]},"documentation":{"id":2681,"nodeType":"StructuredDocumentation","src":"12099:143:11","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2719,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12256:6:11","nodeType":"FunctionDefinition","parameters":{"id":2687,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2683,"mutability":"mutable","name":"value","nameLocation":"12271:5:11","nodeType":"VariableDeclaration","scope":2719,"src":"12263:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2682,"name":"uint256","nodeType":"ElementaryTypeName","src":"12263:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2686,"mutability":"mutable","name":"rounding","nameLocation":"12287:8:11","nodeType":"VariableDeclaration","scope":2719,"src":"12278:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1862","typeString":"enum Math.Rounding"},"typeName":{"id":2685,"nodeType":"UserDefinedTypeName","pathNode":{"id":2684,"name":"Rounding","nameLocations":["12278:8:11"],"nodeType":"IdentifierPath","referencedDeclaration":1862,"src":"12278:8:11"},"referencedDeclaration":1862,"src":"12278:8:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1862","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12262:34:11"},"returnParameters":{"id":2690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2689,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2719,"src":"12320:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2688,"name":"uint256","nodeType":"ElementaryTypeName","src":"12320:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12319:9:11"},"scope":2720,"src":"12247:255:11","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2721,"src":"202:12302:11","usedErrors":[]}],"src":"103:12402:11"},"id":11},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SafeMath.sol","exportedSymbols":{"SafeMath":[3032]},"id":3033,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2722,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:12"},{"abstract":false,"baseContracts":[],"canonicalName":"SafeMath","contractDependencies":[],"contractKind":"library","documentation":{"id":2723,"nodeType":"StructuredDocumentation","src":"285:196:12","text":" @dev Wrappers over Solidity's arithmetic operations.\n NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n now has built in overflow checking."},"fullyImplemented":true,"id":3032,"linearizedBaseContracts":[3032],"name":"SafeMath","nameLocation":"490:8:12","nodeType":"ContractDefinition","nodes":[{"body":{"id":2754,"nodeType":"Block","src":"717:140:12","statements":[{"id":2753,"nodeType":"UncheckedBlock","src":"727:124:12","statements":[{"assignments":[2736],"declarations":[{"constant":false,"id":2736,"mutability":"mutable","name":"c","nameLocation":"759:1:12","nodeType":"VariableDeclaration","scope":2753,"src":"751:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2735,"name":"uint256","nodeType":"ElementaryTypeName","src":"751:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2740,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2737,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2726,"src":"763:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2738,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"767:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"763:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"751:17:12"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2741,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2736,"src":"786:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2742,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2726,"src":"790:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"786:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2748,"nodeType":"IfStatement","src":"782:28:12","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2744,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"801:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"808:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2746,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"800:10:12","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2734,"id":2747,"nodeType":"Return","src":"793:17:12"}},{"expression":{"components":[{"hexValue":"74727565","id":2749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"832:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":2750,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2736,"src":"838:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2751,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"831:9:12","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2734,"id":2752,"nodeType":"Return","src":"824:16:12"}]}]},"documentation":{"id":2724,"nodeType":"StructuredDocumentation","src":"505:131:12","text":" @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":2755,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"650:6:12","nodeType":"FunctionDefinition","parameters":{"id":2729,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2726,"mutability":"mutable","name":"a","nameLocation":"665:1:12","nodeType":"VariableDeclaration","scope":2755,"src":"657:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2725,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2728,"mutability":"mutable","name":"b","nameLocation":"676:1:12","nodeType":"VariableDeclaration","scope":2755,"src":"668:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2727,"name":"uint256","nodeType":"ElementaryTypeName","src":"668:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"656:22:12"},"returnParameters":{"id":2734,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2731,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2755,"src":"702:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2730,"name":"bool","nodeType":"ElementaryTypeName","src":"702:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2733,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2755,"src":"708:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2732,"name":"uint256","nodeType":"ElementaryTypeName","src":"708:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"701:15:12"},"scope":3032,"src":"641:216:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2782,"nodeType":"Block","src":"1078:113:12","statements":[{"id":2781,"nodeType":"UncheckedBlock","src":"1088:97:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2767,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2760,"src":"1116:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2768,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2758,"src":"1120:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1116:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2774,"nodeType":"IfStatement","src":"1112:28:12","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2770,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1131:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2771,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1138:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2772,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1130:10:12","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2766,"id":2773,"nodeType":"Return","src":"1123:17:12"}},{"expression":{"components":[{"hexValue":"74727565","id":2775,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1162:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2776,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2758,"src":"1168:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2777,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2760,"src":"1172:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1168:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2779,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1161:13:12","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2766,"id":2780,"nodeType":"Return","src":"1154:20:12"}]}]},"documentation":{"id":2756,"nodeType":"StructuredDocumentation","src":"863:134:12","text":" @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":2783,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"1011:6:12","nodeType":"FunctionDefinition","parameters":{"id":2761,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2758,"mutability":"mutable","name":"a","nameLocation":"1026:1:12","nodeType":"VariableDeclaration","scope":2783,"src":"1018:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2757,"name":"uint256","nodeType":"ElementaryTypeName","src":"1018:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2760,"mutability":"mutable","name":"b","nameLocation":"1037:1:12","nodeType":"VariableDeclaration","scope":2783,"src":"1029:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2759,"name":"uint256","nodeType":"ElementaryTypeName","src":"1029:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1017:22:12"},"returnParameters":{"id":2766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2763,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2783,"src":"1063:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2762,"name":"bool","nodeType":"ElementaryTypeName","src":"1063:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2765,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2783,"src":"1069:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2764,"name":"uint256","nodeType":"ElementaryTypeName","src":"1069:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1062:15:12"},"scope":3032,"src":"1002:189:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2824,"nodeType":"Block","src":"1415:417:12","statements":[{"id":2823,"nodeType":"UncheckedBlock","src":"1425:401:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2795,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2786,"src":"1683:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2796,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1688:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1683:6:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2802,"nodeType":"IfStatement","src":"1679:28:12","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":2798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1699:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":2799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1705:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2800,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1698:9:12","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2794,"id":2801,"nodeType":"Return","src":"1691:16:12"}},{"assignments":[2804],"declarations":[{"constant":false,"id":2804,"mutability":"mutable","name":"c","nameLocation":"1729:1:12","nodeType":"VariableDeclaration","scope":2823,"src":"1721:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2803,"name":"uint256","nodeType":"ElementaryTypeName","src":"1721:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2808,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2805,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2786,"src":"1733:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2806,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2788,"src":"1737:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1733:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1721:17:12"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2809,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2804,"src":"1756:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2810,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2786,"src":"1760:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1756:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2812,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2788,"src":"1765:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1756:10:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2818,"nodeType":"IfStatement","src":"1752:33:12","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1776:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1783:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2816,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1775:10:12","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2794,"id":2817,"nodeType":"Return","src":"1768:17:12"}},{"expression":{"components":[{"hexValue":"74727565","id":2819,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1807:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":2820,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2804,"src":"1813:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2821,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1806:9:12","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2794,"id":2822,"nodeType":"Return","src":"1799:16:12"}]}]},"documentation":{"id":2784,"nodeType":"StructuredDocumentation","src":"1197:137:12","text":" @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":2825,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"1348:6:12","nodeType":"FunctionDefinition","parameters":{"id":2789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2786,"mutability":"mutable","name":"a","nameLocation":"1363:1:12","nodeType":"VariableDeclaration","scope":2825,"src":"1355:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2785,"name":"uint256","nodeType":"ElementaryTypeName","src":"1355:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2788,"mutability":"mutable","name":"b","nameLocation":"1374:1:12","nodeType":"VariableDeclaration","scope":2825,"src":"1366:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2787,"name":"uint256","nodeType":"ElementaryTypeName","src":"1366:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1354:22:12"},"returnParameters":{"id":2794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2791,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2825,"src":"1400:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2790,"name":"bool","nodeType":"ElementaryTypeName","src":"1400:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2793,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2825,"src":"1406:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2792,"name":"uint256","nodeType":"ElementaryTypeName","src":"1406:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1399:15:12"},"scope":3032,"src":"1339:493:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2852,"nodeType":"Block","src":"2057:114:12","statements":[{"id":2851,"nodeType":"UncheckedBlock","src":"2067:98:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2837,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2830,"src":"2095:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2100:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2095:6:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2844,"nodeType":"IfStatement","src":"2091:29:12","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2111:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2118:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2842,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2110:10:12","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2836,"id":2843,"nodeType":"Return","src":"2103:17:12"}},{"expression":{"components":[{"hexValue":"74727565","id":2845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2142:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2846,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"2148:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2847,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2830,"src":"2152:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2148:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2849,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2141:13:12","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2836,"id":2850,"nodeType":"Return","src":"2134:20:12"}]}]},"documentation":{"id":2826,"nodeType":"StructuredDocumentation","src":"1838:138:12","text":" @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"},"id":2853,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"1990:6:12","nodeType":"FunctionDefinition","parameters":{"id":2831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2828,"mutability":"mutable","name":"a","nameLocation":"2005:1:12","nodeType":"VariableDeclaration","scope":2853,"src":"1997:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2827,"name":"uint256","nodeType":"ElementaryTypeName","src":"1997:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2830,"mutability":"mutable","name":"b","nameLocation":"2016:1:12","nodeType":"VariableDeclaration","scope":2853,"src":"2008:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2829,"name":"uint256","nodeType":"ElementaryTypeName","src":"2008:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1996:22:12"},"returnParameters":{"id":2836,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2833,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2853,"src":"2042:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2832,"name":"bool","nodeType":"ElementaryTypeName","src":"2042:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2835,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2853,"src":"2048:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2834,"name":"uint256","nodeType":"ElementaryTypeName","src":"2048:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2041:15:12"},"scope":3032,"src":"1981:190:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2880,"nodeType":"Block","src":"2406:114:12","statements":[{"id":2879,"nodeType":"UncheckedBlock","src":"2416:98:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2865,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2858,"src":"2444:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2449:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2444:6:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2872,"nodeType":"IfStatement","src":"2440:29:12","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2868,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2460:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2467:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2870,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2459:10:12","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2864,"id":2871,"nodeType":"Return","src":"2452:17:12"}},{"expression":{"components":[{"hexValue":"74727565","id":2873,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2491:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2874,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2856,"src":"2497:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":2875,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2858,"src":"2501:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2497:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2877,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2490:13:12","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2864,"id":2878,"nodeType":"Return","src":"2483:20:12"}]}]},"documentation":{"id":2854,"nodeType":"StructuredDocumentation","src":"2177:148:12","text":" @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"},"id":2881,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"2339:6:12","nodeType":"FunctionDefinition","parameters":{"id":2859,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2856,"mutability":"mutable","name":"a","nameLocation":"2354:1:12","nodeType":"VariableDeclaration","scope":2881,"src":"2346:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2855,"name":"uint256","nodeType":"ElementaryTypeName","src":"2346:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2858,"mutability":"mutable","name":"b","nameLocation":"2365:1:12","nodeType":"VariableDeclaration","scope":2881,"src":"2357:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2857,"name":"uint256","nodeType":"ElementaryTypeName","src":"2357:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2345:22:12"},"returnParameters":{"id":2864,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2861,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2881,"src":"2391:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2860,"name":"bool","nodeType":"ElementaryTypeName","src":"2391:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2863,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2881,"src":"2397:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2862,"name":"uint256","nodeType":"ElementaryTypeName","src":"2397:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2390:15:12"},"scope":3032,"src":"2330:190:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2895,"nodeType":"Block","src":"2822:29:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2891,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"2839:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2892,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2886,"src":"2843:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2839:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2890,"id":2894,"nodeType":"Return","src":"2832:12:12"}]},"documentation":{"id":2882,"nodeType":"StructuredDocumentation","src":"2526:224:12","text":" @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."},"id":2896,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"2764:3:12","nodeType":"FunctionDefinition","parameters":{"id":2887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2884,"mutability":"mutable","name":"a","nameLocation":"2776:1:12","nodeType":"VariableDeclaration","scope":2896,"src":"2768:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2883,"name":"uint256","nodeType":"ElementaryTypeName","src":"2768:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2886,"mutability":"mutable","name":"b","nameLocation":"2787:1:12","nodeType":"VariableDeclaration","scope":2896,"src":"2779:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2885,"name":"uint256","nodeType":"ElementaryTypeName","src":"2779:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2767:22:12"},"returnParameters":{"id":2890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2889,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2896,"src":"2813:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2888,"name":"uint256","nodeType":"ElementaryTypeName","src":"2813:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2812:9:12"},"scope":3032,"src":"2755:96:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2910,"nodeType":"Block","src":"3189:29:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2906,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2899,"src":"3206:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2907,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2901,"src":"3210:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3206:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2905,"id":2909,"nodeType":"Return","src":"3199:12:12"}]},"documentation":{"id":2897,"nodeType":"StructuredDocumentation","src":"2857:260:12","text":" @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":2911,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"3131:3:12","nodeType":"FunctionDefinition","parameters":{"id":2902,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2899,"mutability":"mutable","name":"a","nameLocation":"3143:1:12","nodeType":"VariableDeclaration","scope":2911,"src":"3135:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2898,"name":"uint256","nodeType":"ElementaryTypeName","src":"3135:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2901,"mutability":"mutable","name":"b","nameLocation":"3154:1:12","nodeType":"VariableDeclaration","scope":2911,"src":"3146:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2900,"name":"uint256","nodeType":"ElementaryTypeName","src":"3146:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3134:22:12"},"returnParameters":{"id":2905,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2904,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2911,"src":"3180:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2903,"name":"uint256","nodeType":"ElementaryTypeName","src":"3180:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3179:9:12"},"scope":3032,"src":"3122:96:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2925,"nodeType":"Block","src":"3532:29:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2921,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2914,"src":"3549:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2922,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2916,"src":"3553:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3549:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2920,"id":2924,"nodeType":"Return","src":"3542:12:12"}]},"documentation":{"id":2912,"nodeType":"StructuredDocumentation","src":"3224:236:12","text":" @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."},"id":2926,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nameLocation":"3474:3:12","nodeType":"FunctionDefinition","parameters":{"id":2917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2914,"mutability":"mutable","name":"a","nameLocation":"3486:1:12","nodeType":"VariableDeclaration","scope":2926,"src":"3478:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2913,"name":"uint256","nodeType":"ElementaryTypeName","src":"3478:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2916,"mutability":"mutable","name":"b","nameLocation":"3497:1:12","nodeType":"VariableDeclaration","scope":2926,"src":"3489:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2915,"name":"uint256","nodeType":"ElementaryTypeName","src":"3489:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3477:22:12"},"returnParameters":{"id":2920,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2919,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2926,"src":"3523:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2918,"name":"uint256","nodeType":"ElementaryTypeName","src":"3523:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3522:9:12"},"scope":3032,"src":"3465:96:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2940,"nodeType":"Block","src":"3917:29:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2936,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2929,"src":"3934:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2937,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2931,"src":"3938:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3934:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2935,"id":2939,"nodeType":"Return","src":"3927:12:12"}]},"documentation":{"id":2927,"nodeType":"StructuredDocumentation","src":"3567:278:12","text":" @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator.\n Requirements:\n - The divisor cannot be zero."},"id":2941,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"3859:3:12","nodeType":"FunctionDefinition","parameters":{"id":2932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2929,"mutability":"mutable","name":"a","nameLocation":"3871:1:12","nodeType":"VariableDeclaration","scope":2941,"src":"3863:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2928,"name":"uint256","nodeType":"ElementaryTypeName","src":"3863:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2931,"mutability":"mutable","name":"b","nameLocation":"3882:1:12","nodeType":"VariableDeclaration","scope":2941,"src":"3874:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2930,"name":"uint256","nodeType":"ElementaryTypeName","src":"3874:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3862:22:12"},"returnParameters":{"id":2935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2934,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2941,"src":"3908:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2933,"name":"uint256","nodeType":"ElementaryTypeName","src":"3908:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3907:9:12"},"scope":3032,"src":"3850:96:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2955,"nodeType":"Block","src":"4466:29:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2951,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2944,"src":"4483:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":2952,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2946,"src":"4487:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4483:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2950,"id":2954,"nodeType":"Return","src":"4476:12:12"}]},"documentation":{"id":2942,"nodeType":"StructuredDocumentation","src":"3952:442:12","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":2956,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nameLocation":"4408:3:12","nodeType":"FunctionDefinition","parameters":{"id":2947,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2944,"mutability":"mutable","name":"a","nameLocation":"4420:1:12","nodeType":"VariableDeclaration","scope":2956,"src":"4412:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2943,"name":"uint256","nodeType":"ElementaryTypeName","src":"4412:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2946,"mutability":"mutable","name":"b","nameLocation":"4431:1:12","nodeType":"VariableDeclaration","scope":2956,"src":"4423:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2945,"name":"uint256","nodeType":"ElementaryTypeName","src":"4423:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4411:22:12"},"returnParameters":{"id":2950,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2949,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2956,"src":"4457:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2948,"name":"uint256","nodeType":"ElementaryTypeName","src":"4457:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4456:9:12"},"scope":3032,"src":"4399:96:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2980,"nodeType":"Block","src":"5084:106:12","statements":[{"id":2979,"nodeType":"UncheckedBlock","src":"5094:90:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2969,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2961,"src":"5126:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":2970,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2959,"src":"5131:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5126:6:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2972,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2963,"src":"5134:12:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2968,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"5118:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5118:29:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2974,"nodeType":"ExpressionStatement","src":"5118:29:12"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2975,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2959,"src":"5168:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2976,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2961,"src":"5172:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5168:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2967,"id":2978,"nodeType":"Return","src":"5161:12:12"}]}]},"documentation":{"id":2957,"nodeType":"StructuredDocumentation","src":"4501:453:12","text":" @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":2981,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"4968:3:12","nodeType":"FunctionDefinition","parameters":{"id":2964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2959,"mutability":"mutable","name":"a","nameLocation":"4989:1:12","nodeType":"VariableDeclaration","scope":2981,"src":"4981:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2958,"name":"uint256","nodeType":"ElementaryTypeName","src":"4981:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2961,"mutability":"mutable","name":"b","nameLocation":"5008:1:12","nodeType":"VariableDeclaration","scope":2981,"src":"5000:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2960,"name":"uint256","nodeType":"ElementaryTypeName","src":"5000:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2963,"mutability":"mutable","name":"errorMessage","nameLocation":"5033:12:12","nodeType":"VariableDeclaration","scope":2981,"src":"5019:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2962,"name":"string","nodeType":"ElementaryTypeName","src":"5019:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4971:80:12"},"returnParameters":{"id":2967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2966,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2981,"src":"5075:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2965,"name":"uint256","nodeType":"ElementaryTypeName","src":"5075:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5074:9:12"},"scope":3032,"src":"4959:231:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3005,"nodeType":"Block","src":"5799:105:12","statements":[{"id":3004,"nodeType":"UncheckedBlock","src":"5809:89:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2994,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2986,"src":"5841:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2995,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5845:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5841:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2997,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2988,"src":"5848:12:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2993,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"5833:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2998,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5833:28:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2999,"nodeType":"ExpressionStatement","src":"5833:28:12"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3000,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2984,"src":"5882:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3001,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2986,"src":"5886:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5882:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2992,"id":3003,"nodeType":"Return","src":"5875:12:12"}]}]},"documentation":{"id":2982,"nodeType":"StructuredDocumentation","src":"5196:473:12","text":" @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":3006,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"5683:3:12","nodeType":"FunctionDefinition","parameters":{"id":2989,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2984,"mutability":"mutable","name":"a","nameLocation":"5704:1:12","nodeType":"VariableDeclaration","scope":3006,"src":"5696:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2983,"name":"uint256","nodeType":"ElementaryTypeName","src":"5696:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2986,"mutability":"mutable","name":"b","nameLocation":"5723:1:12","nodeType":"VariableDeclaration","scope":3006,"src":"5715:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2985,"name":"uint256","nodeType":"ElementaryTypeName","src":"5715:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2988,"mutability":"mutable","name":"errorMessage","nameLocation":"5748:12:12","nodeType":"VariableDeclaration","scope":3006,"src":"5734:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2987,"name":"string","nodeType":"ElementaryTypeName","src":"5734:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5686:80:12"},"returnParameters":{"id":2992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2991,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3006,"src":"5790:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2990,"name":"uint256","nodeType":"ElementaryTypeName","src":"5790:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5789:9:12"},"scope":3032,"src":"5674:230:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3030,"nodeType":"Block","src":"6675:105:12","statements":[{"id":3029,"nodeType":"UncheckedBlock","src":"6685:89:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3019,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3011,"src":"6717:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3020,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6721:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6717:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3022,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3013,"src":"6724:12:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3018,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"6709:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3023,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6709:28:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3024,"nodeType":"ExpressionStatement","src":"6709:28:12"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3025,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3009,"src":"6758:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":3026,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3011,"src":"6762:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6758:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3017,"id":3028,"nodeType":"Return","src":"6751:12:12"}]}]},"documentation":{"id":3007,"nodeType":"StructuredDocumentation","src":"5910:635:12","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":3031,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nameLocation":"6559:3:12","nodeType":"FunctionDefinition","parameters":{"id":3014,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3009,"mutability":"mutable","name":"a","nameLocation":"6580:1:12","nodeType":"VariableDeclaration","scope":3031,"src":"6572:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3008,"name":"uint256","nodeType":"ElementaryTypeName","src":"6572:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3011,"mutability":"mutable","name":"b","nameLocation":"6599:1:12","nodeType":"VariableDeclaration","scope":3031,"src":"6591:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3010,"name":"uint256","nodeType":"ElementaryTypeName","src":"6591:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3013,"mutability":"mutable","name":"errorMessage","nameLocation":"6624:12:12","nodeType":"VariableDeclaration","scope":3031,"src":"6610:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3012,"name":"string","nodeType":"ElementaryTypeName","src":"6610:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6562:80:12"},"returnParameters":{"id":3017,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3016,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3031,"src":"6666:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3015,"name":"uint256","nodeType":"ElementaryTypeName","src":"6666:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6665:9:12"},"scope":3032,"src":"6550:230:12","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3033,"src":"482:6300:12","usedErrors":[]}],"src":"107:6676:12"},"id":12},"contracts/FundingContract.sol":{"ast":{"absolutePath":"contracts/FundingContract.sol","exportedSymbols":{"Address":[1548],"Context":[1570],"Counters":[1644],"ERC165":[1843],"ERC721":[1057],"FundingContract":[3335],"FundingContract__NotEnoughETH":[3042],"FundingContract__NotGroupFunding":[3044],"FundingContract__TransferFailed":[3040],"IERC165":[1855],"IERC721":[1173],"IERC721Metadata":[1218],"IERC721Receiver":[1191],"Math":[2720],"Ownable":[112],"SafeMath":[3032],"Strings":[1819]},"id":3336,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3034,"literals":["solidity","^","0.8",".7"],"nodeType":"PragmaDirective","src":"31:23:13"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"@openzeppelin/contracts/token/ERC721/ERC721.sol","id":3035,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3336,"sourceUnit":1058,"src":"56:57:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":3036,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3336,"sourceUnit":113,"src":"114:52:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Counters.sol","file":"@openzeppelin/contracts/utils/Counters.sol","id":3037,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3336,"sourceUnit":1645,"src":"167:52:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SafeMath.sol","file":"@openzeppelin/contracts/utils/math/SafeMath.sol","id":3038,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3336,"sourceUnit":3033,"src":"220:57:13","symbolAliases":[],"unitAlias":""},{"errorSelector":"9af25e5d","id":3040,"name":"FundingContract__TransferFailed","nameLocation":"286:31:13","nodeType":"ErrorDefinition","parameters":{"id":3039,"nodeType":"ParameterList","parameters":[],"src":"317:2:13"},"src":"280:40:13"},{"errorSelector":"cf463cf9","id":3042,"name":"FundingContract__NotEnoughETH","nameLocation":"327:29:13","nodeType":"ErrorDefinition","parameters":{"id":3041,"nodeType":"ParameterList","parameters":[],"src":"356:2:13"},"src":"321:38:13"},{"errorSelector":"ad1faa72","id":3044,"name":"FundingContract__NotGroupFunding","nameLocation":"366:32:13","nodeType":"ErrorDefinition","parameters":{"id":3043,"nodeType":"ParameterList","parameters":[],"src":"398:2:13"},"src":"360:41:13"},{"abstract":false,"baseContracts":[{"baseName":{"id":3045,"name":"ERC721","nameLocations":["431:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":1057,"src":"431:6:13"},"id":3046,"nodeType":"InheritanceSpecifier","src":"431:6:13"},{"baseName":{"id":3047,"name":"Ownable","nameLocations":["439:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":112,"src":"439:7:13"},"id":3048,"nodeType":"InheritanceSpecifier","src":"439:7:13"}],"canonicalName":"FundingContract","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3335,"linearizedBaseContracts":[3335,112,1057,1218,1173,1843,1855,1570],"name":"FundingContract","nameLocation":"412:15:13","nodeType":"ContractDefinition","nodes":[{"global":false,"id":3051,"libraryName":{"id":3049,"name":"SafeMath","nameLocations":["460:8:13"],"nodeType":"IdentifierPath","referencedDeclaration":3032,"src":"460:8:13"},"nodeType":"UsingForDirective","src":"454:27:13","typeName":{"id":3050,"name":"uint256","nodeType":"ElementaryTypeName","src":"473:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"global":false,"id":3055,"libraryName":{"id":3052,"name":"Counters","nameLocations":["492:8:13"],"nodeType":"IdentifierPath","referencedDeclaration":1644,"src":"492:8:13"},"nodeType":"UsingForDirective","src":"486:36:13","typeName":{"id":3054,"nodeType":"UserDefinedTypeName","pathNode":{"id":3053,"name":"Counters.Counter","nameLocations":["505:8:13","514:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":1576,"src":"505:16:13"},"referencedDeclaration":1576,"src":"505:16:13","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1576_storage_ptr","typeString":"struct Counters.Counter"}}},{"constant":false,"id":3058,"mutability":"mutable","name":"_tokenIds","nameLocation":"552:9:13","nodeType":"VariableDeclaration","scope":3335,"src":"527:34:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1576_storage","typeString":"struct Counters.Counter"},"typeName":{"id":3057,"nodeType":"UserDefinedTypeName","pathNode":{"id":3056,"name":"Counters.Counter","nameLocations":["527:8:13","536:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":1576,"src":"527:16:13"},"referencedDeclaration":1576,"src":"527:16:13","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1576_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"private"},{"constant":false,"id":3061,"mutability":"mutable","name":"_withdrawers","nameLocation":"592:12:13","nodeType":"VariableDeclaration","scope":3335,"src":"567:37:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1576_storage","typeString":"struct Counters.Counter"},"typeName":{"id":3060,"nodeType":"UserDefinedTypeName","pathNode":{"id":3059,"name":"Counters.Counter","nameLocations":["567:8:13","576:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":1576,"src":"567:16:13"},"referencedDeclaration":1576,"src":"567:16:13","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1576_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"private"},{"constant":false,"id":3063,"mutability":"mutable","name":"s_totalAmount","nameLocation":"627:13:13","nodeType":"VariableDeclaration","scope":3335,"src":"611:29:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3062,"name":"uint256","nodeType":"ElementaryTypeName","src":"611:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":3065,"mutability":"mutable","name":"s_withdrawalFee","nameLocation":"662:15:13","nodeType":"VariableDeclaration","scope":3335,"src":"646:31:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3064,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":3067,"mutability":"mutable","name":"s_vestingPeriod","nameLocation":"699:15:13","nodeType":"VariableDeclaration","scope":3335,"src":"683:31:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3066,"name":"uint256","nodeType":"ElementaryTypeName","src":"683:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":3069,"mutability":"mutable","name":"_isGroupWithdrawal","nameLocation":"733:18:13","nodeType":"VariableDeclaration","scope":3335,"src":"720:31:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3068,"name":"bool","nodeType":"ElementaryTypeName","src":"720:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"constant":false,"id":3073,"mutability":"mutable","name":"s_addressToAmountFunded","nameLocation":"794:23:13","nodeType":"VariableDeclaration","scope":3335,"src":"758:59:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":3072,"keyType":{"id":3070,"name":"address","nodeType":"ElementaryTypeName","src":"766:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"758:27:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":3071,"name":"uint256","nodeType":"ElementaryTypeName","src":"777:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":3076,"mutability":"mutable","name":"s_funders","nameLocation":"833:9:13","nodeType":"VariableDeclaration","scope":3335,"src":"823:19:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[]"},"typeName":{"baseType":{"id":3074,"name":"address","nodeType":"ElementaryTypeName","src":"823:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3075,"nodeType":"ArrayTypeName","src":"823:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":3082,"mutability":"mutable","name":"s_requestForWithdrawal","nameLocation":"902:22:13","nodeType":"VariableDeclaration","scope":3335,"src":"849:75:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(uint256 => mapping(address => bool))"},"typeName":{"id":3081,"keyType":{"id":3077,"name":"uint256","nodeType":"ElementaryTypeName","src":"857:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"849:44:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(uint256 => mapping(address => bool))"},"valueType":{"id":3080,"keyType":{"id":3078,"name":"address","nodeType":"ElementaryTypeName","src":"876:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"868:24:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":3079,"name":"bool","nodeType":"ElementaryTypeName","src":"887:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"body":{"id":3092,"nodeType":"Block","src":"966:115:13","statements":[{"condition":{"id":3085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"979:19:13","subExpression":{"id":3084,"name":"_isGroupWithdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3069,"src":"980:18:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3090,"nodeType":"IfStatement","src":"976:89:13","trueBody":{"id":3089,"nodeType":"Block","src":"999:66:13","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3086,"name":"FundingContract__NotGroupFunding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3044,"src":"1020:32:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3087,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1020:34:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3088,"nodeType":"RevertStatement","src":"1013:41:13"}]}},{"id":3091,"nodeType":"PlaceholderStatement","src":"1073:1:13"}]},"id":3093,"name":"onlyGroupFunding","nameLocation":"947:16:13","nodeType":"ModifierDefinition","parameters":{"id":3083,"nodeType":"ParameterList","parameters":[],"src":"963:2:13"},"src":"938:143:13","virtual":false,"visibility":"internal"},{"body":{"id":3100,"nodeType":"Block","src":"1278:188:13","statements":[]},"id":3101,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"hexValue":"46756e64696e67436f6e7472616374546f6b656e","id":3096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1248:22:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_225589ef6c530108359a44e08d1ca5777aa1865cf3339915d2fed202f9e9ac81","typeString":"literal_string \"FundingContractToken\""},"value":"FundingContractToken"},{"hexValue":"464354","id":3097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1272:5:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_5f49baa48982f6e13ba91cc7c0d6d6faee7fa56311d47355ec780df45f8b2838","typeString":"literal_string \"FCT\""},"value":"FCT"}],"id":3098,"kind":"baseConstructorSpecifier","modifierName":{"id":3095,"name":"ERC721","nameLocations":["1241:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":1057,"src":"1241:6:13"},"nodeType":"ModifierInvocation","src":"1241:37:13"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3094,"nodeType":"ParameterList","parameters":[],"src":"1098:142:13"},"returnParameters":{"id":3099,"nodeType":"ParameterList","parameters":[],"src":"1278:0:13"},"scope":3335,"src":"1087:379:13","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3150,"nodeType":"Block","src":"1512:419:13","statements":[{"assignments":[3105],"declarations":[{"constant":false,"id":3105,"mutability":"mutable","name":"minFundingAmount","nameLocation":"1539:16:13","nodeType":"VariableDeclaration","scope":3150,"src":"1531:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3104,"name":"uint256","nodeType":"ElementaryTypeName","src":"1531:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3108,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":3106,"name":"getMinimumFundingAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3278,"src":"1558:23:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":3107,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1558:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1531:52:13"},{"assignments":[3110],"declarations":[{"constant":false,"id":3110,"mutability":"mutable","name":"currentTokenId","nameLocation":"1601:14:13","nodeType":"VariableDeclaration","scope":3150,"src":"1593:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3109,"name":"uint256","nodeType":"ElementaryTypeName","src":"1593:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3114,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3111,"name":"_tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3058,"src":"1618:9:13","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1576_storage","typeString":"struct Counters.Counter storage ref"}},"id":3112,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1628:7:13","memberName":"current","nodeType":"MemberAccess","referencedDeclaration":1588,"src":"1618:17:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$1576_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$1576_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer) view returns (uint256)"}},"id":3113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1618:19:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1593:44:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3115,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1651:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1655:5:13","memberName":"value","nodeType":"MemberAccess","src":"1651:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":3117,"name":"minFundingAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3105,"src":"1664:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1651:29:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3123,"nodeType":"IfStatement","src":"1648:96:13","trueBody":{"id":3122,"nodeType":"Block","src":"1681:63:13","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3119,"name":"FundingContract__NotEnoughETH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3042,"src":"1702:29:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3120,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1702:31:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3121,"nodeType":"RevertStatement","src":"1695:38:13"}]}},{"expression":{"id":3130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3124,"name":"s_addressToAmountFunded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3073,"src":"1753:23:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3127,"indexExpression":{"expression":{"id":3125,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1777:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1781:6:13","memberName":"sender","nodeType":"MemberAccess","src":"1777:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1753:35:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":3128,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1791:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1795:5:13","memberName":"value","nodeType":"MemberAccess","src":"1791:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1753:47:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3131,"nodeType":"ExpressionStatement","src":"1753:47:13"},{"expression":{"arguments":[{"expression":{"id":3135,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1825:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1829:6:13","memberName":"sender","nodeType":"MemberAccess","src":"1825:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3132,"name":"s_funders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3076,"src":"1810:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":3134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1820:4:13","memberName":"push","nodeType":"MemberAccess","src":"1810:14:13","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$bound_to$_t_array$_t_address_$dyn_storage_ptr_$","typeString":"function (address[] storage pointer,address)"}},"id":3137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1810:26:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3138,"nodeType":"ExpressionStatement","src":"1810:26:13"},{"expression":{"arguments":[{"expression":{"id":3140,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1856:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1860:6:13","memberName":"sender","nodeType":"MemberAccess","src":"1856:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3142,"name":"currentTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3110,"src":"1868:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3139,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[607,636],"referencedDeclaration":607,"src":"1846:9:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1846:37:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3144,"nodeType":"ExpressionStatement","src":"1846:37:13"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3145,"name":"_tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3058,"src":"1893:9:13","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1576_storage","typeString":"struct Counters.Counter storage ref"}},"id":3147,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1903:9:13","memberName":"increment","nodeType":"MemberAccess","referencedDeclaration":1602,"src":"1893:19:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Counter_$1576_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$1576_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer)"}},"id":3148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1893:21:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3149,"nodeType":"ExpressionStatement","src":"1893:21:13"}]},"functionSelector":"e2c41dbc","id":3151,"implemented":true,"kind":"function","modifiers":[],"name":"depositFunds","nameLocation":"1483:12:13","nodeType":"FunctionDefinition","parameters":{"id":3102,"nodeType":"ParameterList","parameters":[],"src":"1495:2:13"},"returnParameters":{"id":3103,"nodeType":"ParameterList","parameters":[],"src":"1512:0:13"},"scope":3335,"src":"1474:457:13","stateMutability":"payable","virtual":false,"visibility":"public"},{"baseFunctions":[317],"body":{"id":3159,"nodeType":"Block","src":"2024:61:13","statements":[]},"functionSelector":"c87b56dd","id":3160,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"1946:8:13","nodeType":"FunctionDefinition","overrides":{"id":3155,"nodeType":"OverrideSpecifier","overrides":[],"src":"1992:8:13"},"parameters":{"id":3154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3153,"mutability":"mutable","name":"tokenId","nameLocation":"1963:7:13","nodeType":"VariableDeclaration","scope":3160,"src":"1955:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3152,"name":"uint256","nodeType":"ElementaryTypeName","src":"1955:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1954:17:13"},"returnParameters":{"id":3158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3157,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3160,"src":"2010:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3156,"name":"string","nodeType":"ElementaryTypeName","src":"2010:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2009:15:13"},"scope":3335,"src":"1937:148:13","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":3163,"nodeType":"Block","src":"2115:59:13","statements":[]},"functionSelector":"4e71d92d","id":3164,"implemented":true,"kind":"function","modifiers":[],"name":"claim","nameLocation":"2100:5:13","nodeType":"FunctionDefinition","parameters":{"id":3161,"nodeType":"ParameterList","parameters":[],"src":"2105:2:13"},"returnParameters":{"id":3162,"nodeType":"ParameterList","parameters":[],"src":"2115:0:13"},"scope":3335,"src":"2091:83:13","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3185,"nodeType":"Block","src":"2251:101:13","statements":[{"expression":{"id":3178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":3171,"name":"s_requestForWithdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3082,"src":"2261:22:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(uint256 => mapping(address => bool))"}},"id":3175,"indexExpression":{"id":3172,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3166,"src":"2284:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2261:31:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3176,"indexExpression":{"expression":{"id":3173,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"2293:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2297:6:13","memberName":"sender","nodeType":"MemberAccess","src":"2293:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2261:43:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2307:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2261:50:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3179,"nodeType":"ExpressionStatement","src":"2261:50:13"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3180,"name":"_withdrawers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3061,"src":"2321:12:13","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1576_storage","typeString":"struct Counters.Counter storage ref"}},"id":3182,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2334:9:13","memberName":"increment","nodeType":"MemberAccess","referencedDeclaration":1602,"src":"2321:22:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Counter_$1576_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$1576_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer)"}},"id":3183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2321:24:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3184,"nodeType":"ExpressionStatement","src":"2321:24:13"}]},"functionSelector":"1095941e","id":3186,"implemented":true,"kind":"function","modifiers":[{"id":3169,"kind":"modifierInvocation","modifierName":{"id":3168,"name":"onlyGroupFunding","nameLocations":["2234:16:13"],"nodeType":"IdentifierPath","referencedDeclaration":3093,"src":"2234:16:13"},"nodeType":"ModifierInvocation","src":"2234:16:13"}],"name":"requestForWithdrawal","nameLocation":"2189:20:13","nodeType":"FunctionDefinition","parameters":{"id":3167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3166,"mutability":"mutable","name":"tokenId","nameLocation":"2218:7:13","nodeType":"VariableDeclaration","scope":3186,"src":"2210:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3165,"name":"uint256","nodeType":"ElementaryTypeName","src":"2210:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2209:17:13"},"returnParameters":{"id":3170,"nodeType":"ParameterList","parameters":[],"src":"2251:0:13"},"scope":3335,"src":"2180:172:13","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3189,"nodeType":"Block","src":"2431:2:13","statements":[]},"id":3190,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3187,"nodeType":"ParameterList","parameters":[],"src":"2411:2:13"},"returnParameters":{"id":3188,"nodeType":"ParameterList","parameters":[],"src":"2431:0:13"},"scope":3335,"src":"2404:29:13","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":3223,"nodeType":"Block","src":"2503:247:13","statements":[{"assignments":[3198],"declarations":[{"constant":false,"id":3198,"mutability":"mutable","name":"numberOfWithdrawers","nameLocation":"2521:19:13","nodeType":"VariableDeclaration","scope":3223,"src":"2513:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3197,"name":"uint256","nodeType":"ElementaryTypeName","src":"2513:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3202,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3199,"name":"_withdrawers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3061,"src":"2543:12:13","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1576_storage","typeString":"struct Counters.Counter storage ref"}},"id":3200,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2556:7:13","memberName":"current","nodeType":"MemberAccess","referencedDeclaration":1588,"src":"2543:20:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$1576_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$1576_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer) view returns (uint256)"}},"id":3201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2543:22:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2513:52:13"},{"assignments":[3204],"declarations":[{"constant":false,"id":3204,"mutability":"mutable","name":"withdrawalLimit","nameLocation":"2583:15:13","nodeType":"VariableDeclaration","scope":3223,"src":"2575:23:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3203,"name":"uint256","nodeType":"ElementaryTypeName","src":"2575:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3213,"initialValue":{"arguments":[{"hexValue":"313030","id":3211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2630:3:13","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}],"expression":{"arguments":[{"hexValue":"3630","id":3208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2622:2:13","typeDescriptions":{"typeIdentifier":"t_rational_60_by_1","typeString":"int_const 60"},"value":"60"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_60_by_1","typeString":"int_const 60"}],"expression":{"expression":{"id":3205,"name":"s_funders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3076,"src":"2601:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":3206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2611:6:13","memberName":"length","nodeType":"MemberAccess","src":"2601:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2618:3:13","memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":2926,"src":"2601:20:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3209,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2601:24:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2626:3:13","memberName":"div","nodeType":"MemberAccess","referencedDeclaration":2941,"src":"2601:28:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2601:33:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2575:59:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3214,"name":"numberOfWithdrawers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3198,"src":"2647:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3215,"name":"withdrawalLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3204,"src":"2670:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2647:38:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3220,"nodeType":"IfStatement","src":"2644:78:13","trueBody":{"id":3219,"nodeType":"Block","src":"2686:36:13","statements":[{"expression":{"hexValue":"74727565","id":3217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2707:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3196,"id":3218,"nodeType":"Return","src":"2700:11:13"}]}},{"expression":{"hexValue":"66616c7365","id":3221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2738:5:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":3196,"id":3222,"nodeType":"Return","src":"2731:12:13"}]},"functionSelector":"7dc4c2ba","id":3224,"implemented":true,"kind":"function","modifiers":[{"id":3193,"kind":"modifierInvocation","modifierName":{"id":3192,"name":"onlyGroupFunding","nameLocations":["2473:16:13"],"nodeType":"IdentifierPath","referencedDeclaration":3093,"src":"2473:16:13"},"nodeType":"ModifierInvocation","src":"2473:16:13"}],"name":"withdrawalCheck","nameLocation":"2448:15:13","nodeType":"FunctionDefinition","parameters":{"id":3191,"nodeType":"ParameterList","parameters":[],"src":"2463:2:13"},"returnParameters":{"id":3196,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3195,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3224,"src":"2498:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3194,"name":"bool","nodeType":"ElementaryTypeName","src":"2498:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2497:6:13"},"scope":3335,"src":"2439:311:13","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3266,"nodeType":"Block","src":"2799:339:13","statements":[{"condition":{"id":3229,"name":"_isGroupWithdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3069,"src":"2812:18:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3237,"nodeType":"IfStatement","src":"2809:118:13","trueBody":{"id":3236,"nodeType":"Block","src":"2831:96:13","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3231,"name":"withdrawalCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3224,"src":"2853:15:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$_t_bool_$","typeString":"function () returns (bool)"}},"id":3232,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2853:17:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5468657265206973206e6f206d616a6f7269747920617070726f76616c20746f207769746864726177","id":3233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2872:43:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_1996ccb6adb7d105883c503be6c0fca8b239a35cc290cf1105e26098b6525e2f","typeString":"literal_string \"There is no majority approval to withdraw\""},"value":"There is no majority approval to withdraw"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1996ccb6adb7d105883c503be6c0fca8b239a35cc290cf1105e26098b6525e2f","typeString":"literal_string \"There is no majority approval to withdraw\""}],"id":3230,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"2845:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3234,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2845:71:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3235,"nodeType":"ExpressionStatement","src":"2845:71:13"}]}},{"assignments":[3239],"declarations":[{"constant":false,"id":3239,"mutability":"mutable","name":"amount","nameLocation":"2944:6:13","nodeType":"VariableDeclaration","scope":3266,"src":"2936:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3238,"name":"uint256","nodeType":"ElementaryTypeName","src":"2936:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3245,"initialValue":{"expression":{"arguments":[{"id":3242,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"2961:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_FundingContract_$3335","typeString":"contract FundingContract"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_FundingContract_$3335","typeString":"contract FundingContract"}],"id":3241,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2953:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3240,"name":"address","nodeType":"ElementaryTypeName","src":"2953:7:13","typeDescriptions":{}}},"id":3243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2953:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2967:7:13","memberName":"balance","nodeType":"MemberAccess","src":"2953:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2936:38:13"},{"assignments":[3247,null],"declarations":[{"constant":false,"id":3247,"mutability":"mutable","name":"success","nameLocation":"2990:7:13","nodeType":"VariableDeclaration","scope":3266,"src":"2985:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3246,"name":"bool","nodeType":"ElementaryTypeName","src":"2985:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":3258,"initialValue":{"arguments":[{"hexValue":"","id":3256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3042:2:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"arguments":[{"expression":{"id":3250,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"3011:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3015:6:13","memberName":"sender","nodeType":"MemberAccess","src":"3011:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3249,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3003:8:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":3248,"name":"address","nodeType":"ElementaryTypeName","src":"3003:8:13","stateMutability":"payable","typeDescriptions":{}}},"id":3252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3003:19:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":3253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3023:4:13","memberName":"call","nodeType":"MemberAccess","src":"3003:24:13","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3254,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3239,"src":"3034:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"3003:38:13","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3003:42:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2984:61:13"},{"condition":{"id":3260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3058:8:13","subExpression":{"id":3259,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3247,"src":"3059:7:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3265,"nodeType":"IfStatement","src":"3055:77:13","trueBody":{"id":3264,"nodeType":"Block","src":"3067:65:13","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3261,"name":"FundingContract__TransferFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3040,"src":"3088:31:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3088:33:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3263,"nodeType":"RevertStatement","src":"3081:40:13"}]}}]},"functionSelector":"24600fc3","id":3267,"implemented":true,"kind":"function","modifiers":[{"id":3227,"kind":"modifierInvocation","modifierName":{"id":3226,"name":"onlyOwner","nameLocations":["2790:9:13"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"2790:9:13"},"nodeType":"ModifierInvocation","src":"2790:9:13"}],"name":"withdrawFunds","nameLocation":"2767:13:13","nodeType":"FunctionDefinition","parameters":{"id":3225,"nodeType":"ParameterList","parameters":[],"src":"2780:2:13"},"returnParameters":{"id":3228,"nodeType":"ParameterList","parameters":[],"src":"2799:0:13"},"scope":3335,"src":"2758:380:13","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3277,"nodeType":"Block","src":"3207:58:13","statements":[{"expression":{"arguments":[{"id":3274,"name":"s_vestingPeriod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3067,"src":"3242:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3272,"name":"s_totalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"3224:13:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3238:3:13","memberName":"div","nodeType":"MemberAccess","referencedDeclaration":2941,"src":"3224:17:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3224:34:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3271,"id":3276,"nodeType":"Return","src":"3217:41:13"}]},"functionSelector":"db06941e","id":3278,"implemented":true,"kind":"function","modifiers":[],"name":"getMinimumFundingAmount","nameLocation":"3153:23:13","nodeType":"FunctionDefinition","parameters":{"id":3268,"nodeType":"ParameterList","parameters":[],"src":"3176:2:13"},"returnParameters":{"id":3271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3270,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3278,"src":"3199:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3269,"name":"uint256","nodeType":"ElementaryTypeName","src":"3199:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3198:9:13"},"scope":3335,"src":"3144:121:13","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3285,"nodeType":"Block","src":"3325:37:13","statements":[{"expression":{"id":3283,"name":"s_totalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"3342:13:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3282,"id":3284,"nodeType":"Return","src":"3335:20:13"}]},"functionSelector":"65ac4341","id":3286,"implemented":true,"kind":"function","modifiers":[],"name":"getTotalAmount","nameLocation":"3280:14:13","nodeType":"FunctionDefinition","parameters":{"id":3279,"nodeType":"ParameterList","parameters":[],"src":"3294:2:13"},"returnParameters":{"id":3282,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3281,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3286,"src":"3317:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3280,"name":"uint256","nodeType":"ElementaryTypeName","src":"3317:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3316:9:13"},"scope":3335,"src":"3271:91:13","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3293,"nodeType":"Block","src":"3425:39:13","statements":[{"expression":{"id":3291,"name":"s_withdrawalFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3065,"src":"3442:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3290,"id":3292,"nodeType":"Return","src":"3435:22:13"}]},"functionSelector":"d8e159f8","id":3294,"implemented":true,"kind":"function","modifiers":[],"name":"getWithdrawalFee","nameLocation":"3378:16:13","nodeType":"FunctionDefinition","parameters":{"id":3287,"nodeType":"ParameterList","parameters":[],"src":"3394:2:13"},"returnParameters":{"id":3290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3289,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3294,"src":"3417:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3288,"name":"uint256","nodeType":"ElementaryTypeName","src":"3417:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3416:9:13"},"scope":3335,"src":"3369:95:13","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3301,"nodeType":"Block","src":"3526:39:13","statements":[{"expression":{"id":3299,"name":"s_vestingPeriod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3067,"src":"3543:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3298,"id":3300,"nodeType":"Return","src":"3536:22:13"}]},"functionSelector":"1096cb79","id":3302,"implemented":true,"kind":"function","modifiers":[],"name":"getVestingPeriod","nameLocation":"3479:16:13","nodeType":"FunctionDefinition","parameters":{"id":3295,"nodeType":"ParameterList","parameters":[],"src":"3495:2:13"},"returnParameters":{"id":3298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3297,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3302,"src":"3518:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3296,"name":"uint256","nodeType":"ElementaryTypeName","src":"3518:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3517:9:13"},"scope":3335,"src":"3470:95:13","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3309,"nodeType":"Block","src":"3628:42:13","statements":[{"expression":{"id":3307,"name":"_isGroupWithdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3069,"src":"3645:18:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3306,"id":3308,"nodeType":"Return","src":"3638:25:13"}]},"functionSelector":"9c885eb3","id":3310,"implemented":true,"kind":"function","modifiers":[],"name":"getIsGroupWithdrawal","nameLocation":"3580:20:13","nodeType":"FunctionDefinition","parameters":{"id":3303,"nodeType":"ParameterList","parameters":[],"src":"3600:2:13"},"returnParameters":{"id":3306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3305,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3310,"src":"3623:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3304,"name":"bool","nodeType":"ElementaryTypeName","src":"3623:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3622:6:13"},"scope":3335,"src":"3571:99:13","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3321,"nodeType":"Block","src":"3754:55:13","statements":[{"expression":{"baseExpression":{"id":3317,"name":"s_addressToAmountFunded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3073,"src":"3771:23:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3319,"indexExpression":{"id":3318,"name":"funder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3312,"src":"3795:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3771:31:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3316,"id":3320,"nodeType":"Return","src":"3764:38:13"}]},"functionSelector":"0343fb25","id":3322,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressToAmountFunded","nameLocation":"3685:24:13","nodeType":"FunctionDefinition","parameters":{"id":3313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3312,"mutability":"mutable","name":"funder","nameLocation":"3718:6:13","nodeType":"VariableDeclaration","scope":3322,"src":"3710:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3311,"name":"address","nodeType":"ElementaryTypeName","src":"3710:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3709:16:13"},"returnParameters":{"id":3316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3315,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3322,"src":"3746:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3314,"name":"uint256","nodeType":"ElementaryTypeName","src":"3746:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3745:9:13"},"scope":3335,"src":"3676:133:13","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3333,"nodeType":"Block","src":"3877:40:13","statements":[{"expression":{"baseExpression":{"id":3329,"name":"s_funders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3076,"src":"3894:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":3331,"indexExpression":{"id":3330,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3324,"src":"3904:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3894:16:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3328,"id":3332,"nodeType":"Return","src":"3887:23:13"}]},"functionSelector":"d7b4750c","id":3334,"implemented":true,"kind":"function","modifiers":[],"name":"getFunder","nameLocation":"3824:9:13","nodeType":"FunctionDefinition","parameters":{"id":3325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3324,"mutability":"mutable","name":"index","nameLocation":"3842:5:13","nodeType":"VariableDeclaration","scope":3334,"src":"3834:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3323,"name":"uint256","nodeType":"ElementaryTypeName","src":"3834:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3833:15:13"},"returnParameters":{"id":3328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3327,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3334,"src":"3869:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3326,"name":"address","nodeType":"ElementaryTypeName","src":"3869:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3868:9:13"},"scope":3335,"src":"3815:102:13","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":3336,"src":"403:3519:13","usedErrors":[3040,3042,3044]}],"src":"31:3891:13"},"id":13}},"contracts":{"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ERC721":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.","kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"constructor":{"details":"Initializes the contract by setting a `name` and a `symbol` to the token collection."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_175":{"entryPoint":null,"id":175,"parameterSlots":2,"returnSlots":0},"abi_decode_available_length_t_string_memory_ptr_fromMemory":{"entryPoint":376,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_string_memory_ptr_fromMemory":{"entryPoint":451,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory":{"entryPoint":502,"id":null,"parameterSlots":2,"returnSlots":2},"allocate_memory":{"entryPoint":247,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":99,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":278,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_string_storage":{"entryPoint":746,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":635,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":1067,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_uint256":{"entryPoint":882,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":1028,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_uint256_to_t_uint256":{"entryPoint":902,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":1222,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":332,"id":null,"parameterSlots":3,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":767,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":693,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":1192,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":193,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":892,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":1160,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x22":{"entryPoint":646,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":146,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":942,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":119,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":124,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":114,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":109,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":129,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":783,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":1147,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":1000,"id":null,"parameterSlots":2,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":796,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":952,"id":null,"parameterSlots":3,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":995,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:8574:14","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:14","statements":[{"nodeType":"YulAssignment","src":"57:19:14","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:14","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:14"},"nodeType":"YulFunctionCall","src":"67:9:14"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:14"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:14","type":""}],"src":"7:75:14"},{"body":{"nodeType":"YulBlock","src":"177:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:14"},"nodeType":"YulFunctionCall","src":"187:12:14"},"nodeType":"YulExpressionStatement","src":"187:12:14"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:14"},{"body":{"nodeType":"YulBlock","src":"300:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:14"},"nodeType":"YulFunctionCall","src":"310:12:14"},"nodeType":"YulExpressionStatement","src":"310:12:14"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:14"},{"body":{"nodeType":"YulBlock","src":"423:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"440:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"443:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"433:6:14"},"nodeType":"YulFunctionCall","src":"433:12:14"},"nodeType":"YulExpressionStatement","src":"433:12:14"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"334:117:14"},{"body":{"nodeType":"YulBlock","src":"546:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"563:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"566:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"556:6:14"},"nodeType":"YulFunctionCall","src":"556:12:14"},"nodeType":"YulExpressionStatement","src":"556:12:14"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"457:117:14"},{"body":{"nodeType":"YulBlock","src":"628:54:14","statements":[{"nodeType":"YulAssignment","src":"638:38:14","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"656:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"663:2:14","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"652:3:14"},"nodeType":"YulFunctionCall","src":"652:14:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"672:2:14","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"668:3:14"},"nodeType":"YulFunctionCall","src":"668:7:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"648:3:14"},"nodeType":"YulFunctionCall","src":"648:28:14"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"638:6:14"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"611:5:14","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"621:6:14","type":""}],"src":"580:102:14"},{"body":{"nodeType":"YulBlock","src":"716:152:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"733:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"736:77:14","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"726:6:14"},"nodeType":"YulFunctionCall","src":"726:88:14"},"nodeType":"YulExpressionStatement","src":"726:88:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"830:1:14","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"833:4:14","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"823:6:14"},"nodeType":"YulFunctionCall","src":"823:15:14"},"nodeType":"YulExpressionStatement","src":"823:15:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"854:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"857:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"847:6:14"},"nodeType":"YulFunctionCall","src":"847:15:14"},"nodeType":"YulExpressionStatement","src":"847:15:14"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"688:180:14"},{"body":{"nodeType":"YulBlock","src":"917:238:14","statements":[{"nodeType":"YulVariableDeclaration","src":"927:58:14","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"949:6:14"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"979:4:14"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"957:21:14"},"nodeType":"YulFunctionCall","src":"957:27:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"945:3:14"},"nodeType":"YulFunctionCall","src":"945:40:14"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"931:10:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"1096:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1098:16:14"},"nodeType":"YulFunctionCall","src":"1098:18:14"},"nodeType":"YulExpressionStatement","src":"1098:18:14"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1039:10:14"},{"kind":"number","nodeType":"YulLiteral","src":"1051:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1036:2:14"},"nodeType":"YulFunctionCall","src":"1036:34:14"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1075:10:14"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1087:6:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1072:2:14"},"nodeType":"YulFunctionCall","src":"1072:22:14"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1033:2:14"},"nodeType":"YulFunctionCall","src":"1033:62:14"},"nodeType":"YulIf","src":"1030:88:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1134:2:14","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1138:10:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1127:6:14"},"nodeType":"YulFunctionCall","src":"1127:22:14"},"nodeType":"YulExpressionStatement","src":"1127:22:14"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"903:6:14","type":""},{"name":"size","nodeType":"YulTypedName","src":"911:4:14","type":""}],"src":"874:281:14"},{"body":{"nodeType":"YulBlock","src":"1202:88:14","statements":[{"nodeType":"YulAssignment","src":"1212:30:14","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"1222:18:14"},"nodeType":"YulFunctionCall","src":"1222:20:14"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1212:6:14"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1271:6:14"},{"name":"size","nodeType":"YulIdentifier","src":"1279:4:14"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"1251:19:14"},"nodeType":"YulFunctionCall","src":"1251:33:14"},"nodeType":"YulExpressionStatement","src":"1251:33:14"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1186:4:14","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1195:6:14","type":""}],"src":"1161:129:14"},{"body":{"nodeType":"YulBlock","src":"1363:241:14","statements":[{"body":{"nodeType":"YulBlock","src":"1468:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1470:16:14"},"nodeType":"YulFunctionCall","src":"1470:18:14"},"nodeType":"YulExpressionStatement","src":"1470:18:14"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1440:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"1448:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1437:2:14"},"nodeType":"YulFunctionCall","src":"1437:30:14"},"nodeType":"YulIf","src":"1434:56:14"},{"nodeType":"YulAssignment","src":"1500:37:14","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1530:6:14"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"1508:21:14"},"nodeType":"YulFunctionCall","src":"1508:29:14"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1500:4:14"}]},{"nodeType":"YulAssignment","src":"1574:23:14","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1586:4:14"},{"kind":"number","nodeType":"YulLiteral","src":"1592:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1582:3:14"},"nodeType":"YulFunctionCall","src":"1582:15:14"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1574:4:14"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"1347:6:14","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"1358:4:14","type":""}],"src":"1296:308:14"},{"body":{"nodeType":"YulBlock","src":"1672:184:14","statements":[{"nodeType":"YulVariableDeclaration","src":"1682:10:14","value":{"kind":"number","nodeType":"YulLiteral","src":"1691:1:14","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1686:1:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"1751:63:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1776:3:14"},{"name":"i","nodeType":"YulIdentifier","src":"1781:1:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1772:3:14"},"nodeType":"YulFunctionCall","src":"1772:11:14"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1795:3:14"},{"name":"i","nodeType":"YulIdentifier","src":"1800:1:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1791:3:14"},"nodeType":"YulFunctionCall","src":"1791:11:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1785:5:14"},"nodeType":"YulFunctionCall","src":"1785:18:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1765:6:14"},"nodeType":"YulFunctionCall","src":"1765:39:14"},"nodeType":"YulExpressionStatement","src":"1765:39:14"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1712:1:14"},{"name":"length","nodeType":"YulIdentifier","src":"1715:6:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1709:2:14"},"nodeType":"YulFunctionCall","src":"1709:13:14"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1723:19:14","statements":[{"nodeType":"YulAssignment","src":"1725:15:14","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1734:1:14"},{"kind":"number","nodeType":"YulLiteral","src":"1737:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1730:3:14"},"nodeType":"YulFunctionCall","src":"1730:10:14"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1725:1:14"}]}]},"pre":{"nodeType":"YulBlock","src":"1705:3:14","statements":[]},"src":"1701:113:14"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1834:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"1839:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1830:3:14"},"nodeType":"YulFunctionCall","src":"1830:16:14"},{"kind":"number","nodeType":"YulLiteral","src":"1848:1:14","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1823:6:14"},"nodeType":"YulFunctionCall","src":"1823:27:14"},"nodeType":"YulExpressionStatement","src":"1823:27:14"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1654:3:14","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1659:3:14","type":""},{"name":"length","nodeType":"YulTypedName","src":"1664:6:14","type":""}],"src":"1610:246:14"},{"body":{"nodeType":"YulBlock","src":"1957:339:14","statements":[{"nodeType":"YulAssignment","src":"1967:75:14","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2034:6:14"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"1992:41:14"},"nodeType":"YulFunctionCall","src":"1992:49:14"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"1976:15:14"},"nodeType":"YulFunctionCall","src":"1976:66:14"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1967:5:14"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2058:5:14"},{"name":"length","nodeType":"YulIdentifier","src":"2065:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2051:6:14"},"nodeType":"YulFunctionCall","src":"2051:21:14"},"nodeType":"YulExpressionStatement","src":"2051:21:14"},{"nodeType":"YulVariableDeclaration","src":"2081:27:14","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2096:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"2103:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2092:3:14"},"nodeType":"YulFunctionCall","src":"2092:16:14"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"2085:3:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"2146:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"2148:77:14"},"nodeType":"YulFunctionCall","src":"2148:79:14"},"nodeType":"YulExpressionStatement","src":"2148:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2127:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"2132:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2123:3:14"},"nodeType":"YulFunctionCall","src":"2123:16:14"},{"name":"end","nodeType":"YulIdentifier","src":"2141:3:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2120:2:14"},"nodeType":"YulFunctionCall","src":"2120:25:14"},"nodeType":"YulIf","src":"2117:112:14"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2273:3:14"},{"name":"dst","nodeType":"YulIdentifier","src":"2278:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"2283:6:14"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"2238:34:14"},"nodeType":"YulFunctionCall","src":"2238:52:14"},"nodeType":"YulExpressionStatement","src":"2238:52:14"}]},"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1930:3:14","type":""},{"name":"length","nodeType":"YulTypedName","src":"1935:6:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"1943:3:14","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1951:5:14","type":""}],"src":"1862:434:14"},{"body":{"nodeType":"YulBlock","src":"2389:282:14","statements":[{"body":{"nodeType":"YulBlock","src":"2438:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"2440:77:14"},"nodeType":"YulFunctionCall","src":"2440:79:14"},"nodeType":"YulExpressionStatement","src":"2440:79:14"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2417:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"2425:4:14","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2413:3:14"},"nodeType":"YulFunctionCall","src":"2413:17:14"},{"name":"end","nodeType":"YulIdentifier","src":"2432:3:14"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2409:3:14"},"nodeType":"YulFunctionCall","src":"2409:27:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2402:6:14"},"nodeType":"YulFunctionCall","src":"2402:35:14"},"nodeType":"YulIf","src":"2399:122:14"},{"nodeType":"YulVariableDeclaration","src":"2530:27:14","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2550:6:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2544:5:14"},"nodeType":"YulFunctionCall","src":"2544:13:14"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2534:6:14","type":""}]},{"nodeType":"YulAssignment","src":"2566:99:14","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2638:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"2646:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2634:3:14"},"nodeType":"YulFunctionCall","src":"2634:17:14"},{"name":"length","nodeType":"YulIdentifier","src":"2653:6:14"},{"name":"end","nodeType":"YulIdentifier","src":"2661:3:14"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"2575:58:14"},"nodeType":"YulFunctionCall","src":"2575:90:14"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2566:5:14"}]}]},"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2367:6:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"2375:3:14","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2383:5:14","type":""}],"src":"2316:355:14"},{"body":{"nodeType":"YulBlock","src":"2791:739:14","statements":[{"body":{"nodeType":"YulBlock","src":"2837:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2839:77:14"},"nodeType":"YulFunctionCall","src":"2839:79:14"},"nodeType":"YulExpressionStatement","src":"2839:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2812:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"2821:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2808:3:14"},"nodeType":"YulFunctionCall","src":"2808:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"2833:2:14","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2804:3:14"},"nodeType":"YulFunctionCall","src":"2804:32:14"},"nodeType":"YulIf","src":"2801:119:14"},{"nodeType":"YulBlock","src":"2930:291:14","statements":[{"nodeType":"YulVariableDeclaration","src":"2945:38:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2969:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"2980:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2965:3:14"},"nodeType":"YulFunctionCall","src":"2965:17:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2959:5:14"},"nodeType":"YulFunctionCall","src":"2959:24:14"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2949:6:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"3030:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3032:77:14"},"nodeType":"YulFunctionCall","src":"3032:79:14"},"nodeType":"YulExpressionStatement","src":"3032:79:14"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3002:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"3010:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2999:2:14"},"nodeType":"YulFunctionCall","src":"2999:30:14"},"nodeType":"YulIf","src":"2996:117:14"},{"nodeType":"YulAssignment","src":"3127:84:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3183:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"3194:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3179:3:14"},"nodeType":"YulFunctionCall","src":"3179:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3203:7:14"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3137:41:14"},"nodeType":"YulFunctionCall","src":"3137:74:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3127:6:14"}]}]},{"nodeType":"YulBlock","src":"3231:292:14","statements":[{"nodeType":"YulVariableDeclaration","src":"3246:39:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3270:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"3281:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3266:3:14"},"nodeType":"YulFunctionCall","src":"3266:18:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3260:5:14"},"nodeType":"YulFunctionCall","src":"3260:25:14"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3250:6:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"3332:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3334:77:14"},"nodeType":"YulFunctionCall","src":"3334:79:14"},"nodeType":"YulExpressionStatement","src":"3334:79:14"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3304:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"3312:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3301:2:14"},"nodeType":"YulFunctionCall","src":"3301:30:14"},"nodeType":"YulIf","src":"3298:117:14"},{"nodeType":"YulAssignment","src":"3429:84:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3485:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"3496:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3481:3:14"},"nodeType":"YulFunctionCall","src":"3481:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3505:7:14"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3439:41:14"},"nodeType":"YulFunctionCall","src":"3439:74:14"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3429:6:14"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2753:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2764:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2776:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2784:6:14","type":""}],"src":"2677:853:14"},{"body":{"nodeType":"YulBlock","src":"3595:40:14","statements":[{"nodeType":"YulAssignment","src":"3606:22:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3622:5:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3616:5:14"},"nodeType":"YulFunctionCall","src":"3616:12:14"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3606:6:14"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3578:5:14","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"3588:6:14","type":""}],"src":"3536:99:14"},{"body":{"nodeType":"YulBlock","src":"3669:152:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3686:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3689:77:14","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3679:6:14"},"nodeType":"YulFunctionCall","src":"3679:88:14"},"nodeType":"YulExpressionStatement","src":"3679:88:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3783:1:14","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3786:4:14","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3776:6:14"},"nodeType":"YulFunctionCall","src":"3776:15:14"},"nodeType":"YulExpressionStatement","src":"3776:15:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3807:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3810:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3800:6:14"},"nodeType":"YulFunctionCall","src":"3800:15:14"},"nodeType":"YulExpressionStatement","src":"3800:15:14"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"3641:180:14"},{"body":{"nodeType":"YulBlock","src":"3878:269:14","statements":[{"nodeType":"YulAssignment","src":"3888:22:14","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3902:4:14"},{"kind":"number","nodeType":"YulLiteral","src":"3908:1:14","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3898:3:14"},"nodeType":"YulFunctionCall","src":"3898:12:14"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3888:6:14"}]},{"nodeType":"YulVariableDeclaration","src":"3919:38:14","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3949:4:14"},{"kind":"number","nodeType":"YulLiteral","src":"3955:1:14","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3945:3:14"},"nodeType":"YulFunctionCall","src":"3945:12:14"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"3923:18:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"3996:51:14","statements":[{"nodeType":"YulAssignment","src":"4010:27:14","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4024:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"4032:4:14","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4020:3:14"},"nodeType":"YulFunctionCall","src":"4020:17:14"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4010:6:14"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"3976:18:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3969:6:14"},"nodeType":"YulFunctionCall","src":"3969:26:14"},"nodeType":"YulIf","src":"3966:81:14"},{"body":{"nodeType":"YulBlock","src":"4099:42:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"4113:16:14"},"nodeType":"YulFunctionCall","src":"4113:18:14"},"nodeType":"YulExpressionStatement","src":"4113:18:14"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4063:18:14"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4086:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"4094:2:14","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4083:2:14"},"nodeType":"YulFunctionCall","src":"4083:14:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4060:2:14"},"nodeType":"YulFunctionCall","src":"4060:38:14"},"nodeType":"YulIf","src":"4057:84:14"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"3862:4:14","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"3871:6:14","type":""}],"src":"3827:320:14"},{"body":{"nodeType":"YulBlock","src":"4207:87:14","statements":[{"nodeType":"YulAssignment","src":"4217:11:14","value":{"name":"ptr","nodeType":"YulIdentifier","src":"4225:3:14"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"4217:4:14"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4245:1:14","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"4248:3:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4238:6:14"},"nodeType":"YulFunctionCall","src":"4238:14:14"},"nodeType":"YulExpressionStatement","src":"4238:14:14"},{"nodeType":"YulAssignment","src":"4261:26:14","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4279:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4282:4:14","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"4269:9:14"},"nodeType":"YulFunctionCall","src":"4269:18:14"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"4261:4:14"}]}]},"name":"array_dataslot_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"4194:3:14","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"4202:4:14","type":""}],"src":"4153:141:14"},{"body":{"nodeType":"YulBlock","src":"4344:49:14","statements":[{"nodeType":"YulAssignment","src":"4354:33:14","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4372:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"4379:2:14","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4368:3:14"},"nodeType":"YulFunctionCall","src":"4368:14:14"},{"kind":"number","nodeType":"YulLiteral","src":"4384:2:14","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4364:3:14"},"nodeType":"YulFunctionCall","src":"4364:23:14"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"4354:6:14"}]}]},"name":"divide_by_32_ceil","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4327:5:14","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"4337:6:14","type":""}],"src":"4300:93:14"},{"body":{"nodeType":"YulBlock","src":"4452:54:14","statements":[{"nodeType":"YulAssignment","src":"4462:37:14","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"4487:4:14"},{"name":"value","nodeType":"YulIdentifier","src":"4493:5:14"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4483:3:14"},"nodeType":"YulFunctionCall","src":"4483:16:14"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"4462:8:14"}]}]},"name":"shift_left_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"4427:4:14","type":""},{"name":"value","nodeType":"YulTypedName","src":"4433:5:14","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"4443:8:14","type":""}],"src":"4399:107:14"},{"body":{"nodeType":"YulBlock","src":"4588:317:14","statements":[{"nodeType":"YulVariableDeclaration","src":"4598:35:14","value":{"arguments":[{"name":"shiftBytes","nodeType":"YulIdentifier","src":"4619:10:14"},{"kind":"number","nodeType":"YulLiteral","src":"4631:1:14","type":"","value":"8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4615:3:14"},"nodeType":"YulFunctionCall","src":"4615:18:14"},"variables":[{"name":"shiftBits","nodeType":"YulTypedName","src":"4602:9:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4642:109:14","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"4673:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"4684:66:14","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"4654:18:14"},"nodeType":"YulFunctionCall","src":"4654:97:14"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"4646:4:14","type":""}]},{"nodeType":"YulAssignment","src":"4760:51:14","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"4791:9:14"},{"name":"toInsert","nodeType":"YulIdentifier","src":"4802:8:14"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"4772:18:14"},"nodeType":"YulFunctionCall","src":"4772:39:14"},"variableNames":[{"name":"toInsert","nodeType":"YulIdentifier","src":"4760:8:14"}]},{"nodeType":"YulAssignment","src":"4820:30:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4833:5:14"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"4844:4:14"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4840:3:14"},"nodeType":"YulFunctionCall","src":"4840:9:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4829:3:14"},"nodeType":"YulFunctionCall","src":"4829:21:14"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4820:5:14"}]},{"nodeType":"YulAssignment","src":"4859:40:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4872:5:14"},{"arguments":[{"name":"toInsert","nodeType":"YulIdentifier","src":"4883:8:14"},{"name":"mask","nodeType":"YulIdentifier","src":"4893:4:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4879:3:14"},"nodeType":"YulFunctionCall","src":"4879:19:14"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4869:2:14"},"nodeType":"YulFunctionCall","src":"4869:30:14"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"4859:6:14"}]}]},"name":"update_byte_slice_dynamic32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4549:5:14","type":""},{"name":"shiftBytes","nodeType":"YulTypedName","src":"4556:10:14","type":""},{"name":"toInsert","nodeType":"YulTypedName","src":"4568:8:14","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"4581:6:14","type":""}],"src":"4512:393:14"},{"body":{"nodeType":"YulBlock","src":"4956:32:14","statements":[{"nodeType":"YulAssignment","src":"4966:16:14","value":{"name":"value","nodeType":"YulIdentifier","src":"4977:5:14"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4966:7:14"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4938:5:14","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4948:7:14","type":""}],"src":"4911:77:14"},{"body":{"nodeType":"YulBlock","src":"5026:28:14","statements":[{"nodeType":"YulAssignment","src":"5036:12:14","value":{"name":"value","nodeType":"YulIdentifier","src":"5043:5:14"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"5036:3:14"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5012:5:14","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"5022:3:14","type":""}],"src":"4994:60:14"},{"body":{"nodeType":"YulBlock","src":"5120:82:14","statements":[{"nodeType":"YulAssignment","src":"5130:66:14","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5188:5:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"5170:17:14"},"nodeType":"YulFunctionCall","src":"5170:24:14"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"5161:8:14"},"nodeType":"YulFunctionCall","src":"5161:34:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"5143:17:14"},"nodeType":"YulFunctionCall","src":"5143:53:14"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"5130:9:14"}]}]},"name":"convert_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5100:5:14","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"5110:9:14","type":""}],"src":"5060:142:14"},{"body":{"nodeType":"YulBlock","src":"5255:28:14","statements":[{"nodeType":"YulAssignment","src":"5265:12:14","value":{"name":"value","nodeType":"YulIdentifier","src":"5272:5:14"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"5265:3:14"}]}]},"name":"prepare_store_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5241:5:14","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"5251:3:14","type":""}],"src":"5208:75:14"},{"body":{"nodeType":"YulBlock","src":"5365:193:14","statements":[{"nodeType":"YulVariableDeclaration","src":"5375:63:14","value":{"arguments":[{"name":"value_0","nodeType":"YulIdentifier","src":"5430:7:14"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"5399:30:14"},"nodeType":"YulFunctionCall","src":"5399:39:14"},"variables":[{"name":"convertedValue_0","nodeType":"YulTypedName","src":"5379:16:14","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"5454:4:14"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"5494:4:14"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"5488:5:14"},"nodeType":"YulFunctionCall","src":"5488:11:14"},{"name":"offset","nodeType":"YulIdentifier","src":"5501:6:14"},{"arguments":[{"name":"convertedValue_0","nodeType":"YulIdentifier","src":"5533:16:14"}],"functionName":{"name":"prepare_store_t_uint256","nodeType":"YulIdentifier","src":"5509:23:14"},"nodeType":"YulFunctionCall","src":"5509:41:14"}],"functionName":{"name":"update_byte_slice_dynamic32","nodeType":"YulIdentifier","src":"5460:27:14"},"nodeType":"YulFunctionCall","src":"5460:91:14"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"5447:6:14"},"nodeType":"YulFunctionCall","src":"5447:105:14"},"nodeType":"YulExpressionStatement","src":"5447:105:14"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"5342:4:14","type":""},{"name":"offset","nodeType":"YulTypedName","src":"5348:6:14","type":""},{"name":"value_0","nodeType":"YulTypedName","src":"5356:7:14","type":""}],"src":"5289:269:14"},{"body":{"nodeType":"YulBlock","src":"5613:24:14","statements":[{"nodeType":"YulAssignment","src":"5623:8:14","value":{"kind":"number","nodeType":"YulLiteral","src":"5630:1:14","type":"","value":"0"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"5623:3:14"}]}]},"name":"zero_value_for_split_t_uint256","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"5609:3:14","type":""}],"src":"5564:73:14"},{"body":{"nodeType":"YulBlock","src":"5696:136:14","statements":[{"nodeType":"YulVariableDeclaration","src":"5706:46:14","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nodeType":"YulIdentifier","src":"5720:30:14"},"nodeType":"YulFunctionCall","src":"5720:32:14"},"variables":[{"name":"zero_0","nodeType":"YulTypedName","src":"5710:6:14","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"5805:4:14"},{"name":"offset","nodeType":"YulIdentifier","src":"5811:6:14"},{"name":"zero_0","nodeType":"YulIdentifier","src":"5819:6:14"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"5761:43:14"},"nodeType":"YulFunctionCall","src":"5761:65:14"},"nodeType":"YulExpressionStatement","src":"5761:65:14"}]},"name":"storage_set_to_zero_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"5682:4:14","type":""},{"name":"offset","nodeType":"YulTypedName","src":"5688:6:14","type":""}],"src":"5643:189:14"},{"body":{"nodeType":"YulBlock","src":"5888:136:14","statements":[{"body":{"nodeType":"YulBlock","src":"5955:63:14","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"5999:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"6006:1:14","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nodeType":"YulIdentifier","src":"5969:29:14"},"nodeType":"YulFunctionCall","src":"5969:39:14"},"nodeType":"YulExpressionStatement","src":"5969:39:14"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"5908:5:14"},{"name":"end","nodeType":"YulIdentifier","src":"5915:3:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5905:2:14"},"nodeType":"YulFunctionCall","src":"5905:14:14"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"5920:26:14","statements":[{"nodeType":"YulAssignment","src":"5922:22:14","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"5935:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"5942:1:14","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5931:3:14"},"nodeType":"YulFunctionCall","src":"5931:13:14"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"5922:5:14"}]}]},"pre":{"nodeType":"YulBlock","src":"5902:2:14","statements":[]},"src":"5898:120:14"}]},"name":"clear_storage_range_t_bytes1","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"5876:5:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"5883:3:14","type":""}],"src":"5838:186:14"},{"body":{"nodeType":"YulBlock","src":"6109:464:14","statements":[{"body":{"nodeType":"YulBlock","src":"6135:431:14","statements":[{"nodeType":"YulVariableDeclaration","src":"6149:54:14","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"6197:5:14"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"6165:31:14"},"nodeType":"YulFunctionCall","src":"6165:38:14"},"variables":[{"name":"dataArea","nodeType":"YulTypedName","src":"6153:8:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6216:63:14","value":{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"6239:8:14"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"6267:10:14"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"6249:17:14"},"nodeType":"YulFunctionCall","src":"6249:29:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6235:3:14"},"nodeType":"YulFunctionCall","src":"6235:44:14"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"6220:11:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"6436:27:14","statements":[{"nodeType":"YulAssignment","src":"6438:23:14","value":{"name":"dataArea","nodeType":"YulIdentifier","src":"6453:8:14"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"6438:11:14"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"6420:10:14"},{"kind":"number","nodeType":"YulLiteral","src":"6432:2:14","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6417:2:14"},"nodeType":"YulFunctionCall","src":"6417:18:14"},"nodeType":"YulIf","src":"6414:49:14"},{"expression":{"arguments":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"6505:11:14"},{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"6522:8:14"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"6550:3:14"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"6532:17:14"},"nodeType":"YulFunctionCall","src":"6532:22:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6518:3:14"},"nodeType":"YulFunctionCall","src":"6518:37:14"}],"functionName":{"name":"clear_storage_range_t_bytes1","nodeType":"YulIdentifier","src":"6476:28:14"},"nodeType":"YulFunctionCall","src":"6476:80:14"},"nodeType":"YulExpressionStatement","src":"6476:80:14"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"6126:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"6131:2:14","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6123:2:14"},"nodeType":"YulFunctionCall","src":"6123:11:14"},"nodeType":"YulIf","src":"6120:446:14"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"6085:5:14","type":""},{"name":"len","nodeType":"YulTypedName","src":"6092:3:14","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"6097:10:14","type":""}],"src":"6030:543:14"},{"body":{"nodeType":"YulBlock","src":"6642:54:14","statements":[{"nodeType":"YulAssignment","src":"6652:37:14","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"6677:4:14"},{"name":"value","nodeType":"YulIdentifier","src":"6683:5:14"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6673:3:14"},"nodeType":"YulFunctionCall","src":"6673:16:14"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"6652:8:14"}]}]},"name":"shift_right_unsigned_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"6617:4:14","type":""},{"name":"value","nodeType":"YulTypedName","src":"6623:5:14","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"6633:8:14","type":""}],"src":"6579:117:14"},{"body":{"nodeType":"YulBlock","src":"6753:118:14","statements":[{"nodeType":"YulVariableDeclaration","src":"6763:68:14","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6812:1:14","type":"","value":"8"},{"name":"bytes","nodeType":"YulIdentifier","src":"6815:5:14"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6808:3:14"},"nodeType":"YulFunctionCall","src":"6808:13:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6827:1:14","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6823:3:14"},"nodeType":"YulFunctionCall","src":"6823:6:14"}],"functionName":{"name":"shift_right_unsigned_dynamic","nodeType":"YulIdentifier","src":"6779:28:14"},"nodeType":"YulFunctionCall","src":"6779:51:14"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6775:3:14"},"nodeType":"YulFunctionCall","src":"6775:56:14"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"6767:4:14","type":""}]},{"nodeType":"YulAssignment","src":"6840:25:14","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"6854:4:14"},{"name":"mask","nodeType":"YulIdentifier","src":"6860:4:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6850:3:14"},"nodeType":"YulFunctionCall","src":"6850:15:14"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"6840:6:14"}]}]},"name":"mask_bytes_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"6730:4:14","type":""},{"name":"bytes","nodeType":"YulTypedName","src":"6736:5:14","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"6746:6:14","type":""}],"src":"6702:169:14"},{"body":{"nodeType":"YulBlock","src":"6957:214:14","statements":[{"nodeType":"YulAssignment","src":"7090:37:14","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"7117:4:14"},{"name":"len","nodeType":"YulIdentifier","src":"7123:3:14"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"7098:18:14"},"nodeType":"YulFunctionCall","src":"7098:29:14"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"7090:4:14"}]},{"nodeType":"YulAssignment","src":"7136:29:14","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"7147:4:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7157:1:14","type":"","value":"2"},{"name":"len","nodeType":"YulIdentifier","src":"7160:3:14"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7153:3:14"},"nodeType":"YulFunctionCall","src":"7153:11:14"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7144:2:14"},"nodeType":"YulFunctionCall","src":"7144:21:14"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"7136:4:14"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"6938:4:14","type":""},{"name":"len","nodeType":"YulTypedName","src":"6944:3:14","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"6952:4:14","type":""}],"src":"6876:295:14"},{"body":{"nodeType":"YulBlock","src":"7268:1303:14","statements":[{"nodeType":"YulVariableDeclaration","src":"7279:51:14","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7326:3:14"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"7293:32:14"},"nodeType":"YulFunctionCall","src":"7293:37:14"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"7283:6:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"7415:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7417:16:14"},"nodeType":"YulFunctionCall","src":"7417:18:14"},"nodeType":"YulExpressionStatement","src":"7417:18:14"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"7387:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"7395:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7384:2:14"},"nodeType":"YulFunctionCall","src":"7384:30:14"},"nodeType":"YulIf","src":"7381:56:14"},{"nodeType":"YulVariableDeclaration","src":"7447:52:14","value":{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"7493:4:14"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"7487:5:14"},"nodeType":"YulFunctionCall","src":"7487:11:14"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"7461:25:14"},"nodeType":"YulFunctionCall","src":"7461:38:14"},"variables":[{"name":"oldLen","nodeType":"YulTypedName","src":"7451:6:14","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"7592:4:14"},{"name":"oldLen","nodeType":"YulIdentifier","src":"7598:6:14"},{"name":"newLen","nodeType":"YulIdentifier","src":"7606:6:14"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulIdentifier","src":"7546:45:14"},"nodeType":"YulFunctionCall","src":"7546:67:14"},"nodeType":"YulExpressionStatement","src":"7546:67:14"},{"nodeType":"YulVariableDeclaration","src":"7623:18:14","value":{"kind":"number","nodeType":"YulLiteral","src":"7640:1:14","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"7627:9:14","type":""}]},{"nodeType":"YulAssignment","src":"7651:17:14","value":{"kind":"number","nodeType":"YulLiteral","src":"7664:4:14","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"7651:9:14"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"7715:611:14","statements":[{"nodeType":"YulVariableDeclaration","src":"7729:37:14","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"7748:6:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7760:4:14","type":"","value":"0x1f"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"7756:3:14"},"nodeType":"YulFunctionCall","src":"7756:9:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7744:3:14"},"nodeType":"YulFunctionCall","src":"7744:22:14"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"7733:7:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7780:51:14","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"7826:4:14"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"7794:31:14"},"nodeType":"YulFunctionCall","src":"7794:37:14"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"7784:6:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7844:10:14","value":{"kind":"number","nodeType":"YulLiteral","src":"7853:1:14","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"7848:1:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"7912:163:14","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"7937:6:14"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7955:3:14"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"7960:9:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7951:3:14"},"nodeType":"YulFunctionCall","src":"7951:19:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7945:5:14"},"nodeType":"YulFunctionCall","src":"7945:26:14"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"7930:6:14"},"nodeType":"YulFunctionCall","src":"7930:42:14"},"nodeType":"YulExpressionStatement","src":"7930:42:14"},{"nodeType":"YulAssignment","src":"7989:24:14","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"8003:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"8011:1:14","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7999:3:14"},"nodeType":"YulFunctionCall","src":"7999:14:14"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"7989:6:14"}]},{"nodeType":"YulAssignment","src":"8030:31:14","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"8047:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"8058:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8043:3:14"},"nodeType":"YulFunctionCall","src":"8043:18:14"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"8030:9:14"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7878:1:14"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"7881:7:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7875:2:14"},"nodeType":"YulFunctionCall","src":"7875:14:14"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7890:21:14","statements":[{"nodeType":"YulAssignment","src":"7892:17:14","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7901:1:14"},{"kind":"number","nodeType":"YulLiteral","src":"7904:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7897:3:14"},"nodeType":"YulFunctionCall","src":"7897:12:14"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"7892:1:14"}]}]},"pre":{"nodeType":"YulBlock","src":"7871:3:14","statements":[]},"src":"7867:208:14"},{"body":{"nodeType":"YulBlock","src":"8111:156:14","statements":[{"nodeType":"YulVariableDeclaration","src":"8129:43:14","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8156:3:14"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"8161:9:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8152:3:14"},"nodeType":"YulFunctionCall","src":"8152:19:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8146:5:14"},"nodeType":"YulFunctionCall","src":"8146:26:14"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"8133:9:14","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"8196:6:14"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"8223:9:14"},{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"8238:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"8246:4:14","type":"","value":"0x1f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8234:3:14"},"nodeType":"YulFunctionCall","src":"8234:17:14"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"8204:18:14"},"nodeType":"YulFunctionCall","src":"8204:48:14"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8189:6:14"},"nodeType":"YulFunctionCall","src":"8189:64:14"},"nodeType":"YulExpressionStatement","src":"8189:64:14"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"8094:7:14"},{"name":"newLen","nodeType":"YulIdentifier","src":"8103:6:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8091:2:14"},"nodeType":"YulFunctionCall","src":"8091:19:14"},"nodeType":"YulIf","src":"8088:179:14"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"8287:4:14"},{"arguments":[{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"8301:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"8309:1:14","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8297:3:14"},"nodeType":"YulFunctionCall","src":"8297:14:14"},{"kind":"number","nodeType":"YulLiteral","src":"8313:1:14","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8293:3:14"},"nodeType":"YulFunctionCall","src":"8293:22:14"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8280:6:14"},"nodeType":"YulFunctionCall","src":"8280:36:14"},"nodeType":"YulExpressionStatement","src":"8280:36:14"}]},"nodeType":"YulCase","src":"7708:618:14","value":{"kind":"number","nodeType":"YulLiteral","src":"7713:1:14","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"8343:222:14","statements":[{"nodeType":"YulVariableDeclaration","src":"8357:14:14","value":{"kind":"number","nodeType":"YulLiteral","src":"8370:1:14","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"8361:5:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"8394:67:14","statements":[{"nodeType":"YulAssignment","src":"8412:35:14","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8431:3:14"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"8436:9:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8427:3:14"},"nodeType":"YulFunctionCall","src":"8427:19:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8421:5:14"},"nodeType":"YulFunctionCall","src":"8421:26:14"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"8412:5:14"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"8387:6:14"},"nodeType":"YulIf","src":"8384:77:14"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"8481:4:14"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8540:5:14"},{"name":"newLen","nodeType":"YulIdentifier","src":"8547:6:14"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"8487:52:14"},"nodeType":"YulFunctionCall","src":"8487:67:14"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8474:6:14"},"nodeType":"YulFunctionCall","src":"8474:81:14"},"nodeType":"YulExpressionStatement","src":"8474:81:14"}]},"nodeType":"YulCase","src":"8335:230:14","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"7688:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"7696:2:14","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7685:2:14"},"nodeType":"YulFunctionCall","src":"7685:14:14"},"nodeType":"YulSwitch","src":"7678:887:14"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"7257:4:14","type":""},{"name":"src","nodeType":"YulTypedName","src":"7263:3:14","type":""}],"src":"7176:1395:14"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_memory_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := mload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n}\n","id":14,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2894 CODESIZE SUB DUP1 PUSH3 0x2894 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x1F6 JUMP JUMPDEST DUP2 PUSH1 0x0 SWAP1 DUP2 PUSH3 0x48 SWAP2 SWAP1 PUSH3 0x4C6 JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP1 DUP2 PUSH3 0x5A SWAP2 SWAP1 PUSH3 0x4C6 JUMP JUMPDEST POP POP POP PUSH3 0x5AD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH3 0xCC DUP3 PUSH3 0x81 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0xEE JUMPI PUSH3 0xED PUSH3 0x92 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x103 PUSH3 0x63 JUMP JUMPDEST SWAP1 POP PUSH3 0x111 DUP3 DUP3 PUSH3 0xC1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x134 JUMPI PUSH3 0x133 PUSH3 0x92 JUMP JUMPDEST JUMPDEST PUSH3 0x13F DUP3 PUSH3 0x81 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x16C JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x14F JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x18F PUSH3 0x189 DUP5 PUSH3 0x116 JUMP JUMPDEST PUSH3 0xF7 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x1AE JUMPI PUSH3 0x1AD PUSH3 0x7C JUMP JUMPDEST JUMPDEST PUSH3 0x1BB DUP5 DUP3 DUP6 PUSH3 0x14C JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x1DB JUMPI PUSH3 0x1DA PUSH3 0x77 JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH3 0x1ED DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x178 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x210 JUMPI PUSH3 0x20F PUSH3 0x6D JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x231 JUMPI PUSH3 0x230 PUSH3 0x72 JUMP JUMPDEST JUMPDEST PUSH3 0x23F DUP6 DUP3 DUP7 ADD PUSH3 0x1C3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x263 JUMPI PUSH3 0x262 PUSH3 0x72 JUMP JUMPDEST JUMPDEST PUSH3 0x271 DUP6 DUP3 DUP7 ADD PUSH3 0x1C3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x2CE JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x2E4 JUMPI PUSH3 0x2E3 PUSH3 0x286 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH3 0x34E PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH3 0x30F JUMP JUMPDEST PUSH3 0x35A DUP7 DUP4 PUSH3 0x30F JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x3A7 PUSH3 0x3A1 PUSH3 0x39B DUP5 PUSH3 0x372 JUMP JUMPDEST PUSH3 0x37C JUMP JUMPDEST PUSH3 0x372 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x3C3 DUP4 PUSH3 0x386 JUMP JUMPDEST PUSH3 0x3DB PUSH3 0x3D2 DUP3 PUSH3 0x3AE JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH3 0x31C JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH3 0x3F2 PUSH3 0x3E3 JUMP JUMPDEST PUSH3 0x3FF DUP2 DUP5 DUP5 PUSH3 0x3B8 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x427 JUMPI PUSH3 0x41B PUSH1 0x0 DUP3 PUSH3 0x3E8 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x405 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x476 JUMPI PUSH3 0x440 DUP2 PUSH3 0x2EA JUMP JUMPDEST PUSH3 0x44B DUP5 PUSH3 0x2FF JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH3 0x45B JUMPI DUP2 SWAP1 POP JUMPDEST PUSH3 0x473 PUSH3 0x46A DUP6 PUSH3 0x2FF JUMP JUMPDEST DUP4 ADD DUP3 PUSH3 0x404 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x49B PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH3 0x47B JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x4B6 DUP4 DUP4 PUSH3 0x488 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x4D1 DUP3 PUSH3 0x27B JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x4ED JUMPI PUSH3 0x4EC PUSH3 0x92 JUMP JUMPDEST JUMPDEST PUSH3 0x4F9 DUP3 SLOAD PUSH3 0x2B5 JUMP JUMPDEST PUSH3 0x506 DUP3 DUP3 DUP6 PUSH3 0x42B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x53E JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x529 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH3 0x535 DUP6 DUP3 PUSH3 0x4A8 JUMP JUMPDEST DUP7 SSTORE POP PUSH3 0x5A5 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH3 0x54E DUP7 PUSH3 0x2EA JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x578 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x551 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH3 0x598 JUMPI DUP5 DUP10 ADD MLOAD PUSH3 0x594 PUSH1 0x1F DUP10 AND DUP3 PUSH3 0x488 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x22D7 DUP1 PUSH3 0x5BD PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x28C JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x206 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x18A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x1614 JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x165C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10C PUSH2 0x39E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0x1707 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x175F JUMP JUMPDEST PUSH2 0x430 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x149 SWAP2 SWAP1 PUSH2 0x17CD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x167 SWAP2 SWAP1 PUSH2 0x1814 JUMP JUMPDEST PUSH2 0x476 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x188 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x183 SWAP2 SWAP1 PUSH2 0x1854 JUMP JUMPDEST PUSH2 0x58D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x1854 JUMP JUMPDEST PUSH2 0x5ED JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BB SWAP2 SWAP1 PUSH2 0x175F JUMP JUMPDEST PUSH2 0x60D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CD SWAP2 SWAP1 PUSH2 0x17CD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x18A7 JUMP JUMPDEST PUSH2 0x693 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FD SWAP2 SWAP1 PUSH2 0x18E3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20E PUSH2 0x74A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21B SWAP2 SWAP1 PUSH2 0x1707 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x239 SWAP2 SWAP1 PUSH2 0x192A JUMP JUMPDEST PUSH2 0x7DC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x1A9F JUMP JUMPDEST PUSH2 0x7F2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x276 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x271 SWAP2 SWAP1 PUSH2 0x175F JUMP JUMPDEST PUSH2 0x854 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x1707 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x1B22 JUMP JUMPDEST PUSH2 0x8BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B3 SWAP2 SWAP1 PUSH2 0x165C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x387 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x397 JUMPI POP PUSH2 0x396 DUP3 PUSH2 0x950 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x3AD SWAP1 PUSH2 0x1B91 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3D9 SWAP1 PUSH2 0x1B91 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x426 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3FB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x426 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x409 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43B DUP3 PUSH2 0x9BA JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x481 DUP3 PUSH2 0x60D JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x4F1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E8 SWAP1 PUSH2 0x1C34 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x510 PUSH2 0xA05 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x53F JUMPI POP PUSH2 0x53E DUP2 PUSH2 0x539 PUSH2 0xA05 JUMP JUMPDEST PUSH2 0x8BC JUMP JUMPDEST JUMPDEST PUSH2 0x57E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x575 SWAP1 PUSH2 0x1CC6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x588 DUP4 DUP4 PUSH2 0xA0D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x59E PUSH2 0x598 PUSH2 0xA05 JUMP JUMPDEST DUP3 PUSH2 0xAC6 JUMP JUMPDEST PUSH2 0x5DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5D4 SWAP1 PUSH2 0x1D58 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E8 DUP4 DUP4 DUP4 PUSH2 0xB5B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x608 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x7F2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x619 DUP4 PUSH2 0xE54 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x68A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x681 SWAP1 PUSH2 0x1DC4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x703 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FA SWAP1 PUSH2 0x1E56 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x759 SWAP1 PUSH2 0x1B91 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x785 SWAP1 PUSH2 0x1B91 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7D2 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7A7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7D2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7B5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x7EE PUSH2 0x7E7 PUSH2 0xA05 JUMP JUMPDEST DUP4 DUP4 PUSH2 0xE91 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x803 PUSH2 0x7FD PUSH2 0xA05 JUMP JUMPDEST DUP4 PUSH2 0xAC6 JUMP JUMPDEST PUSH2 0x842 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x839 SWAP1 PUSH2 0x1D58 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x84E DUP5 DUP5 DUP5 DUP5 PUSH2 0xFFD JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x85F DUP3 PUSH2 0x9BA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x869 PUSH2 0x1059 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x889 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x8B4 JUMP JUMPDEST DUP1 PUSH2 0x893 DUP5 PUSH2 0x1070 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8A4 SWAP3 SWAP2 SWAP1 PUSH2 0x1EB2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9C3 DUP2 PUSH2 0x113E JUMP JUMPDEST PUSH2 0xA02 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F9 SWAP1 PUSH2 0x1DC4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA80 DUP4 PUSH2 0x60D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAD2 DUP4 PUSH2 0x60D JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xB14 JUMPI POP PUSH2 0xB13 DUP2 DUP6 PUSH2 0x8BC JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xB52 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB3A DUP5 PUSH2 0x430 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB7B DUP3 PUSH2 0x60D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBD1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBC8 SWAP1 PUSH2 0x1F48 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xC40 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC37 SWAP1 PUSH2 0x1FDA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC4D DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x117F JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC6D DUP3 PUSH2 0x60D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCC3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCBA SWAP1 PUSH2 0x1F48 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xE4F DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x12A5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xEFF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEF6 SWAP1 PUSH2 0x2046 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0xFF0 SWAP2 SWAP1 PUSH2 0x165C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1008 DUP5 DUP5 DUP5 PUSH2 0xB5B JUMP JUMPDEST PUSH2 0x1014 DUP5 DUP5 DUP5 DUP5 PUSH2 0x12AB JUMP JUMPDEST PUSH2 0x1053 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x104A SWAP1 PUSH2 0x20D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x107F DUP5 PUSH2 0x1432 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x109E JUMPI PUSH2 0x109D PUSH2 0x1974 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x10D0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1133 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x1127 JUMPI PUSH2 0x1126 PUSH2 0x20F8 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x10DE JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1160 DUP4 PUSH2 0xE54 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x129F JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1213 JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x120B SWAP2 SWAP1 PUSH2 0x2156 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x129E JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1296 SWAP2 SWAP1 PUSH2 0x218A JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12CC DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1585 JUMP JUMPDEST ISZERO PUSH2 0x1425 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x12F5 PUSH2 0xA05 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1317 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2213 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1353 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1350 SWAP2 SWAP1 PUSH2 0x2274 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x13D5 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1383 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1388 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x13CD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13C4 SWAP1 PUSH2 0x20D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x142A JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1490 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x1486 JUMPI PUSH2 0x1485 PUSH2 0x20F8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x14CD JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x14C3 JUMPI PUSH2 0x14C2 PUSH2 0x20F8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x14FC JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x14F2 JUMPI PUSH2 0x14F1 PUSH2 0x20F8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1525 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x151B JUMPI PUSH2 0x151A PUSH2 0x20F8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x154A JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x1540 JUMPI PUSH2 0x153F PUSH2 0x20F8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x156D JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x1563 JUMPI PUSH2 0x1562 PUSH2 0x20F8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x157C JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x15F1 DUP2 PUSH2 0x15BC JUMP JUMPDEST DUP2 EQ PUSH2 0x15FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x160E DUP2 PUSH2 0x15E8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x162A JUMPI PUSH2 0x1629 PUSH2 0x15B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1638 DUP5 DUP3 DUP6 ADD PUSH2 0x15FF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1656 DUP2 PUSH2 0x1641 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1671 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x164D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x16B1 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1696 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16D9 DUP3 PUSH2 0x1677 JUMP JUMPDEST PUSH2 0x16E3 DUP2 DUP6 PUSH2 0x1682 JUMP JUMPDEST SWAP4 POP PUSH2 0x16F3 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1693 JUMP JUMPDEST PUSH2 0x16FC DUP2 PUSH2 0x16BD JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1721 DUP2 DUP5 PUSH2 0x16CE JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x173C DUP2 PUSH2 0x1729 JUMP JUMPDEST DUP2 EQ PUSH2 0x1747 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1759 DUP2 PUSH2 0x1733 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1775 JUMPI PUSH2 0x1774 PUSH2 0x15B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1783 DUP5 DUP3 DUP6 ADD PUSH2 0x174A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17B7 DUP3 PUSH2 0x178C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x17C7 DUP2 PUSH2 0x17AC JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x17E2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x17BE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x17F1 DUP2 PUSH2 0x17AC JUMP JUMPDEST DUP2 EQ PUSH2 0x17FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x180E DUP2 PUSH2 0x17E8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x182B JUMPI PUSH2 0x182A PUSH2 0x15B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1839 DUP6 DUP3 DUP7 ADD PUSH2 0x17FF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x184A DUP6 DUP3 DUP7 ADD PUSH2 0x174A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x186D JUMPI PUSH2 0x186C PUSH2 0x15B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x187B DUP7 DUP3 DUP8 ADD PUSH2 0x17FF JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x188C DUP7 DUP3 DUP8 ADD PUSH2 0x17FF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x189D DUP7 DUP3 DUP8 ADD PUSH2 0x174A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18BD JUMPI PUSH2 0x18BC PUSH2 0x15B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x18CB DUP5 DUP3 DUP6 ADD PUSH2 0x17FF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x18DD DUP2 PUSH2 0x1729 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x18F8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x18D4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1907 DUP2 PUSH2 0x1641 JUMP JUMPDEST DUP2 EQ PUSH2 0x1912 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1924 DUP2 PUSH2 0x18FE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1941 JUMPI PUSH2 0x1940 PUSH2 0x15B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x194F DUP6 DUP3 DUP7 ADD PUSH2 0x17FF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1960 DUP6 DUP3 DUP7 ADD PUSH2 0x1915 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x19AC DUP3 PUSH2 0x16BD JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x19CB JUMPI PUSH2 0x19CA PUSH2 0x1974 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19DE PUSH2 0x15A8 JUMP JUMPDEST SWAP1 POP PUSH2 0x19EA DUP3 DUP3 PUSH2 0x19A3 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1A0A JUMPI PUSH2 0x1A09 PUSH2 0x1974 JUMP JUMPDEST JUMPDEST PUSH2 0x1A13 DUP3 PUSH2 0x16BD JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A42 PUSH2 0x1A3D DUP5 PUSH2 0x19EF JUMP JUMPDEST PUSH2 0x19D4 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1A5E JUMPI PUSH2 0x1A5D PUSH2 0x196F JUMP JUMPDEST JUMPDEST PUSH2 0x1A69 DUP5 DUP3 DUP6 PUSH2 0x1A20 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1A86 JUMPI PUSH2 0x1A85 PUSH2 0x196A JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1A96 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1A2F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1AB9 JUMPI PUSH2 0x1AB8 PUSH2 0x15B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1AC7 DUP8 DUP3 DUP9 ADD PUSH2 0x17FF JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1AD8 DUP8 DUP3 DUP9 ADD PUSH2 0x17FF JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x1AE9 DUP8 DUP3 DUP9 ADD PUSH2 0x174A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B0A JUMPI PUSH2 0x1B09 PUSH2 0x15B7 JUMP JUMPDEST JUMPDEST PUSH2 0x1B16 DUP8 DUP3 DUP9 ADD PUSH2 0x1A71 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B39 JUMPI PUSH2 0x1B38 PUSH2 0x15B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1B47 DUP6 DUP3 DUP7 ADD PUSH2 0x17FF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1B58 DUP6 DUP3 DUP7 ADD PUSH2 0x17FF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1BA9 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1BBC JUMPI PUSH2 0x1BBB PUSH2 0x1B62 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C1E PUSH1 0x21 DUP4 PUSH2 0x1682 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C29 DUP3 PUSH2 0x1BC2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C4D DUP2 PUSH2 0x1C11 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CB0 PUSH1 0x3D DUP4 PUSH2 0x1682 JUMP JUMPDEST SWAP2 POP PUSH2 0x1CBB DUP3 PUSH2 0x1C54 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CDF DUP2 PUSH2 0x1CA3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D42 PUSH1 0x2D DUP4 PUSH2 0x1682 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D4D DUP3 PUSH2 0x1CE6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D71 DUP2 PUSH2 0x1D35 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DAE PUSH1 0x18 DUP4 PUSH2 0x1682 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DB9 DUP3 PUSH2 0x1D78 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1DDD DUP2 PUSH2 0x1DA1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E40 PUSH1 0x29 DUP4 PUSH2 0x1682 JUMP JUMPDEST SWAP2 POP PUSH2 0x1E4B DUP3 PUSH2 0x1DE4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E6F DUP2 PUSH2 0x1E33 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E8C DUP3 PUSH2 0x1677 JUMP JUMPDEST PUSH2 0x1E96 DUP2 DUP6 PUSH2 0x1E76 JUMP JUMPDEST SWAP4 POP PUSH2 0x1EA6 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1693 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EBE DUP3 DUP6 PUSH2 0x1E81 JUMP JUMPDEST SWAP2 POP PUSH2 0x1ECA DUP3 DUP5 PUSH2 0x1E81 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F32 PUSH1 0x25 DUP4 PUSH2 0x1682 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F3D DUP3 PUSH2 0x1ED6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F61 DUP2 PUSH2 0x1F25 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FC4 PUSH1 0x24 DUP4 PUSH2 0x1682 JUMP JUMPDEST SWAP2 POP PUSH2 0x1FCF DUP3 PUSH2 0x1F68 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1FF3 DUP2 PUSH2 0x1FB7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2030 PUSH1 0x19 DUP4 PUSH2 0x1682 JUMP JUMPDEST SWAP2 POP PUSH2 0x203B DUP3 PUSH2 0x1FFA JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x205F DUP2 PUSH2 0x2023 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20C2 PUSH1 0x32 DUP4 PUSH2 0x1682 JUMP JUMPDEST SWAP2 POP PUSH2 0x20CD DUP3 PUSH2 0x2066 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x20F1 DUP2 PUSH2 0x20B5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2161 DUP3 PUSH2 0x1729 JUMP JUMPDEST SWAP2 POP PUSH2 0x216C DUP4 PUSH2 0x1729 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x2184 JUMPI PUSH2 0x2183 PUSH2 0x2127 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2195 DUP3 PUSH2 0x1729 JUMP JUMPDEST SWAP2 POP PUSH2 0x21A0 DUP4 PUSH2 0x1729 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x21B8 JUMPI PUSH2 0x21B7 PUSH2 0x2127 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21E5 DUP3 PUSH2 0x21BE JUMP JUMPDEST PUSH2 0x21EF DUP2 DUP6 PUSH2 0x21C9 JUMP JUMPDEST SWAP4 POP PUSH2 0x21FF DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1693 JUMP JUMPDEST PUSH2 0x2208 DUP2 PUSH2 0x16BD JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2228 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x17BE JUMP JUMPDEST PUSH2 0x2235 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x17BE JUMP JUMPDEST PUSH2 0x2242 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x18D4 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2254 DUP2 DUP5 PUSH2 0x21DA JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x226E DUP2 PUSH2 0x15E8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x228A JUMPI PUSH2 0x2289 PUSH2 0x15B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2298 DUP5 DUP3 DUP6 ADD PUSH2 0x225F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2E CALL SSTORE 0xBE 0xEC PC BALANCE 0x5F SWAP10 GT 0xE1 0xC7 CODECOPY 0xE0 MULMOD SWAP4 PUSH32 0xE03BFA665F2F6054E78352D0BB320D64736F6C63430008110033000000000000 ","sourceMap":"628:16327:1:-:0;;;1390:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1464:5;1456;:13;;;;;;:::i;:::-;;1489:7;1479;:17;;;;;;:::i;:::-;;1390:113;;628:16327;;7:75:14;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:117;443:1;440;433:12;457:117;566:1;563;556:12;580:102;621:6;672:2;668:7;663:2;656:5;652:14;648:28;638:38;;580:102;;;:::o;688:180::-;736:77;733:1;726:88;833:4;830:1;823:15;857:4;854:1;847:15;874:281;957:27;979:4;957:27;:::i;:::-;949:6;945:40;1087:6;1075:10;1072:22;1051:18;1039:10;1036:34;1033:62;1030:88;;;1098:18;;:::i;:::-;1030:88;1138:10;1134:2;1127:22;917:238;874:281;;:::o;1161:129::-;1195:6;1222:20;;:::i;:::-;1212:30;;1251:33;1279:4;1271:6;1251:33;:::i;:::-;1161:129;;;:::o;1296:308::-;1358:4;1448:18;1440:6;1437:30;1434:56;;;1470:18;;:::i;:::-;1434:56;1508:29;1530:6;1508:29;:::i;:::-;1500:37;;1592:4;1586;1582:15;1574:23;;1296:308;;;:::o;1610:246::-;1691:1;1701:113;1715:6;1712:1;1709:13;1701:113;;;1800:1;1795:3;1791:11;1785:18;1781:1;1776:3;1772:11;1765:39;1737:2;1734:1;1730:10;1725:15;;1701:113;;;1848:1;1839:6;1834:3;1830:16;1823:27;1672:184;1610:246;;;:::o;1862:434::-;1951:5;1976:66;1992:49;2034:6;1992:49;:::i;:::-;1976:66;:::i;:::-;1967:75;;2065:6;2058:5;2051:21;2103:4;2096:5;2092:16;2141:3;2132:6;2127:3;2123:16;2120:25;2117:112;;;2148:79;;:::i;:::-;2117:112;2238:52;2283:6;2278:3;2273;2238:52;:::i;:::-;1957:339;1862:434;;;;;:::o;2316:355::-;2383:5;2432:3;2425:4;2417:6;2413:17;2409:27;2399:122;;2440:79;;:::i;:::-;2399:122;2550:6;2544:13;2575:90;2661:3;2653:6;2646:4;2638:6;2634:17;2575:90;:::i;:::-;2566:99;;2389:282;2316:355;;;;:::o;2677:853::-;2776:6;2784;2833:2;2821:9;2812:7;2808:23;2804:32;2801:119;;;2839:79;;:::i;:::-;2801:119;2980:1;2969:9;2965:17;2959:24;3010:18;3002:6;2999:30;2996:117;;;3032:79;;:::i;:::-;2996:117;3137:74;3203:7;3194:6;3183:9;3179:22;3137:74;:::i;:::-;3127:84;;2930:291;3281:2;3270:9;3266:18;3260:25;3312:18;3304:6;3301:30;3298:117;;;3334:79;;:::i;:::-;3298:117;3439:74;3505:7;3496:6;3485:9;3481:22;3439:74;:::i;:::-;3429:84;;3231:292;2677:853;;;;;:::o;3536:99::-;3588:6;3622:5;3616:12;3606:22;;3536:99;;;:::o;3641:180::-;3689:77;3686:1;3679:88;3786:4;3783:1;3776:15;3810:4;3807:1;3800:15;3827:320;3871:6;3908:1;3902:4;3898:12;3888:22;;3955:1;3949:4;3945:12;3976:18;3966:81;;4032:4;4024:6;4020:17;4010:27;;3966:81;4094:2;4086:6;4083:14;4063:18;4060:38;4057:84;;4113:18;;:::i;:::-;4057:84;3878:269;3827:320;;;:::o;4153:141::-;4202:4;4225:3;4217:11;;4248:3;4245:1;4238:14;4282:4;4279:1;4269:18;4261:26;;4153:141;;;:::o;4300:93::-;4337:6;4384:2;4379;4372:5;4368:14;4364:23;4354:33;;4300:93;;;:::o;4399:107::-;4443:8;4493:5;4487:4;4483:16;4462:37;;4399:107;;;;:::o;4512:393::-;4581:6;4631:1;4619:10;4615:18;4654:97;4684:66;4673:9;4654:97;:::i;:::-;4772:39;4802:8;4791:9;4772:39;:::i;:::-;4760:51;;4844:4;4840:9;4833:5;4829:21;4820:30;;4893:4;4883:8;4879:19;4872:5;4869:30;4859:40;;4588:317;;4512:393;;;;;:::o;4911:77::-;4948:7;4977:5;4966:16;;4911:77;;;:::o;4994:60::-;5022:3;5043:5;5036:12;;4994:60;;;:::o;5060:142::-;5110:9;5143:53;5161:34;5170:24;5188:5;5170:24;:::i;:::-;5161:34;:::i;:::-;5143:53;:::i;:::-;5130:66;;5060:142;;;:::o;5208:75::-;5251:3;5272:5;5265:12;;5208:75;;;:::o;5289:269::-;5399:39;5430:7;5399:39;:::i;:::-;5460:91;5509:41;5533:16;5509:41;:::i;:::-;5501:6;5494:4;5488:11;5460:91;:::i;:::-;5454:4;5447:105;5365:193;5289:269;;;:::o;5564:73::-;5609:3;5564:73;:::o;5643:189::-;5720:32;;:::i;:::-;5761:65;5819:6;5811;5805:4;5761:65;:::i;:::-;5696:136;5643:189;;:::o;5838:186::-;5898:120;5915:3;5908:5;5905:14;5898:120;;;5969:39;6006:1;5999:5;5969:39;:::i;:::-;5942:1;5935:5;5931:13;5922:22;;5898:120;;;5838:186;;:::o;6030:543::-;6131:2;6126:3;6123:11;6120:446;;;6165:38;6197:5;6165:38;:::i;:::-;6249:29;6267:10;6249:29;:::i;:::-;6239:8;6235:44;6432:2;6420:10;6417:18;6414:49;;;6453:8;6438:23;;6414:49;6476:80;6532:22;6550:3;6532:22;:::i;:::-;6522:8;6518:37;6505:11;6476:80;:::i;:::-;6135:431;;6120:446;6030:543;;;:::o;6579:117::-;6633:8;6683:5;6677:4;6673:16;6652:37;;6579:117;;;;:::o;6702:169::-;6746:6;6779:51;6827:1;6823:6;6815:5;6812:1;6808:13;6779:51;:::i;:::-;6775:56;6860:4;6854;6850:15;6840:25;;6753:118;6702:169;;;;:::o;6876:295::-;6952:4;7098:29;7123:3;7117:4;7098:29;:::i;:::-;7090:37;;7160:3;7157:1;7153:11;7147:4;7144:21;7136:29;;6876:295;;;;:::o;7176:1395::-;7293:37;7326:3;7293:37;:::i;:::-;7395:18;7387:6;7384:30;7381:56;;;7417:18;;:::i;:::-;7381:56;7461:38;7493:4;7487:11;7461:38;:::i;:::-;7546:67;7606:6;7598;7592:4;7546:67;:::i;:::-;7640:1;7664:4;7651:17;;7696:2;7688:6;7685:14;7713:1;7708:618;;;;8370:1;8387:6;8384:77;;;8436:9;8431:3;8427:19;8421:26;8412:35;;8384:77;8487:67;8547:6;8540:5;8487:67;:::i;:::-;8481:4;8474:81;8343:222;7678:887;;7708:618;7760:4;7756:9;7748:6;7744:22;7794:37;7826:4;7794:37;:::i;:::-;7853:1;7867:208;7881:7;7878:1;7875:14;7867:208;;;7960:9;7955:3;7951:19;7945:26;7937:6;7930:42;8011:1;8003:6;7999:14;7989:24;;8058:2;8047:9;8043:18;8030:31;;7904:4;7901:1;7897:12;7892:17;;7867:208;;;8103:6;8094:7;8091:19;8088:179;;;8161:9;8156:3;8152:19;8146:26;8204:48;8246:4;8238:6;8234:17;8223:9;8204:48;:::i;:::-;8196:6;8189:64;8111:156;8088:179;8313:1;8309;8301:6;8297:14;8293:22;8287:4;8280:36;7715:611;;;7678:887;;7268:1303;;;7176:1395;;:::o;628:16327:1:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_1056":{"entryPoint":4773,"id":1056,"parameterSlots":4,"returnSlots":0},"@_approve_889":{"entryPoint":2573,"id":889,"parameterSlots":2,"returnSlots":0},"@_baseURI_326":{"entryPoint":4185,"id":326,"parameterSlots":0,"returnSlots":1},"@_beforeTokenTransfer_1043":{"entryPoint":4479,"id":1043,"parameterSlots":4,"returnSlots":0},"@_checkOnERC721Received_997":{"entryPoint":4779,"id":997,"parameterSlots":4,"returnSlots":1},"@_exists_558":{"entryPoint":4414,"id":558,"parameterSlots":1,"returnSlots":1},"@_isApprovedOrOwner_592":{"entryPoint":2758,"id":592,"parameterSlots":2,"returnSlots":1},"@_msgSender_1560":{"entryPoint":2565,"id":1560,"parameterSlots":0,"returnSlots":1},"@_ownerOf_540":{"entryPoint":3668,"id":540,"parameterSlots":1,"returnSlots":1},"@_requireMinted_935":{"entryPoint":2490,"id":935,"parameterSlots":1,"returnSlots":0},"@_safeTransfer_527":{"entryPoint":4093,"id":527,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_921":{"entryPoint":3729,"id":921,"parameterSlots":3,"returnSlots":0},"@_transfer_865":{"entryPoint":2907,"id":865,"parameterSlots":3,"returnSlots":0},"@approve_369":{"entryPoint":1142,"id":369,"parameterSlots":2,"returnSlots":0},"@balanceOf_230":{"entryPoint":1683,"id":230,"parameterSlots":1,"returnSlots":1},"@getApproved_387":{"entryPoint":1072,"id":387,"parameterSlots":1,"returnSlots":1},"@isApprovedForAll_422":{"entryPoint":2236,"id":422,"parameterSlots":2,"returnSlots":1},"@isContract_1236":{"entryPoint":5509,"id":1236,"parameterSlots":1,"returnSlots":1},"@log10_2557":{"entryPoint":5170,"id":2557,"parameterSlots":1,"returnSlots":1},"@name_268":{"entryPoint":926,"id":268,"parameterSlots":0,"returnSlots":1},"@ownerOf_258":{"entryPoint":1549,"id":258,"parameterSlots":1,"returnSlots":1},"@safeTransferFrom_468":{"entryPoint":1517,"id":468,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_498":{"entryPoint":2034,"id":498,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_404":{"entryPoint":2012,"id":404,"parameterSlots":2,"returnSlots":0},"@supportsInterface_1842":{"entryPoint":2384,"id":1842,"parameterSlots":1,"returnSlots":1},"@supportsInterface_206":{"entryPoint":700,"id":206,"parameterSlots":1,"returnSlots":1},"@symbol_278":{"entryPoint":1866,"id":278,"parameterSlots":0,"returnSlots":1},"@toString_1702":{"entryPoint":4208,"id":1702,"parameterSlots":1,"returnSlots":1},"@tokenURI_317":{"entryPoint":2132,"id":317,"parameterSlots":1,"returnSlots":1},"@transferFrom_449":{"entryPoint":1421,"id":449,"parameterSlots":3,"returnSlots":0},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":6703,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":6143,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":6421,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":5631,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4_fromMemory":{"entryPoint":8799,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":6769,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":5962,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":6311,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":6946,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":6228,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":6815,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":6442,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":6164,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":5652,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":8820,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":5983,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":6078,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":5709,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":8666,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":5838,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":7809,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack":{"entryPoint":7477,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack":{"entryPoint":8373,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack":{"entryPoint":7973,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack":{"entryPoint":8119,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack":{"entryPoint":8227,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack":{"entryPoint":7731,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack":{"entryPoint":7585,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack":{"entryPoint":7185,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack":{"entryPoint":7331,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":6356,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":7858,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":6093,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":8723,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":5724,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5895,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7512,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8408,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8008,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8154,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8262,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7766,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7620,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7220,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7366,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":6371,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":6612,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":5544,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":6639,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":8638,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":5751,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":8649,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":5762,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":7798,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":8586,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":8534,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":6060,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":5697,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":5564,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":6028,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":5929,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory_with_cleanup":{"entryPoint":6688,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":5779,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":7057,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":6563,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x11":{"entryPoint":8487,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":8440,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":7010,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":6516,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":6506,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":6511,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":5559,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":5554,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":5821,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af":{"entryPoint":7398,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e":{"entryPoint":8294,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48":{"entryPoint":7894,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4":{"entryPoint":8040,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05":{"entryPoint":8186,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159":{"entryPoint":7652,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f":{"entryPoint":7544,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942":{"entryPoint":7106,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83":{"entryPoint":7252,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":6120,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":6398,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":5608,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":5939,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:23733:14","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:14","statements":[{"nodeType":"YulAssignment","src":"57:19:14","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:14","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:14"},"nodeType":"YulFunctionCall","src":"67:9:14"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:14"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:14","type":""}],"src":"7:75:14"},{"body":{"nodeType":"YulBlock","src":"177:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:14"},"nodeType":"YulFunctionCall","src":"187:12:14"},"nodeType":"YulExpressionStatement","src":"187:12:14"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:14"},{"body":{"nodeType":"YulBlock","src":"300:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:14"},"nodeType":"YulFunctionCall","src":"310:12:14"},"nodeType":"YulExpressionStatement","src":"310:12:14"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:14"},{"body":{"nodeType":"YulBlock","src":"378:105:14","statements":[{"nodeType":"YulAssignment","src":"388:89:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"403:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"410:66:14","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"399:3:14"},"nodeType":"YulFunctionCall","src":"399:78:14"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"388:7:14"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"360:5:14","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"370:7:14","type":""}],"src":"334:149:14"},{"body":{"nodeType":"YulBlock","src":"531:78:14","statements":[{"body":{"nodeType":"YulBlock","src":"587:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"596:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"599:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"589:6:14"},"nodeType":"YulFunctionCall","src":"589:12:14"},"nodeType":"YulExpressionStatement","src":"589:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"554:5:14"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"578:5:14"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"561:16:14"},"nodeType":"YulFunctionCall","src":"561:23:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"551:2:14"},"nodeType":"YulFunctionCall","src":"551:34:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"544:6:14"},"nodeType":"YulFunctionCall","src":"544:42:14"},"nodeType":"YulIf","src":"541:62:14"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"524:5:14","type":""}],"src":"489:120:14"},{"body":{"nodeType":"YulBlock","src":"666:86:14","statements":[{"nodeType":"YulAssignment","src":"676:29:14","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"698:6:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"685:12:14"},"nodeType":"YulFunctionCall","src":"685:20:14"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:14"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"740:5:14"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"714:25:14"},"nodeType":"YulFunctionCall","src":"714:32:14"},"nodeType":"YulExpressionStatement","src":"714:32:14"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"644:6:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"652:3:14","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"660:5:14","type":""}],"src":"615:137:14"},{"body":{"nodeType":"YulBlock","src":"823:262:14","statements":[{"body":{"nodeType":"YulBlock","src":"869:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"871:77:14"},"nodeType":"YulFunctionCall","src":"871:79:14"},"nodeType":"YulExpressionStatement","src":"871:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"844:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"840:3:14"},"nodeType":"YulFunctionCall","src":"840:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"865:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"836:3:14"},"nodeType":"YulFunctionCall","src":"836:32:14"},"nodeType":"YulIf","src":"833:119:14"},{"nodeType":"YulBlock","src":"962:116:14","statements":[{"nodeType":"YulVariableDeclaration","src":"977:15:14","value":{"kind":"number","nodeType":"YulLiteral","src":"991:1:14","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"981:6:14","type":""}]},{"nodeType":"YulAssignment","src":"1006:62:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1040:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"1051:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1036:3:14"},"nodeType":"YulFunctionCall","src":"1036:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1060:7:14"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"1016:19:14"},"nodeType":"YulFunctionCall","src":"1016:52:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1006:6:14"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"793:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"804:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"816:6:14","type":""}],"src":"758:327:14"},{"body":{"nodeType":"YulBlock","src":"1133:48:14","statements":[{"nodeType":"YulAssignment","src":"1143:32:14","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1161:6:14"},"nodeType":"YulFunctionCall","src":"1161:13:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1154:6:14"},"nodeType":"YulFunctionCall","src":"1154:21:14"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1143:7:14"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1115:5:14","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1125:7:14","type":""}],"src":"1091:90:14"},{"body":{"nodeType":"YulBlock","src":"1246:50:14","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1263:3:14"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1283:5:14"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"1268:14:14"},"nodeType":"YulFunctionCall","src":"1268:21:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1256:6:14"},"nodeType":"YulFunctionCall","src":"1256:34:14"},"nodeType":"YulExpressionStatement","src":"1256:34:14"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1234:5:14","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1241:3:14","type":""}],"src":"1187:109:14"},{"body":{"nodeType":"YulBlock","src":"1394:118:14","statements":[{"nodeType":"YulAssignment","src":"1404:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1416:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"1427:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:14"},"nodeType":"YulFunctionCall","src":"1412:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1404:4:14"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1478:6:14"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1491:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"1502:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1487:3:14"},"nodeType":"YulFunctionCall","src":"1487:17:14"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"1440:37:14"},"nodeType":"YulFunctionCall","src":"1440:65:14"},"nodeType":"YulExpressionStatement","src":"1440:65:14"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1378:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1389:4:14","type":""}],"src":"1302:210:14"},{"body":{"nodeType":"YulBlock","src":"1577:40:14","statements":[{"nodeType":"YulAssignment","src":"1588:22:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1604:5:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1598:5:14"},"nodeType":"YulFunctionCall","src":"1598:12:14"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1588:6:14"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1560:5:14","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1570:6:14","type":""}],"src":"1518:99:14"},{"body":{"nodeType":"YulBlock","src":"1719:73:14","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1736:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"1741:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1729:6:14"},"nodeType":"YulFunctionCall","src":"1729:19:14"},"nodeType":"YulExpressionStatement","src":"1729:19:14"},{"nodeType":"YulAssignment","src":"1757:29:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1776:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"1781:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1772:3:14"},"nodeType":"YulFunctionCall","src":"1772:14:14"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"1757:11:14"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1691:3:14","type":""},{"name":"length","nodeType":"YulTypedName","src":"1696:6:14","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"1707:11:14","type":""}],"src":"1623:169:14"},{"body":{"nodeType":"YulBlock","src":"1860:184:14","statements":[{"nodeType":"YulVariableDeclaration","src":"1870:10:14","value":{"kind":"number","nodeType":"YulLiteral","src":"1879:1:14","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1874:1:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"1939:63:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1964:3:14"},{"name":"i","nodeType":"YulIdentifier","src":"1969:1:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1960:3:14"},"nodeType":"YulFunctionCall","src":"1960:11:14"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1983:3:14"},{"name":"i","nodeType":"YulIdentifier","src":"1988:1:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1979:3:14"},"nodeType":"YulFunctionCall","src":"1979:11:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1973:5:14"},"nodeType":"YulFunctionCall","src":"1973:18:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1953:6:14"},"nodeType":"YulFunctionCall","src":"1953:39:14"},"nodeType":"YulExpressionStatement","src":"1953:39:14"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1900:1:14"},{"name":"length","nodeType":"YulIdentifier","src":"1903:6:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1897:2:14"},"nodeType":"YulFunctionCall","src":"1897:13:14"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1911:19:14","statements":[{"nodeType":"YulAssignment","src":"1913:15:14","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1922:1:14"},{"kind":"number","nodeType":"YulLiteral","src":"1925:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1918:3:14"},"nodeType":"YulFunctionCall","src":"1918:10:14"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1913:1:14"}]}]},"pre":{"nodeType":"YulBlock","src":"1893:3:14","statements":[]},"src":"1889:113:14"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2022:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"2027:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2018:3:14"},"nodeType":"YulFunctionCall","src":"2018:16:14"},{"kind":"number","nodeType":"YulLiteral","src":"2036:1:14","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2011:6:14"},"nodeType":"YulFunctionCall","src":"2011:27:14"},"nodeType":"YulExpressionStatement","src":"2011:27:14"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1842:3:14","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1847:3:14","type":""},{"name":"length","nodeType":"YulTypedName","src":"1852:6:14","type":""}],"src":"1798:246:14"},{"body":{"nodeType":"YulBlock","src":"2098:54:14","statements":[{"nodeType":"YulAssignment","src":"2108:38:14","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2126:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"2133:2:14","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2122:3:14"},"nodeType":"YulFunctionCall","src":"2122:14:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2142:2:14","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2138:3:14"},"nodeType":"YulFunctionCall","src":"2138:7:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2118:3:14"},"nodeType":"YulFunctionCall","src":"2118:28:14"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"2108:6:14"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2081:5:14","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"2091:6:14","type":""}],"src":"2050:102:14"},{"body":{"nodeType":"YulBlock","src":"2250:285:14","statements":[{"nodeType":"YulVariableDeclaration","src":"2260:53:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2307:5:14"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"2274:32:14"},"nodeType":"YulFunctionCall","src":"2274:39:14"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2264:6:14","type":""}]},{"nodeType":"YulAssignment","src":"2322:78:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2388:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"2393:6:14"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2329:58:14"},"nodeType":"YulFunctionCall","src":"2329:71:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2322:3:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2448:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"2455:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2444:3:14"},"nodeType":"YulFunctionCall","src":"2444:16:14"},{"name":"pos","nodeType":"YulIdentifier","src":"2462:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"2467:6:14"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"2409:34:14"},"nodeType":"YulFunctionCall","src":"2409:65:14"},"nodeType":"YulExpressionStatement","src":"2409:65:14"},{"nodeType":"YulAssignment","src":"2483:46:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2494:3:14"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2521:6:14"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2499:21:14"},"nodeType":"YulFunctionCall","src":"2499:29:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2490:3:14"},"nodeType":"YulFunctionCall","src":"2490:39:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2483:3:14"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2231:5:14","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2238:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2246:3:14","type":""}],"src":"2158:377:14"},{"body":{"nodeType":"YulBlock","src":"2659:195:14","statements":[{"nodeType":"YulAssignment","src":"2669:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2681:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"2692:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2677:3:14"},"nodeType":"YulFunctionCall","src":"2677:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2669:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2716:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"2727:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2712:3:14"},"nodeType":"YulFunctionCall","src":"2712:17:14"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"2735:4:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"2741:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2731:3:14"},"nodeType":"YulFunctionCall","src":"2731:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2705:6:14"},"nodeType":"YulFunctionCall","src":"2705:47:14"},"nodeType":"YulExpressionStatement","src":"2705:47:14"},{"nodeType":"YulAssignment","src":"2761:86:14","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2833:6:14"},{"name":"tail","nodeType":"YulIdentifier","src":"2842:4:14"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2769:63:14"},"nodeType":"YulFunctionCall","src":"2769:78:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2761:4:14"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2631:9:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2643:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2654:4:14","type":""}],"src":"2541:313:14"},{"body":{"nodeType":"YulBlock","src":"2905:32:14","statements":[{"nodeType":"YulAssignment","src":"2915:16:14","value":{"name":"value","nodeType":"YulIdentifier","src":"2926:5:14"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2915:7:14"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2887:5:14","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2897:7:14","type":""}],"src":"2860:77:14"},{"body":{"nodeType":"YulBlock","src":"2986:79:14","statements":[{"body":{"nodeType":"YulBlock","src":"3043:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3052:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3055:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3045:6:14"},"nodeType":"YulFunctionCall","src":"3045:12:14"},"nodeType":"YulExpressionStatement","src":"3045:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3009:5:14"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3034:5:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3016:17:14"},"nodeType":"YulFunctionCall","src":"3016:24:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3006:2:14"},"nodeType":"YulFunctionCall","src":"3006:35:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2999:6:14"},"nodeType":"YulFunctionCall","src":"2999:43:14"},"nodeType":"YulIf","src":"2996:63:14"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2979:5:14","type":""}],"src":"2943:122:14"},{"body":{"nodeType":"YulBlock","src":"3123:87:14","statements":[{"nodeType":"YulAssignment","src":"3133:29:14","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3155:6:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3142:12:14"},"nodeType":"YulFunctionCall","src":"3142:20:14"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3133:5:14"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3198:5:14"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"3171:26:14"},"nodeType":"YulFunctionCall","src":"3171:33:14"},"nodeType":"YulExpressionStatement","src":"3171:33:14"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3101:6:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"3109:3:14","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3117:5:14","type":""}],"src":"3071:139:14"},{"body":{"nodeType":"YulBlock","src":"3282:263:14","statements":[{"body":{"nodeType":"YulBlock","src":"3328:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3330:77:14"},"nodeType":"YulFunctionCall","src":"3330:79:14"},"nodeType":"YulExpressionStatement","src":"3330:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3303:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"3312:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3299:3:14"},"nodeType":"YulFunctionCall","src":"3299:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"3324:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3295:3:14"},"nodeType":"YulFunctionCall","src":"3295:32:14"},"nodeType":"YulIf","src":"3292:119:14"},{"nodeType":"YulBlock","src":"3421:117:14","statements":[{"nodeType":"YulVariableDeclaration","src":"3436:15:14","value":{"kind":"number","nodeType":"YulLiteral","src":"3450:1:14","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3440:6:14","type":""}]},{"nodeType":"YulAssignment","src":"3465:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3500:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"3511:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3496:3:14"},"nodeType":"YulFunctionCall","src":"3496:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3520:7:14"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3475:20:14"},"nodeType":"YulFunctionCall","src":"3475:53:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3465:6:14"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3252:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3263:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3275:6:14","type":""}],"src":"3216:329:14"},{"body":{"nodeType":"YulBlock","src":"3596:81:14","statements":[{"nodeType":"YulAssignment","src":"3606:65:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3621:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"3628:42:14","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3617:3:14"},"nodeType":"YulFunctionCall","src":"3617:54:14"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3606:7:14"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3578:5:14","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3588:7:14","type":""}],"src":"3551:126:14"},{"body":{"nodeType":"YulBlock","src":"3728:51:14","statements":[{"nodeType":"YulAssignment","src":"3738:35:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3767:5:14"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"3749:17:14"},"nodeType":"YulFunctionCall","src":"3749:24:14"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3738:7:14"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3710:5:14","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3720:7:14","type":""}],"src":"3683:96:14"},{"body":{"nodeType":"YulBlock","src":"3850:53:14","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3867:3:14"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3890:5:14"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"3872:17:14"},"nodeType":"YulFunctionCall","src":"3872:24:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3860:6:14"},"nodeType":"YulFunctionCall","src":"3860:37:14"},"nodeType":"YulExpressionStatement","src":"3860:37:14"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3838:5:14","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3845:3:14","type":""}],"src":"3785:118:14"},{"body":{"nodeType":"YulBlock","src":"4007:124:14","statements":[{"nodeType":"YulAssignment","src":"4017:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4029:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"4040:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4025:3:14"},"nodeType":"YulFunctionCall","src":"4025:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4017:4:14"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4097:6:14"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4110:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"4121:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4106:3:14"},"nodeType":"YulFunctionCall","src":"4106:17:14"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"4053:43:14"},"nodeType":"YulFunctionCall","src":"4053:71:14"},"nodeType":"YulExpressionStatement","src":"4053:71:14"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3979:9:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3991:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4002:4:14","type":""}],"src":"3909:222:14"},{"body":{"nodeType":"YulBlock","src":"4180:79:14","statements":[{"body":{"nodeType":"YulBlock","src":"4237:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4246:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4249:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4239:6:14"},"nodeType":"YulFunctionCall","src":"4239:12:14"},"nodeType":"YulExpressionStatement","src":"4239:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4203:5:14"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4228:5:14"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"4210:17:14"},"nodeType":"YulFunctionCall","src":"4210:24:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4200:2:14"},"nodeType":"YulFunctionCall","src":"4200:35:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4193:6:14"},"nodeType":"YulFunctionCall","src":"4193:43:14"},"nodeType":"YulIf","src":"4190:63:14"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4173:5:14","type":""}],"src":"4137:122:14"},{"body":{"nodeType":"YulBlock","src":"4317:87:14","statements":[{"nodeType":"YulAssignment","src":"4327:29:14","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4349:6:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4336:12:14"},"nodeType":"YulFunctionCall","src":"4336:20:14"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4327:5:14"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4392:5:14"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"4365:26:14"},"nodeType":"YulFunctionCall","src":"4365:33:14"},"nodeType":"YulExpressionStatement","src":"4365:33:14"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4295:6:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"4303:3:14","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"4311:5:14","type":""}],"src":"4265:139:14"},{"body":{"nodeType":"YulBlock","src":"4493:391:14","statements":[{"body":{"nodeType":"YulBlock","src":"4539:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4541:77:14"},"nodeType":"YulFunctionCall","src":"4541:79:14"},"nodeType":"YulExpressionStatement","src":"4541:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4514:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"4523:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4510:3:14"},"nodeType":"YulFunctionCall","src":"4510:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"4535:2:14","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4506:3:14"},"nodeType":"YulFunctionCall","src":"4506:32:14"},"nodeType":"YulIf","src":"4503:119:14"},{"nodeType":"YulBlock","src":"4632:117:14","statements":[{"nodeType":"YulVariableDeclaration","src":"4647:15:14","value":{"kind":"number","nodeType":"YulLiteral","src":"4661:1:14","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4651:6:14","type":""}]},{"nodeType":"YulAssignment","src":"4676:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4711:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"4722:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4707:3:14"},"nodeType":"YulFunctionCall","src":"4707:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4731:7:14"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4686:20:14"},"nodeType":"YulFunctionCall","src":"4686:53:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4676:6:14"}]}]},{"nodeType":"YulBlock","src":"4759:118:14","statements":[{"nodeType":"YulVariableDeclaration","src":"4774:16:14","value":{"kind":"number","nodeType":"YulLiteral","src":"4788:2:14","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4778:6:14","type":""}]},{"nodeType":"YulAssignment","src":"4804:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4839:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"4850:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4835:3:14"},"nodeType":"YulFunctionCall","src":"4835:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4859:7:14"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4814:20:14"},"nodeType":"YulFunctionCall","src":"4814:53:14"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4804:6:14"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4455:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4466:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4478:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4486:6:14","type":""}],"src":"4410:474:14"},{"body":{"nodeType":"YulBlock","src":"4990:519:14","statements":[{"body":{"nodeType":"YulBlock","src":"5036:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5038:77:14"},"nodeType":"YulFunctionCall","src":"5038:79:14"},"nodeType":"YulExpressionStatement","src":"5038:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5011:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"5020:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5007:3:14"},"nodeType":"YulFunctionCall","src":"5007:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"5032:2:14","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5003:3:14"},"nodeType":"YulFunctionCall","src":"5003:32:14"},"nodeType":"YulIf","src":"5000:119:14"},{"nodeType":"YulBlock","src":"5129:117:14","statements":[{"nodeType":"YulVariableDeclaration","src":"5144:15:14","value":{"kind":"number","nodeType":"YulLiteral","src":"5158:1:14","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5148:6:14","type":""}]},{"nodeType":"YulAssignment","src":"5173:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5208:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"5219:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5204:3:14"},"nodeType":"YulFunctionCall","src":"5204:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5228:7:14"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5183:20:14"},"nodeType":"YulFunctionCall","src":"5183:53:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5173:6:14"}]}]},{"nodeType":"YulBlock","src":"5256:118:14","statements":[{"nodeType":"YulVariableDeclaration","src":"5271:16:14","value":{"kind":"number","nodeType":"YulLiteral","src":"5285:2:14","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5275:6:14","type":""}]},{"nodeType":"YulAssignment","src":"5301:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5336:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"5347:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5332:3:14"},"nodeType":"YulFunctionCall","src":"5332:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5356:7:14"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5311:20:14"},"nodeType":"YulFunctionCall","src":"5311:53:14"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5301:6:14"}]}]},{"nodeType":"YulBlock","src":"5384:118:14","statements":[{"nodeType":"YulVariableDeclaration","src":"5399:16:14","value":{"kind":"number","nodeType":"YulLiteral","src":"5413:2:14","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5403:6:14","type":""}]},{"nodeType":"YulAssignment","src":"5429:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5464:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"5475:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5460:3:14"},"nodeType":"YulFunctionCall","src":"5460:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5484:7:14"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5439:20:14"},"nodeType":"YulFunctionCall","src":"5439:53:14"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5429:6:14"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4944:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4955:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4967:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4975:6:14","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4983:6:14","type":""}],"src":"4890:619:14"},{"body":{"nodeType":"YulBlock","src":"5581:263:14","statements":[{"body":{"nodeType":"YulBlock","src":"5627:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5629:77:14"},"nodeType":"YulFunctionCall","src":"5629:79:14"},"nodeType":"YulExpressionStatement","src":"5629:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5602:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"5611:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5598:3:14"},"nodeType":"YulFunctionCall","src":"5598:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"5623:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5594:3:14"},"nodeType":"YulFunctionCall","src":"5594:32:14"},"nodeType":"YulIf","src":"5591:119:14"},{"nodeType":"YulBlock","src":"5720:117:14","statements":[{"nodeType":"YulVariableDeclaration","src":"5735:15:14","value":{"kind":"number","nodeType":"YulLiteral","src":"5749:1:14","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5739:6:14","type":""}]},{"nodeType":"YulAssignment","src":"5764:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5799:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"5810:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5795:3:14"},"nodeType":"YulFunctionCall","src":"5795:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5819:7:14"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5774:20:14"},"nodeType":"YulFunctionCall","src":"5774:53:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5764:6:14"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5551:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5562:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5574:6:14","type":""}],"src":"5515:329:14"},{"body":{"nodeType":"YulBlock","src":"5915:53:14","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5932:3:14"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5955:5:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"5937:17:14"},"nodeType":"YulFunctionCall","src":"5937:24:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5925:6:14"},"nodeType":"YulFunctionCall","src":"5925:37:14"},"nodeType":"YulExpressionStatement","src":"5925:37:14"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5903:5:14","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5910:3:14","type":""}],"src":"5850:118:14"},{"body":{"nodeType":"YulBlock","src":"6072:124:14","statements":[{"nodeType":"YulAssignment","src":"6082:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6094:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"6105:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6090:3:14"},"nodeType":"YulFunctionCall","src":"6090:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6082:4:14"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6162:6:14"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6175:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"6186:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6171:3:14"},"nodeType":"YulFunctionCall","src":"6171:17:14"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"6118:43:14"},"nodeType":"YulFunctionCall","src":"6118:71:14"},"nodeType":"YulExpressionStatement","src":"6118:71:14"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6044:9:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6056:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6067:4:14","type":""}],"src":"5974:222:14"},{"body":{"nodeType":"YulBlock","src":"6242:76:14","statements":[{"body":{"nodeType":"YulBlock","src":"6296:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6305:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6308:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6298:6:14"},"nodeType":"YulFunctionCall","src":"6298:12:14"},"nodeType":"YulExpressionStatement","src":"6298:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6265:5:14"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6287:5:14"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"6272:14:14"},"nodeType":"YulFunctionCall","src":"6272:21:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6262:2:14"},"nodeType":"YulFunctionCall","src":"6262:32:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6255:6:14"},"nodeType":"YulFunctionCall","src":"6255:40:14"},"nodeType":"YulIf","src":"6252:60:14"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6235:5:14","type":""}],"src":"6202:116:14"},{"body":{"nodeType":"YulBlock","src":"6373:84:14","statements":[{"nodeType":"YulAssignment","src":"6383:29:14","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6405:6:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6392:12:14"},"nodeType":"YulFunctionCall","src":"6392:20:14"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"6383:5:14"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6445:5:14"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"6421:23:14"},"nodeType":"YulFunctionCall","src":"6421:30:14"},"nodeType":"YulExpressionStatement","src":"6421:30:14"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"6351:6:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"6359:3:14","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"6367:5:14","type":""}],"src":"6324:133:14"},{"body":{"nodeType":"YulBlock","src":"6543:388:14","statements":[{"body":{"nodeType":"YulBlock","src":"6589:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6591:77:14"},"nodeType":"YulFunctionCall","src":"6591:79:14"},"nodeType":"YulExpressionStatement","src":"6591:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6564:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"6573:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6560:3:14"},"nodeType":"YulFunctionCall","src":"6560:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"6585:2:14","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6556:3:14"},"nodeType":"YulFunctionCall","src":"6556:32:14"},"nodeType":"YulIf","src":"6553:119:14"},{"nodeType":"YulBlock","src":"6682:117:14","statements":[{"nodeType":"YulVariableDeclaration","src":"6697:15:14","value":{"kind":"number","nodeType":"YulLiteral","src":"6711:1:14","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6701:6:14","type":""}]},{"nodeType":"YulAssignment","src":"6726:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6761:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"6772:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6757:3:14"},"nodeType":"YulFunctionCall","src":"6757:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6781:7:14"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"6736:20:14"},"nodeType":"YulFunctionCall","src":"6736:53:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6726:6:14"}]}]},{"nodeType":"YulBlock","src":"6809:115:14","statements":[{"nodeType":"YulVariableDeclaration","src":"6824:16:14","value":{"kind":"number","nodeType":"YulLiteral","src":"6838:2:14","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6828:6:14","type":""}]},{"nodeType":"YulAssignment","src":"6854:60:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6886:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"6897:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6882:3:14"},"nodeType":"YulFunctionCall","src":"6882:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6906:7:14"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"6864:17:14"},"nodeType":"YulFunctionCall","src":"6864:50:14"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6854:6:14"}]}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6505:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6516:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6528:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6536:6:14","type":""}],"src":"6463:468:14"},{"body":{"nodeType":"YulBlock","src":"7026:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7043:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7046:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7036:6:14"},"nodeType":"YulFunctionCall","src":"7036:12:14"},"nodeType":"YulExpressionStatement","src":"7036:12:14"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"6937:117:14"},{"body":{"nodeType":"YulBlock","src":"7149:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7166:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7169:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7159:6:14"},"nodeType":"YulFunctionCall","src":"7159:12:14"},"nodeType":"YulExpressionStatement","src":"7159:12:14"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"7060:117:14"},{"body":{"nodeType":"YulBlock","src":"7211:152:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7228:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7231:77:14","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7221:6:14"},"nodeType":"YulFunctionCall","src":"7221:88:14"},"nodeType":"YulExpressionStatement","src":"7221:88:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7325:1:14","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"7328:4:14","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7318:6:14"},"nodeType":"YulFunctionCall","src":"7318:15:14"},"nodeType":"YulExpressionStatement","src":"7318:15:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7349:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7352:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7342:6:14"},"nodeType":"YulFunctionCall","src":"7342:15:14"},"nodeType":"YulExpressionStatement","src":"7342:15:14"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"7183:180:14"},{"body":{"nodeType":"YulBlock","src":"7412:238:14","statements":[{"nodeType":"YulVariableDeclaration","src":"7422:58:14","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7444:6:14"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"7474:4:14"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"7452:21:14"},"nodeType":"YulFunctionCall","src":"7452:27:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7440:3:14"},"nodeType":"YulFunctionCall","src":"7440:40:14"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"7426:10:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"7591:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7593:16:14"},"nodeType":"YulFunctionCall","src":"7593:18:14"},"nodeType":"YulExpressionStatement","src":"7593:18:14"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7534:10:14"},{"kind":"number","nodeType":"YulLiteral","src":"7546:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7531:2:14"},"nodeType":"YulFunctionCall","src":"7531:34:14"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7570:10:14"},{"name":"memPtr","nodeType":"YulIdentifier","src":"7582:6:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7567:2:14"},"nodeType":"YulFunctionCall","src":"7567:22:14"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7528:2:14"},"nodeType":"YulFunctionCall","src":"7528:62:14"},"nodeType":"YulIf","src":"7525:88:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7629:2:14","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7633:10:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7622:6:14"},"nodeType":"YulFunctionCall","src":"7622:22:14"},"nodeType":"YulExpressionStatement","src":"7622:22:14"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7398:6:14","type":""},{"name":"size","nodeType":"YulTypedName","src":"7406:4:14","type":""}],"src":"7369:281:14"},{"body":{"nodeType":"YulBlock","src":"7697:88:14","statements":[{"nodeType":"YulAssignment","src":"7707:30:14","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"7717:18:14"},"nodeType":"YulFunctionCall","src":"7717:20:14"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7707:6:14"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7766:6:14"},{"name":"size","nodeType":"YulIdentifier","src":"7774:4:14"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"7746:19:14"},"nodeType":"YulFunctionCall","src":"7746:33:14"},"nodeType":"YulExpressionStatement","src":"7746:33:14"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"7681:4:14","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"7690:6:14","type":""}],"src":"7656:129:14"},{"body":{"nodeType":"YulBlock","src":"7857:241:14","statements":[{"body":{"nodeType":"YulBlock","src":"7962:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7964:16:14"},"nodeType":"YulFunctionCall","src":"7964:18:14"},"nodeType":"YulExpressionStatement","src":"7964:18:14"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7934:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"7942:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7931:2:14"},"nodeType":"YulFunctionCall","src":"7931:30:14"},"nodeType":"YulIf","src":"7928:56:14"},{"nodeType":"YulAssignment","src":"7994:37:14","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8024:6:14"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"8002:21:14"},"nodeType":"YulFunctionCall","src":"8002:29:14"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"7994:4:14"}]},{"nodeType":"YulAssignment","src":"8068:23:14","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"8080:4:14"},{"kind":"number","nodeType":"YulLiteral","src":"8086:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8076:3:14"},"nodeType":"YulFunctionCall","src":"8076:15:14"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"8068:4:14"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"7841:6:14","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"7852:4:14","type":""}],"src":"7791:307:14"},{"body":{"nodeType":"YulBlock","src":"8168:82:14","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8191:3:14"},{"name":"src","nodeType":"YulIdentifier","src":"8196:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"8201:6:14"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"8178:12:14"},"nodeType":"YulFunctionCall","src":"8178:30:14"},"nodeType":"YulExpressionStatement","src":"8178:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8228:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"8233:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8224:3:14"},"nodeType":"YulFunctionCall","src":"8224:16:14"},{"kind":"number","nodeType":"YulLiteral","src":"8242:1:14","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8217:6:14"},"nodeType":"YulFunctionCall","src":"8217:27:14"},"nodeType":"YulExpressionStatement","src":"8217:27:14"}]},"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"8150:3:14","type":""},{"name":"dst","nodeType":"YulTypedName","src":"8155:3:14","type":""},{"name":"length","nodeType":"YulTypedName","src":"8160:6:14","type":""}],"src":"8104:146:14"},{"body":{"nodeType":"YulBlock","src":"8339:340:14","statements":[{"nodeType":"YulAssignment","src":"8349:74:14","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8415:6:14"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"8374:40:14"},"nodeType":"YulFunctionCall","src":"8374:48:14"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"8358:15:14"},"nodeType":"YulFunctionCall","src":"8358:65:14"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"8349:5:14"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"8439:5:14"},{"name":"length","nodeType":"YulIdentifier","src":"8446:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8432:6:14"},"nodeType":"YulFunctionCall","src":"8432:21:14"},"nodeType":"YulExpressionStatement","src":"8432:21:14"},{"nodeType":"YulVariableDeclaration","src":"8462:27:14","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"8477:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"8484:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8473:3:14"},"nodeType":"YulFunctionCall","src":"8473:16:14"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"8466:3:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"8527:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"8529:77:14"},"nodeType":"YulFunctionCall","src":"8529:79:14"},"nodeType":"YulExpressionStatement","src":"8529:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8508:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"8513:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8504:3:14"},"nodeType":"YulFunctionCall","src":"8504:16:14"},{"name":"end","nodeType":"YulIdentifier","src":"8522:3:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8501:2:14"},"nodeType":"YulFunctionCall","src":"8501:25:14"},"nodeType":"YulIf","src":"8498:112:14"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8656:3:14"},{"name":"dst","nodeType":"YulIdentifier","src":"8661:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"8666:6:14"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"8619:36:14"},"nodeType":"YulFunctionCall","src":"8619:54:14"},"nodeType":"YulExpressionStatement","src":"8619:54:14"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"8312:3:14","type":""},{"name":"length","nodeType":"YulTypedName","src":"8317:6:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"8325:3:14","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"8333:5:14","type":""}],"src":"8256:423:14"},{"body":{"nodeType":"YulBlock","src":"8759:277:14","statements":[{"body":{"nodeType":"YulBlock","src":"8808:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"8810:77:14"},"nodeType":"YulFunctionCall","src":"8810:79:14"},"nodeType":"YulExpressionStatement","src":"8810:79:14"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8787:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"8795:4:14","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8783:3:14"},"nodeType":"YulFunctionCall","src":"8783:17:14"},{"name":"end","nodeType":"YulIdentifier","src":"8802:3:14"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8779:3:14"},"nodeType":"YulFunctionCall","src":"8779:27:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8772:6:14"},"nodeType":"YulFunctionCall","src":"8772:35:14"},"nodeType":"YulIf","src":"8769:122:14"},{"nodeType":"YulVariableDeclaration","src":"8900:34:14","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8927:6:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8914:12:14"},"nodeType":"YulFunctionCall","src":"8914:20:14"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8904:6:14","type":""}]},{"nodeType":"YulAssignment","src":"8943:87:14","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9003:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"9011:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8999:3:14"},"nodeType":"YulFunctionCall","src":"8999:17:14"},{"name":"length","nodeType":"YulIdentifier","src":"9018:6:14"},{"name":"end","nodeType":"YulIdentifier","src":"9026:3:14"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"8952:46:14"},"nodeType":"YulFunctionCall","src":"8952:78:14"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"8943:5:14"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8737:6:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"8745:3:14","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"8753:5:14","type":""}],"src":"8698:338:14"},{"body":{"nodeType":"YulBlock","src":"9168:817:14","statements":[{"body":{"nodeType":"YulBlock","src":"9215:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"9217:77:14"},"nodeType":"YulFunctionCall","src":"9217:79:14"},"nodeType":"YulExpressionStatement","src":"9217:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9189:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"9198:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9185:3:14"},"nodeType":"YulFunctionCall","src":"9185:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"9210:3:14","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9181:3:14"},"nodeType":"YulFunctionCall","src":"9181:33:14"},"nodeType":"YulIf","src":"9178:120:14"},{"nodeType":"YulBlock","src":"9308:117:14","statements":[{"nodeType":"YulVariableDeclaration","src":"9323:15:14","value":{"kind":"number","nodeType":"YulLiteral","src":"9337:1:14","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9327:6:14","type":""}]},{"nodeType":"YulAssignment","src":"9352:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9387:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"9398:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9383:3:14"},"nodeType":"YulFunctionCall","src":"9383:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9407:7:14"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9362:20:14"},"nodeType":"YulFunctionCall","src":"9362:53:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9352:6:14"}]}]},{"nodeType":"YulBlock","src":"9435:118:14","statements":[{"nodeType":"YulVariableDeclaration","src":"9450:16:14","value":{"kind":"number","nodeType":"YulLiteral","src":"9464:2:14","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9454:6:14","type":""}]},{"nodeType":"YulAssignment","src":"9480:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9515:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"9526:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9511:3:14"},"nodeType":"YulFunctionCall","src":"9511:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9535:7:14"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9490:20:14"},"nodeType":"YulFunctionCall","src":"9490:53:14"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9480:6:14"}]}]},{"nodeType":"YulBlock","src":"9563:118:14","statements":[{"nodeType":"YulVariableDeclaration","src":"9578:16:14","value":{"kind":"number","nodeType":"YulLiteral","src":"9592:2:14","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9582:6:14","type":""}]},{"nodeType":"YulAssignment","src":"9608:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9643:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"9654:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9639:3:14"},"nodeType":"YulFunctionCall","src":"9639:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9663:7:14"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"9618:20:14"},"nodeType":"YulFunctionCall","src":"9618:53:14"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"9608:6:14"}]}]},{"nodeType":"YulBlock","src":"9691:287:14","statements":[{"nodeType":"YulVariableDeclaration","src":"9706:46:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9737:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"9748:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9733:3:14"},"nodeType":"YulFunctionCall","src":"9733:18:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9720:12:14"},"nodeType":"YulFunctionCall","src":"9720:32:14"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9710:6:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"9799:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"9801:77:14"},"nodeType":"YulFunctionCall","src":"9801:79:14"},"nodeType":"YulExpressionStatement","src":"9801:79:14"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9771:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"9779:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9768:2:14"},"nodeType":"YulFunctionCall","src":"9768:30:14"},"nodeType":"YulIf","src":"9765:117:14"},{"nodeType":"YulAssignment","src":"9896:72:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9940:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"9951:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9936:3:14"},"nodeType":"YulFunctionCall","src":"9936:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9960:7:14"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"9906:29:14"},"nodeType":"YulFunctionCall","src":"9906:62:14"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"9896:6:14"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9114:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9125:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9137:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9145:6:14","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9153:6:14","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9161:6:14","type":""}],"src":"9042:943:14"},{"body":{"nodeType":"YulBlock","src":"10074:391:14","statements":[{"body":{"nodeType":"YulBlock","src":"10120:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"10122:77:14"},"nodeType":"YulFunctionCall","src":"10122:79:14"},"nodeType":"YulExpressionStatement","src":"10122:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10095:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"10104:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10091:3:14"},"nodeType":"YulFunctionCall","src":"10091:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"10116:2:14","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10087:3:14"},"nodeType":"YulFunctionCall","src":"10087:32:14"},"nodeType":"YulIf","src":"10084:119:14"},{"nodeType":"YulBlock","src":"10213:117:14","statements":[{"nodeType":"YulVariableDeclaration","src":"10228:15:14","value":{"kind":"number","nodeType":"YulLiteral","src":"10242:1:14","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10232:6:14","type":""}]},{"nodeType":"YulAssignment","src":"10257:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10292:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"10303:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10288:3:14"},"nodeType":"YulFunctionCall","src":"10288:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10312:7:14"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"10267:20:14"},"nodeType":"YulFunctionCall","src":"10267:53:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10257:6:14"}]}]},{"nodeType":"YulBlock","src":"10340:118:14","statements":[{"nodeType":"YulVariableDeclaration","src":"10355:16:14","value":{"kind":"number","nodeType":"YulLiteral","src":"10369:2:14","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10359:6:14","type":""}]},{"nodeType":"YulAssignment","src":"10385:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10420:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"10431:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10416:3:14"},"nodeType":"YulFunctionCall","src":"10416:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10440:7:14"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"10395:20:14"},"nodeType":"YulFunctionCall","src":"10395:53:14"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10385:6:14"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10036:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10047:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10059:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10067:6:14","type":""}],"src":"9991:474:14"},{"body":{"nodeType":"YulBlock","src":"10499:152:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10516:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10519:77:14","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10509:6:14"},"nodeType":"YulFunctionCall","src":"10509:88:14"},"nodeType":"YulExpressionStatement","src":"10509:88:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10613:1:14","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10616:4:14","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10606:6:14"},"nodeType":"YulFunctionCall","src":"10606:15:14"},"nodeType":"YulExpressionStatement","src":"10606:15:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10637:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10640:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10630:6:14"},"nodeType":"YulFunctionCall","src":"10630:15:14"},"nodeType":"YulExpressionStatement","src":"10630:15:14"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"10471:180:14"},{"body":{"nodeType":"YulBlock","src":"10708:269:14","statements":[{"nodeType":"YulAssignment","src":"10718:22:14","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"10732:4:14"},{"kind":"number","nodeType":"YulLiteral","src":"10738:1:14","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"10728:3:14"},"nodeType":"YulFunctionCall","src":"10728:12:14"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"10718:6:14"}]},{"nodeType":"YulVariableDeclaration","src":"10749:38:14","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"10779:4:14"},{"kind":"number","nodeType":"YulLiteral","src":"10785:1:14","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10775:3:14"},"nodeType":"YulFunctionCall","src":"10775:12:14"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"10753:18:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"10826:51:14","statements":[{"nodeType":"YulAssignment","src":"10840:27:14","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10854:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"10862:4:14","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10850:3:14"},"nodeType":"YulFunctionCall","src":"10850:17:14"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"10840:6:14"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"10806:18:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10799:6:14"},"nodeType":"YulFunctionCall","src":"10799:26:14"},"nodeType":"YulIf","src":"10796:81:14"},{"body":{"nodeType":"YulBlock","src":"10929:42:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"10943:16:14"},"nodeType":"YulFunctionCall","src":"10943:18:14"},"nodeType":"YulExpressionStatement","src":"10943:18:14"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"10893:18:14"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10916:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"10924:2:14","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10913:2:14"},"nodeType":"YulFunctionCall","src":"10913:14:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10890:2:14"},"nodeType":"YulFunctionCall","src":"10890:38:14"},"nodeType":"YulIf","src":"10887:84:14"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"10692:4:14","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"10701:6:14","type":""}],"src":"10657:320:14"},{"body":{"nodeType":"YulBlock","src":"11089:114:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11111:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"11119:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11107:3:14"},"nodeType":"YulFunctionCall","src":"11107:14:14"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nodeType":"YulLiteral","src":"11123:34:14","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11100:6:14"},"nodeType":"YulFunctionCall","src":"11100:58:14"},"nodeType":"YulExpressionStatement","src":"11100:58:14"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11179:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"11187:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11175:3:14"},"nodeType":"YulFunctionCall","src":"11175:15:14"},{"hexValue":"72","kind":"string","nodeType":"YulLiteral","src":"11192:3:14","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11168:6:14"},"nodeType":"YulFunctionCall","src":"11168:28:14"},"nodeType":"YulExpressionStatement","src":"11168:28:14"}]},"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"11081:6:14","type":""}],"src":"10983:220:14"},{"body":{"nodeType":"YulBlock","src":"11355:220:14","statements":[{"nodeType":"YulAssignment","src":"11365:74:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11431:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"11436:2:14","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11372:58:14"},"nodeType":"YulFunctionCall","src":"11372:67:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11365:3:14"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11537:3:14"}],"functionName":{"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulIdentifier","src":"11448:88:14"},"nodeType":"YulFunctionCall","src":"11448:93:14"},"nodeType":"YulExpressionStatement","src":"11448:93:14"},{"nodeType":"YulAssignment","src":"11550:19:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11561:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"11566:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11557:3:14"},"nodeType":"YulFunctionCall","src":"11557:12:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11550:3:14"}]}]},"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11343:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11351:3:14","type":""}],"src":"11209:366:14"},{"body":{"nodeType":"YulBlock","src":"11752:248:14","statements":[{"nodeType":"YulAssignment","src":"11762:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11774:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"11785:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11770:3:14"},"nodeType":"YulFunctionCall","src":"11770:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11762:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11809:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"11820:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11805:3:14"},"nodeType":"YulFunctionCall","src":"11805:17:14"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11828:4:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"11834:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11824:3:14"},"nodeType":"YulFunctionCall","src":"11824:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11798:6:14"},"nodeType":"YulFunctionCall","src":"11798:47:14"},"nodeType":"YulExpressionStatement","src":"11798:47:14"},{"nodeType":"YulAssignment","src":"11854:139:14","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11988:4:14"}],"functionName":{"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11862:124:14"},"nodeType":"YulFunctionCall","src":"11862:131:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11854:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11732:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11747:4:14","type":""}],"src":"11581:419:14"},{"body":{"nodeType":"YulBlock","src":"12112:142:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12134:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"12142:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12130:3:14"},"nodeType":"YulFunctionCall","src":"12130:14:14"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f","kind":"string","nodeType":"YulLiteral","src":"12146:34:14","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12123:6:14"},"nodeType":"YulFunctionCall","src":"12123:58:14"},"nodeType":"YulExpressionStatement","src":"12123:58:14"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12202:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"12210:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12198:3:14"},"nodeType":"YulFunctionCall","src":"12198:15:14"},{"hexValue":"6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","kind":"string","nodeType":"YulLiteral","src":"12215:31:14","type":"","value":"ken owner or approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12191:6:14"},"nodeType":"YulFunctionCall","src":"12191:56:14"},"nodeType":"YulExpressionStatement","src":"12191:56:14"}]},"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12104:6:14","type":""}],"src":"12006:248:14"},{"body":{"nodeType":"YulBlock","src":"12406:220:14","statements":[{"nodeType":"YulAssignment","src":"12416:74:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12482:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"12487:2:14","type":"","value":"61"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12423:58:14"},"nodeType":"YulFunctionCall","src":"12423:67:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12416:3:14"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12588:3:14"}],"functionName":{"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulIdentifier","src":"12499:88:14"},"nodeType":"YulFunctionCall","src":"12499:93:14"},"nodeType":"YulExpressionStatement","src":"12499:93:14"},{"nodeType":"YulAssignment","src":"12601:19:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12612:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"12617:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12608:3:14"},"nodeType":"YulFunctionCall","src":"12608:12:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12601:3:14"}]}]},"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12394:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12402:3:14","type":""}],"src":"12260:366:14"},{"body":{"nodeType":"YulBlock","src":"12803:248:14","statements":[{"nodeType":"YulAssignment","src":"12813:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12825:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"12836:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12821:3:14"},"nodeType":"YulFunctionCall","src":"12821:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12813:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12860:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"12871:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12856:3:14"},"nodeType":"YulFunctionCall","src":"12856:17:14"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12879:4:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"12885:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12875:3:14"},"nodeType":"YulFunctionCall","src":"12875:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12849:6:14"},"nodeType":"YulFunctionCall","src":"12849:47:14"},"nodeType":"YulExpressionStatement","src":"12849:47:14"},{"nodeType":"YulAssignment","src":"12905:139:14","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13039:4:14"}],"functionName":{"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12913:124:14"},"nodeType":"YulFunctionCall","src":"12913:131:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12905:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12783:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12798:4:14","type":""}],"src":"12632:419:14"},{"body":{"nodeType":"YulBlock","src":"13163:126:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13185:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"13193:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13181:3:14"},"nodeType":"YulFunctionCall","src":"13181:14:14"},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65","kind":"string","nodeType":"YulLiteral","src":"13197:34:14","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13174:6:14"},"nodeType":"YulFunctionCall","src":"13174:58:14"},"nodeType":"YulExpressionStatement","src":"13174:58:14"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13253:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"13261:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13249:3:14"},"nodeType":"YulFunctionCall","src":"13249:15:14"},{"hexValue":"72206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"13266:15:14","type":"","value":"r or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13242:6:14"},"nodeType":"YulFunctionCall","src":"13242:40:14"},"nodeType":"YulExpressionStatement","src":"13242:40:14"}]},"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"13155:6:14","type":""}],"src":"13057:232:14"},{"body":{"nodeType":"YulBlock","src":"13441:220:14","statements":[{"nodeType":"YulAssignment","src":"13451:74:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13517:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"13522:2:14","type":"","value":"45"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13458:58:14"},"nodeType":"YulFunctionCall","src":"13458:67:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13451:3:14"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13623:3:14"}],"functionName":{"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulIdentifier","src":"13534:88:14"},"nodeType":"YulFunctionCall","src":"13534:93:14"},"nodeType":"YulExpressionStatement","src":"13534:93:14"},{"nodeType":"YulAssignment","src":"13636:19:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13647:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"13652:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13643:3:14"},"nodeType":"YulFunctionCall","src":"13643:12:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13636:3:14"}]}]},"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13429:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13437:3:14","type":""}],"src":"13295:366:14"},{"body":{"nodeType":"YulBlock","src":"13838:248:14","statements":[{"nodeType":"YulAssignment","src":"13848:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13860:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"13871:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13856:3:14"},"nodeType":"YulFunctionCall","src":"13856:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13848:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13895:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"13906:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13891:3:14"},"nodeType":"YulFunctionCall","src":"13891:17:14"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13914:4:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"13920:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13910:3:14"},"nodeType":"YulFunctionCall","src":"13910:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13884:6:14"},"nodeType":"YulFunctionCall","src":"13884:47:14"},"nodeType":"YulExpressionStatement","src":"13884:47:14"},{"nodeType":"YulAssignment","src":"13940:139:14","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14074:4:14"}],"functionName":{"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13948:124:14"},"nodeType":"YulFunctionCall","src":"13948:131:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13940:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13818:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13833:4:14","type":""}],"src":"13667:419:14"},{"body":{"nodeType":"YulBlock","src":"14198:68:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14220:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"14228:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14216:3:14"},"nodeType":"YulFunctionCall","src":"14216:14:14"},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","kind":"string","nodeType":"YulLiteral","src":"14232:26:14","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14209:6:14"},"nodeType":"YulFunctionCall","src":"14209:50:14"},"nodeType":"YulExpressionStatement","src":"14209:50:14"}]},"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"14190:6:14","type":""}],"src":"14092:174:14"},{"body":{"nodeType":"YulBlock","src":"14418:220:14","statements":[{"nodeType":"YulAssignment","src":"14428:74:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14494:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"14499:2:14","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14435:58:14"},"nodeType":"YulFunctionCall","src":"14435:67:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14428:3:14"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14600:3:14"}],"functionName":{"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulIdentifier","src":"14511:88:14"},"nodeType":"YulFunctionCall","src":"14511:93:14"},"nodeType":"YulExpressionStatement","src":"14511:93:14"},{"nodeType":"YulAssignment","src":"14613:19:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14624:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"14629:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14620:3:14"},"nodeType":"YulFunctionCall","src":"14620:12:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14613:3:14"}]}]},"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14406:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14414:3:14","type":""}],"src":"14272:366:14"},{"body":{"nodeType":"YulBlock","src":"14815:248:14","statements":[{"nodeType":"YulAssignment","src":"14825:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14837:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"14848:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14833:3:14"},"nodeType":"YulFunctionCall","src":"14833:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14825:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14872:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"14883:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14868:3:14"},"nodeType":"YulFunctionCall","src":"14868:17:14"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14891:4:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"14897:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14887:3:14"},"nodeType":"YulFunctionCall","src":"14887:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14861:6:14"},"nodeType":"YulFunctionCall","src":"14861:47:14"},"nodeType":"YulExpressionStatement","src":"14861:47:14"},{"nodeType":"YulAssignment","src":"14917:139:14","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15051:4:14"}],"functionName":{"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14925:124:14"},"nodeType":"YulFunctionCall","src":"14925:131:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14917:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14795:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14810:4:14","type":""}],"src":"14644:419:14"},{"body":{"nodeType":"YulBlock","src":"15175:122:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15197:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"15205:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15193:3:14"},"nodeType":"YulFunctionCall","src":"15193:14:14"},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f742061207661","kind":"string","nodeType":"YulLiteral","src":"15209:34:14","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15186:6:14"},"nodeType":"YulFunctionCall","src":"15186:58:14"},"nodeType":"YulExpressionStatement","src":"15186:58:14"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15265:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"15273:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15261:3:14"},"nodeType":"YulFunctionCall","src":"15261:15:14"},{"hexValue":"6c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"15278:11:14","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15254:6:14"},"nodeType":"YulFunctionCall","src":"15254:36:14"},"nodeType":"YulExpressionStatement","src":"15254:36:14"}]},"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"15167:6:14","type":""}],"src":"15069:228:14"},{"body":{"nodeType":"YulBlock","src":"15449:220:14","statements":[{"nodeType":"YulAssignment","src":"15459:74:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15525:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"15530:2:14","type":"","value":"41"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15466:58:14"},"nodeType":"YulFunctionCall","src":"15466:67:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15459:3:14"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15631:3:14"}],"functionName":{"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulIdentifier","src":"15542:88:14"},"nodeType":"YulFunctionCall","src":"15542:93:14"},"nodeType":"YulExpressionStatement","src":"15542:93:14"},{"nodeType":"YulAssignment","src":"15644:19:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15655:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"15660:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15651:3:14"},"nodeType":"YulFunctionCall","src":"15651:12:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15644:3:14"}]}]},"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15437:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15445:3:14","type":""}],"src":"15303:366:14"},{"body":{"nodeType":"YulBlock","src":"15846:248:14","statements":[{"nodeType":"YulAssignment","src":"15856:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15868:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"15879:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15864:3:14"},"nodeType":"YulFunctionCall","src":"15864:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15856:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15903:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"15914:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15899:3:14"},"nodeType":"YulFunctionCall","src":"15899:17:14"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15922:4:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"15928:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15918:3:14"},"nodeType":"YulFunctionCall","src":"15918:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15892:6:14"},"nodeType":"YulFunctionCall","src":"15892:47:14"},"nodeType":"YulExpressionStatement","src":"15892:47:14"},{"nodeType":"YulAssignment","src":"15948:139:14","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16082:4:14"}],"functionName":{"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15956:124:14"},"nodeType":"YulFunctionCall","src":"15956:131:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15948:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15826:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15841:4:14","type":""}],"src":"15675:419:14"},{"body":{"nodeType":"YulBlock","src":"16214:34:14","statements":[{"nodeType":"YulAssignment","src":"16224:18:14","value":{"name":"pos","nodeType":"YulIdentifier","src":"16239:3:14"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"16224:11:14"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16186:3:14","type":""},{"name":"length","nodeType":"YulTypedName","src":"16191:6:14","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"16202:11:14","type":""}],"src":"16100:148:14"},{"body":{"nodeType":"YulBlock","src":"16364:280:14","statements":[{"nodeType":"YulVariableDeclaration","src":"16374:53:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16421:5:14"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"16388:32:14"},"nodeType":"YulFunctionCall","src":"16388:39:14"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"16378:6:14","type":""}]},{"nodeType":"YulAssignment","src":"16436:96:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16520:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"16525:6:14"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"16443:76:14"},"nodeType":"YulFunctionCall","src":"16443:89:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16436:3:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16580:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"16587:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16576:3:14"},"nodeType":"YulFunctionCall","src":"16576:16:14"},{"name":"pos","nodeType":"YulIdentifier","src":"16594:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"16599:6:14"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"16541:34:14"},"nodeType":"YulFunctionCall","src":"16541:65:14"},"nodeType":"YulExpressionStatement","src":"16541:65:14"},{"nodeType":"YulAssignment","src":"16615:23:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16626:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"16631:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16622:3:14"},"nodeType":"YulFunctionCall","src":"16622:16:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16615:3:14"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16345:5:14","type":""},{"name":"pos","nodeType":"YulTypedName","src":"16352:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16360:3:14","type":""}],"src":"16254:390:14"},{"body":{"nodeType":"YulBlock","src":"16834:251:14","statements":[{"nodeType":"YulAssignment","src":"16845:102:14","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16934:6:14"},{"name":"pos","nodeType":"YulIdentifier","src":"16943:3:14"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"16852:81:14"},"nodeType":"YulFunctionCall","src":"16852:95:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16845:3:14"}]},{"nodeType":"YulAssignment","src":"16957:102:14","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"17046:6:14"},{"name":"pos","nodeType":"YulIdentifier","src":"17055:3:14"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"16964:81:14"},"nodeType":"YulFunctionCall","src":"16964:95:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16957:3:14"}]},{"nodeType":"YulAssignment","src":"17069:10:14","value":{"name":"pos","nodeType":"YulIdentifier","src":"17076:3:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17069:3:14"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16805:3:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16811:6:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16819:6:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16830:3:14","type":""}],"src":"16650:435:14"},{"body":{"nodeType":"YulBlock","src":"17197:118:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17219:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"17227:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17215:3:14"},"nodeType":"YulFunctionCall","src":"17215:14:14"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nodeType":"YulLiteral","src":"17231:34:14","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17208:6:14"},"nodeType":"YulFunctionCall","src":"17208:58:14"},"nodeType":"YulExpressionStatement","src":"17208:58:14"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17287:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"17295:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17283:3:14"},"nodeType":"YulFunctionCall","src":"17283:15:14"},{"hexValue":"6f776e6572","kind":"string","nodeType":"YulLiteral","src":"17300:7:14","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17276:6:14"},"nodeType":"YulFunctionCall","src":"17276:32:14"},"nodeType":"YulExpressionStatement","src":"17276:32:14"}]},"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"17189:6:14","type":""}],"src":"17091:224:14"},{"body":{"nodeType":"YulBlock","src":"17467:220:14","statements":[{"nodeType":"YulAssignment","src":"17477:74:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17543:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"17548:2:14","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17484:58:14"},"nodeType":"YulFunctionCall","src":"17484:67:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17477:3:14"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17649:3:14"}],"functionName":{"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulIdentifier","src":"17560:88:14"},"nodeType":"YulFunctionCall","src":"17560:93:14"},"nodeType":"YulExpressionStatement","src":"17560:93:14"},{"nodeType":"YulAssignment","src":"17662:19:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17673:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"17678:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17669:3:14"},"nodeType":"YulFunctionCall","src":"17669:12:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17662:3:14"}]}]},"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17455:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17463:3:14","type":""}],"src":"17321:366:14"},{"body":{"nodeType":"YulBlock","src":"17864:248:14","statements":[{"nodeType":"YulAssignment","src":"17874:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17886:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"17897:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17882:3:14"},"nodeType":"YulFunctionCall","src":"17882:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17874:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17921:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"17932:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17917:3:14"},"nodeType":"YulFunctionCall","src":"17917:17:14"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17940:4:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"17946:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17936:3:14"},"nodeType":"YulFunctionCall","src":"17936:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17910:6:14"},"nodeType":"YulFunctionCall","src":"17910:47:14"},"nodeType":"YulExpressionStatement","src":"17910:47:14"},{"nodeType":"YulAssignment","src":"17966:139:14","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18100:4:14"}],"functionName":{"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17974:124:14"},"nodeType":"YulFunctionCall","src":"17974:131:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17966:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17844:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17859:4:14","type":""}],"src":"17693:419:14"},{"body":{"nodeType":"YulBlock","src":"18224:117:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18246:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"18254:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18242:3:14"},"nodeType":"YulFunctionCall","src":"18242:14:14"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"18258:34:14","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18235:6:14"},"nodeType":"YulFunctionCall","src":"18235:58:14"},"nodeType":"YulExpressionStatement","src":"18235:58:14"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18314:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"18322:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18310:3:14"},"nodeType":"YulFunctionCall","src":"18310:15:14"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"18327:6:14","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18303:6:14"},"nodeType":"YulFunctionCall","src":"18303:31:14"},"nodeType":"YulExpressionStatement","src":"18303:31:14"}]},"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18216:6:14","type":""}],"src":"18118:223:14"},{"body":{"nodeType":"YulBlock","src":"18493:220:14","statements":[{"nodeType":"YulAssignment","src":"18503:74:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18569:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"18574:2:14","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18510:58:14"},"nodeType":"YulFunctionCall","src":"18510:67:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18503:3:14"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18675:3:14"}],"functionName":{"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulIdentifier","src":"18586:88:14"},"nodeType":"YulFunctionCall","src":"18586:93:14"},"nodeType":"YulExpressionStatement","src":"18586:93:14"},{"nodeType":"YulAssignment","src":"18688:19:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18699:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"18704:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18695:3:14"},"nodeType":"YulFunctionCall","src":"18695:12:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18688:3:14"}]}]},"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18481:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18489:3:14","type":""}],"src":"18347:366:14"},{"body":{"nodeType":"YulBlock","src":"18890:248:14","statements":[{"nodeType":"YulAssignment","src":"18900:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18912:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"18923:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18908:3:14"},"nodeType":"YulFunctionCall","src":"18908:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18900:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18947:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"18958:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18943:3:14"},"nodeType":"YulFunctionCall","src":"18943:17:14"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18966:4:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"18972:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18962:3:14"},"nodeType":"YulFunctionCall","src":"18962:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18936:6:14"},"nodeType":"YulFunctionCall","src":"18936:47:14"},"nodeType":"YulExpressionStatement","src":"18936:47:14"},{"nodeType":"YulAssignment","src":"18992:139:14","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19126:4:14"}],"functionName":{"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19000:124:14"},"nodeType":"YulFunctionCall","src":"19000:131:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18992:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18870:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18885:4:14","type":""}],"src":"18719:419:14"},{"body":{"nodeType":"YulBlock","src":"19250:69:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19272:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"19280:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19268:3:14"},"nodeType":"YulFunctionCall","src":"19268:14:14"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nodeType":"YulLiteral","src":"19284:27:14","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19261:6:14"},"nodeType":"YulFunctionCall","src":"19261:51:14"},"nodeType":"YulExpressionStatement","src":"19261:51:14"}]},"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"19242:6:14","type":""}],"src":"19144:175:14"},{"body":{"nodeType":"YulBlock","src":"19471:220:14","statements":[{"nodeType":"YulAssignment","src":"19481:74:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19547:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"19552:2:14","type":"","value":"25"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19488:58:14"},"nodeType":"YulFunctionCall","src":"19488:67:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19481:3:14"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19653:3:14"}],"functionName":{"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulIdentifier","src":"19564:88:14"},"nodeType":"YulFunctionCall","src":"19564:93:14"},"nodeType":"YulExpressionStatement","src":"19564:93:14"},{"nodeType":"YulAssignment","src":"19666:19:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19677:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"19682:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19673:3:14"},"nodeType":"YulFunctionCall","src":"19673:12:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19666:3:14"}]}]},"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19459:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19467:3:14","type":""}],"src":"19325:366:14"},{"body":{"nodeType":"YulBlock","src":"19868:248:14","statements":[{"nodeType":"YulAssignment","src":"19878:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19890:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"19901:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19886:3:14"},"nodeType":"YulFunctionCall","src":"19886:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19878:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19925:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"19936:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19921:3:14"},"nodeType":"YulFunctionCall","src":"19921:17:14"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19944:4:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"19950:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19940:3:14"},"nodeType":"YulFunctionCall","src":"19940:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19914:6:14"},"nodeType":"YulFunctionCall","src":"19914:47:14"},"nodeType":"YulExpressionStatement","src":"19914:47:14"},{"nodeType":"YulAssignment","src":"19970:139:14","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20104:4:14"}],"functionName":{"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19978:124:14"},"nodeType":"YulFunctionCall","src":"19978:131:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19970:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19848:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19863:4:14","type":""}],"src":"19697:419:14"},{"body":{"nodeType":"YulBlock","src":"20228:131:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20250:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"20258:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20246:3:14"},"nodeType":"YulFunctionCall","src":"20246:14:14"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nodeType":"YulLiteral","src":"20262:34:14","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20239:6:14"},"nodeType":"YulFunctionCall","src":"20239:58:14"},"nodeType":"YulExpressionStatement","src":"20239:58:14"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20318:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"20326:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20314:3:14"},"nodeType":"YulFunctionCall","src":"20314:15:14"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"20331:20:14","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20307:6:14"},"nodeType":"YulFunctionCall","src":"20307:45:14"},"nodeType":"YulExpressionStatement","src":"20307:45:14"}]},"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"20220:6:14","type":""}],"src":"20122:237:14"},{"body":{"nodeType":"YulBlock","src":"20511:220:14","statements":[{"nodeType":"YulAssignment","src":"20521:74:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20587:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"20592:2:14","type":"","value":"50"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20528:58:14"},"nodeType":"YulFunctionCall","src":"20528:67:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"20521:3:14"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20693:3:14"}],"functionName":{"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulIdentifier","src":"20604:88:14"},"nodeType":"YulFunctionCall","src":"20604:93:14"},"nodeType":"YulExpressionStatement","src":"20604:93:14"},{"nodeType":"YulAssignment","src":"20706:19:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20717:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"20722:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20713:3:14"},"nodeType":"YulFunctionCall","src":"20713:12:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20706:3:14"}]}]},"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20499:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20507:3:14","type":""}],"src":"20365:366:14"},{"body":{"nodeType":"YulBlock","src":"20908:248:14","statements":[{"nodeType":"YulAssignment","src":"20918:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20930:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"20941:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20926:3:14"},"nodeType":"YulFunctionCall","src":"20926:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20918:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20965:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"20976:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20961:3:14"},"nodeType":"YulFunctionCall","src":"20961:17:14"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20984:4:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"20990:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20980:3:14"},"nodeType":"YulFunctionCall","src":"20980:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20954:6:14"},"nodeType":"YulFunctionCall","src":"20954:47:14"},"nodeType":"YulExpressionStatement","src":"20954:47:14"},{"nodeType":"YulAssignment","src":"21010:139:14","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21144:4:14"}],"functionName":{"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21018:124:14"},"nodeType":"YulFunctionCall","src":"21018:131:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21010:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20888:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20903:4:14","type":""}],"src":"20737:419:14"},{"body":{"nodeType":"YulBlock","src":"21190:152:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21207:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21210:77:14","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21200:6:14"},"nodeType":"YulFunctionCall","src":"21200:88:14"},"nodeType":"YulExpressionStatement","src":"21200:88:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21304:1:14","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"21307:4:14","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21297:6:14"},"nodeType":"YulFunctionCall","src":"21297:15:14"},"nodeType":"YulExpressionStatement","src":"21297:15:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21328:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21331:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21321:6:14"},"nodeType":"YulFunctionCall","src":"21321:15:14"},"nodeType":"YulExpressionStatement","src":"21321:15:14"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"21162:180:14"},{"body":{"nodeType":"YulBlock","src":"21376:152:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21393:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21396:77:14","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21386:6:14"},"nodeType":"YulFunctionCall","src":"21386:88:14"},"nodeType":"YulExpressionStatement","src":"21386:88:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21490:1:14","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"21493:4:14","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21483:6:14"},"nodeType":"YulFunctionCall","src":"21483:15:14"},"nodeType":"YulExpressionStatement","src":"21483:15:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21514:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21517:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21507:6:14"},"nodeType":"YulFunctionCall","src":"21507:15:14"},"nodeType":"YulExpressionStatement","src":"21507:15:14"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"21348:180:14"},{"body":{"nodeType":"YulBlock","src":"21579:149:14","statements":[{"nodeType":"YulAssignment","src":"21589:25:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"21612:1:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"21594:17:14"},"nodeType":"YulFunctionCall","src":"21594:20:14"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"21589:1:14"}]},{"nodeType":"YulAssignment","src":"21623:25:14","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"21646:1:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"21628:17:14"},"nodeType":"YulFunctionCall","src":"21628:20:14"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"21623:1:14"}]},{"nodeType":"YulAssignment","src":"21657:17:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"21669:1:14"},{"name":"y","nodeType":"YulIdentifier","src":"21672:1:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21665:3:14"},"nodeType":"YulFunctionCall","src":"21665:9:14"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"21657:4:14"}]},{"body":{"nodeType":"YulBlock","src":"21699:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"21701:16:14"},"nodeType":"YulFunctionCall","src":"21701:18:14"},"nodeType":"YulExpressionStatement","src":"21701:18:14"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"21690:4:14"},{"name":"x","nodeType":"YulIdentifier","src":"21696:1:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"21687:2:14"},"nodeType":"YulFunctionCall","src":"21687:11:14"},"nodeType":"YulIf","src":"21684:37:14"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"21565:1:14","type":""},{"name":"y","nodeType":"YulTypedName","src":"21568:1:14","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"21574:4:14","type":""}],"src":"21534:194:14"},{"body":{"nodeType":"YulBlock","src":"21778:147:14","statements":[{"nodeType":"YulAssignment","src":"21788:25:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"21811:1:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"21793:17:14"},"nodeType":"YulFunctionCall","src":"21793:20:14"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"21788:1:14"}]},{"nodeType":"YulAssignment","src":"21822:25:14","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"21845:1:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"21827:17:14"},"nodeType":"YulFunctionCall","src":"21827:20:14"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"21822:1:14"}]},{"nodeType":"YulAssignment","src":"21856:16:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"21867:1:14"},{"name":"y","nodeType":"YulIdentifier","src":"21870:1:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21863:3:14"},"nodeType":"YulFunctionCall","src":"21863:9:14"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"21856:3:14"}]},{"body":{"nodeType":"YulBlock","src":"21896:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"21898:16:14"},"nodeType":"YulFunctionCall","src":"21898:18:14"},"nodeType":"YulExpressionStatement","src":"21898:18:14"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"21888:1:14"},{"name":"sum","nodeType":"YulIdentifier","src":"21891:3:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"21885:2:14"},"nodeType":"YulFunctionCall","src":"21885:10:14"},"nodeType":"YulIf","src":"21882:36:14"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"21765:1:14","type":""},{"name":"y","nodeType":"YulTypedName","src":"21768:1:14","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"21774:3:14","type":""}],"src":"21734:191:14"},{"body":{"nodeType":"YulBlock","src":"21989:40:14","statements":[{"nodeType":"YulAssignment","src":"22000:22:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22016:5:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22010:5:14"},"nodeType":"YulFunctionCall","src":"22010:12:14"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"22000:6:14"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"21972:5:14","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"21982:6:14","type":""}],"src":"21931:98:14"},{"body":{"nodeType":"YulBlock","src":"22130:73:14","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22147:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"22152:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22140:6:14"},"nodeType":"YulFunctionCall","src":"22140:19:14"},"nodeType":"YulExpressionStatement","src":"22140:19:14"},{"nodeType":"YulAssignment","src":"22168:29:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22187:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"22192:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22183:3:14"},"nodeType":"YulFunctionCall","src":"22183:14:14"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"22168:11:14"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22102:3:14","type":""},{"name":"length","nodeType":"YulTypedName","src":"22107:6:14","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"22118:11:14","type":""}],"src":"22035:168:14"},{"body":{"nodeType":"YulBlock","src":"22299:283:14","statements":[{"nodeType":"YulVariableDeclaration","src":"22309:52:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22355:5:14"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"22323:31:14"},"nodeType":"YulFunctionCall","src":"22323:38:14"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"22313:6:14","type":""}]},{"nodeType":"YulAssignment","src":"22370:77:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22435:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"22440:6:14"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22377:57:14"},"nodeType":"YulFunctionCall","src":"22377:70:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22370:3:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22495:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"22502:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22491:3:14"},"nodeType":"YulFunctionCall","src":"22491:16:14"},{"name":"pos","nodeType":"YulIdentifier","src":"22509:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"22514:6:14"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"22456:34:14"},"nodeType":"YulFunctionCall","src":"22456:65:14"},"nodeType":"YulExpressionStatement","src":"22456:65:14"},{"nodeType":"YulAssignment","src":"22530:46:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22541:3:14"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"22568:6:14"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"22546:21:14"},"nodeType":"YulFunctionCall","src":"22546:29:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22537:3:14"},"nodeType":"YulFunctionCall","src":"22537:39:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"22530:3:14"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"22280:5:14","type":""},{"name":"pos","nodeType":"YulTypedName","src":"22287:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"22295:3:14","type":""}],"src":"22209:373:14"},{"body":{"nodeType":"YulBlock","src":"22788:440:14","statements":[{"nodeType":"YulAssignment","src":"22798:27:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22810:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"22821:3:14","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22806:3:14"},"nodeType":"YulFunctionCall","src":"22806:19:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22798:4:14"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"22879:6:14"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22892:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"22903:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22888:3:14"},"nodeType":"YulFunctionCall","src":"22888:17:14"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"22835:43:14"},"nodeType":"YulFunctionCall","src":"22835:71:14"},"nodeType":"YulExpressionStatement","src":"22835:71:14"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"22960:6:14"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22973:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"22984:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22969:3:14"},"nodeType":"YulFunctionCall","src":"22969:18:14"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"22916:43:14"},"nodeType":"YulFunctionCall","src":"22916:72:14"},"nodeType":"YulExpressionStatement","src":"22916:72:14"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"23042:6:14"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23055:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"23066:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23051:3:14"},"nodeType":"YulFunctionCall","src":"23051:18:14"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"22998:43:14"},"nodeType":"YulFunctionCall","src":"22998:72:14"},"nodeType":"YulExpressionStatement","src":"22998:72:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23091:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"23102:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23087:3:14"},"nodeType":"YulFunctionCall","src":"23087:18:14"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23111:4:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"23117:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23107:3:14"},"nodeType":"YulFunctionCall","src":"23107:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23080:6:14"},"nodeType":"YulFunctionCall","src":"23080:48:14"},"nodeType":"YulExpressionStatement","src":"23080:48:14"},{"nodeType":"YulAssignment","src":"23137:84:14","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"23207:6:14"},{"name":"tail","nodeType":"YulIdentifier","src":"23216:4:14"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23145:61:14"},"nodeType":"YulFunctionCall","src":"23145:76:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23137:4:14"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22736:9:14","type":""},{"name":"value3","nodeType":"YulTypedName","src":"22748:6:14","type":""},{"name":"value2","nodeType":"YulTypedName","src":"22756:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"22764:6:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"22772:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22783:4:14","type":""}],"src":"22588:640:14"},{"body":{"nodeType":"YulBlock","src":"23296:79:14","statements":[{"nodeType":"YulAssignment","src":"23306:22:14","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"23321:6:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23315:5:14"},"nodeType":"YulFunctionCall","src":"23315:13:14"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"23306:5:14"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23363:5:14"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"23337:25:14"},"nodeType":"YulFunctionCall","src":"23337:32:14"},"nodeType":"YulExpressionStatement","src":"23337:32:14"}]},"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"23274:6:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"23282:3:14","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"23290:5:14","type":""}],"src":"23234:141:14"},{"body":{"nodeType":"YulBlock","src":"23457:273:14","statements":[{"body":{"nodeType":"YulBlock","src":"23503:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"23505:77:14"},"nodeType":"YulFunctionCall","src":"23505:79:14"},"nodeType":"YulExpressionStatement","src":"23505:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"23478:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"23487:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23474:3:14"},"nodeType":"YulFunctionCall","src":"23474:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"23499:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"23470:3:14"},"nodeType":"YulFunctionCall","src":"23470:32:14"},"nodeType":"YulIf","src":"23467:119:14"},{"nodeType":"YulBlock","src":"23596:127:14","statements":[{"nodeType":"YulVariableDeclaration","src":"23611:15:14","value":{"kind":"number","nodeType":"YulLiteral","src":"23625:1:14","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"23615:6:14","type":""}]},{"nodeType":"YulAssignment","src":"23640:73:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23685:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"23696:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23681:3:14"},"nodeType":"YulFunctionCall","src":"23681:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"23705:7:14"}],"functionName":{"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulIdentifier","src":"23650:30:14"},"nodeType":"YulFunctionCall","src":"23650:63:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"23640:6:14"}]}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23427:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"23438:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"23450:6:14","type":""}],"src":"23381:349:14"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approval to current owne\")\n\n        mstore(add(memPtr, 32), \"r\")\n\n    }\n\n    function abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve caller is not to\")\n\n        mstore(add(memPtr, 32), \"ken owner or approved for all\")\n\n    }\n\n    function abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 61)\n        store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: caller is not token owne\")\n\n        mstore(add(memPtr, 32), \"r or approved\")\n\n    }\n\n    function abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 45)\n        store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: invalid token ID\")\n\n    }\n\n    function abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: address zero is not a va\")\n\n        mstore(add(memPtr, 32), \"lid owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n        store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer from incorrect \")\n\n        mstore(add(memPtr, 32), \"owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve to caller\")\n\n    }\n\n    function abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to non ERC721Re\")\n\n        mstore(add(memPtr, 32), \"ceiver implementer\")\n\n    }\n\n    function abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 50)\n        store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n","id":14,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb46514610224578063b88d4fde14610240578063c87b56dd1461025c578063e985e9c51461028c576100cf565b80636352211e146101a657806370a08231146101d657806395d89b4114610206576100cf565b806301ffc9a7146100d457806306fdde0314610104578063081812fc14610122578063095ea7b31461015257806323b872dd1461016e57806342842e0e1461018a575b600080fd5b6100ee60048036038101906100e99190611614565b6102bc565b6040516100fb919061165c565b60405180910390f35b61010c61039e565b6040516101199190611707565b60405180910390f35b61013c6004803603810190610137919061175f565b610430565b60405161014991906117cd565b60405180910390f35b61016c60048036038101906101679190611814565b610476565b005b61018860048036038101906101839190611854565b61058d565b005b6101a4600480360381019061019f9190611854565b6105ed565b005b6101c060048036038101906101bb919061175f565b61060d565b6040516101cd91906117cd565b60405180910390f35b6101f060048036038101906101eb91906118a7565b610693565b6040516101fd91906118e3565b60405180910390f35b61020e61074a565b60405161021b9190611707565b60405180910390f35b61023e6004803603810190610239919061192a565b6107dc565b005b61025a60048036038101906102559190611a9f565b6107f2565b005b6102766004803603810190610271919061175f565b610854565b6040516102839190611707565b60405180910390f35b6102a660048036038101906102a19190611b22565b6108bc565b6040516102b3919061165c565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061038757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610397575061039682610950565b5b9050919050565b6060600080546103ad90611b91565b80601f01602080910402602001604051908101604052809291908181526020018280546103d990611b91565b80156104265780601f106103fb57610100808354040283529160200191610426565b820191906000526020600020905b81548152906001019060200180831161040957829003601f168201915b5050505050905090565b600061043b826109ba565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006104818261060d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036104f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e890611c34565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610510610a05565b73ffffffffffffffffffffffffffffffffffffffff16148061053f575061053e81610539610a05565b6108bc565b5b61057e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057590611cc6565b60405180910390fd5b6105888383610a0d565b505050565b61059e610598610a05565b82610ac6565b6105dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d490611d58565b60405180910390fd5b6105e8838383610b5b565b505050565b610608838383604051806020016040528060008152506107f2565b505050565b60008061061983610e54565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361068a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068190611dc4565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610703576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fa90611e56565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461075990611b91565b80601f016020809104026020016040519081016040528092919081815260200182805461078590611b91565b80156107d25780601f106107a7576101008083540402835291602001916107d2565b820191906000526020600020905b8154815290600101906020018083116107b557829003601f168201915b5050505050905090565b6107ee6107e7610a05565b8383610e91565b5050565b6108036107fd610a05565b83610ac6565b610842576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083990611d58565b60405180910390fd5b61084e84848484610ffd565b50505050565b606061085f826109ba565b6000610869611059565b9050600081511161088957604051806020016040528060008152506108b4565b8061089384611070565b6040516020016108a4929190611eb2565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6109c38161113e565b610a02576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f990611dc4565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610a808361060d565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610ad28361060d565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610b145750610b1381856108bc565b5b80610b5257508373ffffffffffffffffffffffffffffffffffffffff16610b3a84610430565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610b7b8261060d565b73ffffffffffffffffffffffffffffffffffffffff1614610bd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc890611f48565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3790611fda565b60405180910390fd5b610c4d838383600161117f565b8273ffffffffffffffffffffffffffffffffffffffff16610c6d8261060d565b73ffffffffffffffffffffffffffffffffffffffff1614610cc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cba90611f48565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610e4f83838360016112a5565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610eff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef690612046565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610ff0919061165c565b60405180910390a3505050565b611008848484610b5b565b611014848484846112ab565b611053576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104a906120d8565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606000600161107f84611432565b01905060008167ffffffffffffffff81111561109e5761109d611974565b5b6040519080825280601f01601f1916602001820160405280156110d05781602001600182028036833780820191505090505b509050600082602001820190505b600115611133578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611127576111266120f8565b5b049450600085036110de575b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1661116083610e54565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600181111561129f57600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146112135780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461120b9190612156565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461129e5780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611296919061218a565b925050819055505b5b50505050565b50505050565b60006112cc8473ffffffffffffffffffffffffffffffffffffffff16611585565b15611425578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026112f5610a05565b8786866040518563ffffffff1660e01b81526004016113179493929190612213565b6020604051808303816000875af192505050801561135357506040513d601f19601f820116820180604052508101906113509190612274565b60015b6113d5573d8060008114611383576040519150601f19603f3d011682016040523d82523d6000602084013e611388565b606091505b5060008151036113cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c4906120d8565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061142a565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611490577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611486576114856120f8565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106114cd576d04ee2d6d415b85acef810000000083816114c3576114c26120f8565b5b0492506020810190505b662386f26fc1000083106114fc57662386f26fc1000083816114f2576114f16120f8565b5b0492506010810190505b6305f5e1008310611525576305f5e100838161151b5761151a6120f8565b5b0492506008810190505b612710831061154a5761271083816115405761153f6120f8565b5b0492506004810190505b6064831061156d5760648381611563576115626120f8565b5b0492506002810190505b600a831061157c576001810190505b80915050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6115f1816115bc565b81146115fc57600080fd5b50565b60008135905061160e816115e8565b92915050565b60006020828403121561162a576116296115b2565b5b6000611638848285016115ff565b91505092915050565b60008115159050919050565b61165681611641565b82525050565b6000602082019050611671600083018461164d565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156116b1578082015181840152602081019050611696565b60008484015250505050565b6000601f19601f8301169050919050565b60006116d982611677565b6116e38185611682565b93506116f3818560208601611693565b6116fc816116bd565b840191505092915050565b6000602082019050818103600083015261172181846116ce565b905092915050565b6000819050919050565b61173c81611729565b811461174757600080fd5b50565b60008135905061175981611733565b92915050565b600060208284031215611775576117746115b2565b5b60006117838482850161174a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117b78261178c565b9050919050565b6117c7816117ac565b82525050565b60006020820190506117e260008301846117be565b92915050565b6117f1816117ac565b81146117fc57600080fd5b50565b60008135905061180e816117e8565b92915050565b6000806040838503121561182b5761182a6115b2565b5b6000611839858286016117ff565b925050602061184a8582860161174a565b9150509250929050565b60008060006060848603121561186d5761186c6115b2565b5b600061187b868287016117ff565b935050602061188c868287016117ff565b925050604061189d8682870161174a565b9150509250925092565b6000602082840312156118bd576118bc6115b2565b5b60006118cb848285016117ff565b91505092915050565b6118dd81611729565b82525050565b60006020820190506118f860008301846118d4565b92915050565b61190781611641565b811461191257600080fd5b50565b600081359050611924816118fe565b92915050565b60008060408385031215611941576119406115b2565b5b600061194f858286016117ff565b925050602061196085828601611915565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6119ac826116bd565b810181811067ffffffffffffffff821117156119cb576119ca611974565b5b80604052505050565b60006119de6115a8565b90506119ea82826119a3565b919050565b600067ffffffffffffffff821115611a0a57611a09611974565b5b611a13826116bd565b9050602081019050919050565b82818337600083830152505050565b6000611a42611a3d846119ef565b6119d4565b905082815260208101848484011115611a5e57611a5d61196f565b5b611a69848285611a20565b509392505050565b600082601f830112611a8657611a8561196a565b5b8135611a96848260208601611a2f565b91505092915050565b60008060008060808587031215611ab957611ab86115b2565b5b6000611ac7878288016117ff565b9450506020611ad8878288016117ff565b9350506040611ae98782880161174a565b925050606085013567ffffffffffffffff811115611b0a57611b096115b7565b5b611b1687828801611a71565b91505092959194509250565b60008060408385031215611b3957611b386115b2565b5b6000611b47858286016117ff565b9250506020611b58858286016117ff565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611ba957607f821691505b602082108103611bbc57611bbb611b62565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000611c1e602183611682565b9150611c2982611bc2565b604082019050919050565b60006020820190508181036000830152611c4d81611c11565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000611cb0603d83611682565b9150611cbb82611c54565b604082019050919050565b60006020820190508181036000830152611cdf81611ca3565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000611d42602d83611682565b9150611d4d82611ce6565b604082019050919050565b60006020820190508181036000830152611d7181611d35565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000611dae601883611682565b9150611db982611d78565b602082019050919050565b60006020820190508181036000830152611ddd81611da1565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000611e40602983611682565b9150611e4b82611de4565b604082019050919050565b60006020820190508181036000830152611e6f81611e33565b9050919050565b600081905092915050565b6000611e8c82611677565b611e968185611e76565b9350611ea6818560208601611693565b80840191505092915050565b6000611ebe8285611e81565b9150611eca8284611e81565b91508190509392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000611f32602583611682565b9150611f3d82611ed6565b604082019050919050565b60006020820190508181036000830152611f6181611f25565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611fc4602483611682565b9150611fcf82611f68565b604082019050919050565b60006020820190508181036000830152611ff381611fb7565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612030601983611682565b915061203b82611ffa565b602082019050919050565b6000602082019050818103600083015261205f81612023565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006120c2603283611682565b91506120cd82612066565b604082019050919050565b600060208201905081810360008301526120f1816120b5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061216182611729565b915061216c83611729565b925082820390508181111561218457612183612127565b5b92915050565b600061219582611729565b91506121a083611729565b92508282019050808211156121b8576121b7612127565b5b92915050565b600081519050919050565b600082825260208201905092915050565b60006121e5826121be565b6121ef81856121c9565b93506121ff818560208601611693565b612208816116bd565b840191505092915050565b600060808201905061222860008301876117be565b61223560208301866117be565b61224260408301856118d4565b818103606083015261225481846121da565b905095945050505050565b60008151905061226e816115e8565b92915050565b60006020828403121561228a576122896115b2565b5b60006122988482850161225f565b9150509291505056fea26469706673582212202ef155beec58315f9911e1c739e009937fe03bfa665f2f6054e78352d0bb320d64736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x28C JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x206 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x18A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x1614 JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x165C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10C PUSH2 0x39E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0x1707 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x175F JUMP JUMPDEST PUSH2 0x430 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x149 SWAP2 SWAP1 PUSH2 0x17CD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x167 SWAP2 SWAP1 PUSH2 0x1814 JUMP JUMPDEST PUSH2 0x476 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x188 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x183 SWAP2 SWAP1 PUSH2 0x1854 JUMP JUMPDEST PUSH2 0x58D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x1854 JUMP JUMPDEST PUSH2 0x5ED JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BB SWAP2 SWAP1 PUSH2 0x175F JUMP JUMPDEST PUSH2 0x60D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CD SWAP2 SWAP1 PUSH2 0x17CD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x18A7 JUMP JUMPDEST PUSH2 0x693 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FD SWAP2 SWAP1 PUSH2 0x18E3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20E PUSH2 0x74A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21B SWAP2 SWAP1 PUSH2 0x1707 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x239 SWAP2 SWAP1 PUSH2 0x192A JUMP JUMPDEST PUSH2 0x7DC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x1A9F JUMP JUMPDEST PUSH2 0x7F2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x276 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x271 SWAP2 SWAP1 PUSH2 0x175F JUMP JUMPDEST PUSH2 0x854 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x1707 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x1B22 JUMP JUMPDEST PUSH2 0x8BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B3 SWAP2 SWAP1 PUSH2 0x165C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x387 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x397 JUMPI POP PUSH2 0x396 DUP3 PUSH2 0x950 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x3AD SWAP1 PUSH2 0x1B91 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3D9 SWAP1 PUSH2 0x1B91 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x426 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3FB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x426 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x409 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43B DUP3 PUSH2 0x9BA JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x481 DUP3 PUSH2 0x60D JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x4F1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E8 SWAP1 PUSH2 0x1C34 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x510 PUSH2 0xA05 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x53F JUMPI POP PUSH2 0x53E DUP2 PUSH2 0x539 PUSH2 0xA05 JUMP JUMPDEST PUSH2 0x8BC JUMP JUMPDEST JUMPDEST PUSH2 0x57E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x575 SWAP1 PUSH2 0x1CC6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x588 DUP4 DUP4 PUSH2 0xA0D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x59E PUSH2 0x598 PUSH2 0xA05 JUMP JUMPDEST DUP3 PUSH2 0xAC6 JUMP JUMPDEST PUSH2 0x5DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5D4 SWAP1 PUSH2 0x1D58 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E8 DUP4 DUP4 DUP4 PUSH2 0xB5B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x608 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x7F2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x619 DUP4 PUSH2 0xE54 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x68A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x681 SWAP1 PUSH2 0x1DC4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x703 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FA SWAP1 PUSH2 0x1E56 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x759 SWAP1 PUSH2 0x1B91 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x785 SWAP1 PUSH2 0x1B91 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7D2 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7A7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7D2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7B5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x7EE PUSH2 0x7E7 PUSH2 0xA05 JUMP JUMPDEST DUP4 DUP4 PUSH2 0xE91 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x803 PUSH2 0x7FD PUSH2 0xA05 JUMP JUMPDEST DUP4 PUSH2 0xAC6 JUMP JUMPDEST PUSH2 0x842 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x839 SWAP1 PUSH2 0x1D58 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x84E DUP5 DUP5 DUP5 DUP5 PUSH2 0xFFD JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x85F DUP3 PUSH2 0x9BA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x869 PUSH2 0x1059 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x889 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x8B4 JUMP JUMPDEST DUP1 PUSH2 0x893 DUP5 PUSH2 0x1070 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8A4 SWAP3 SWAP2 SWAP1 PUSH2 0x1EB2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9C3 DUP2 PUSH2 0x113E JUMP JUMPDEST PUSH2 0xA02 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F9 SWAP1 PUSH2 0x1DC4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA80 DUP4 PUSH2 0x60D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAD2 DUP4 PUSH2 0x60D JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xB14 JUMPI POP PUSH2 0xB13 DUP2 DUP6 PUSH2 0x8BC JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xB52 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB3A DUP5 PUSH2 0x430 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB7B DUP3 PUSH2 0x60D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBD1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBC8 SWAP1 PUSH2 0x1F48 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xC40 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC37 SWAP1 PUSH2 0x1FDA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC4D DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x117F JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC6D DUP3 PUSH2 0x60D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCC3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCBA SWAP1 PUSH2 0x1F48 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xE4F DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x12A5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xEFF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEF6 SWAP1 PUSH2 0x2046 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0xFF0 SWAP2 SWAP1 PUSH2 0x165C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1008 DUP5 DUP5 DUP5 PUSH2 0xB5B JUMP JUMPDEST PUSH2 0x1014 DUP5 DUP5 DUP5 DUP5 PUSH2 0x12AB JUMP JUMPDEST PUSH2 0x1053 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x104A SWAP1 PUSH2 0x20D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x107F DUP5 PUSH2 0x1432 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x109E JUMPI PUSH2 0x109D PUSH2 0x1974 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x10D0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1133 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x1127 JUMPI PUSH2 0x1126 PUSH2 0x20F8 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x10DE JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1160 DUP4 PUSH2 0xE54 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x129F JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1213 JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x120B SWAP2 SWAP1 PUSH2 0x2156 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x129E JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1296 SWAP2 SWAP1 PUSH2 0x218A JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12CC DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1585 JUMP JUMPDEST ISZERO PUSH2 0x1425 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x12F5 PUSH2 0xA05 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1317 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2213 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1353 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1350 SWAP2 SWAP1 PUSH2 0x2274 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x13D5 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1383 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1388 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x13CD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13C4 SWAP1 PUSH2 0x20D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x142A JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1490 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x1486 JUMPI PUSH2 0x1485 PUSH2 0x20F8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x14CD JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x14C3 JUMPI PUSH2 0x14C2 PUSH2 0x20F8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x14FC JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x14F2 JUMPI PUSH2 0x14F1 PUSH2 0x20F8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1525 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x151B JUMPI PUSH2 0x151A PUSH2 0x20F8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x154A JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x1540 JUMPI PUSH2 0x153F PUSH2 0x20F8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x156D JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x1563 JUMPI PUSH2 0x1562 PUSH2 0x20F8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x157C JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x15F1 DUP2 PUSH2 0x15BC JUMP JUMPDEST DUP2 EQ PUSH2 0x15FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x160E DUP2 PUSH2 0x15E8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x162A JUMPI PUSH2 0x1629 PUSH2 0x15B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1638 DUP5 DUP3 DUP6 ADD PUSH2 0x15FF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1656 DUP2 PUSH2 0x1641 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1671 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x164D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x16B1 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1696 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16D9 DUP3 PUSH2 0x1677 JUMP JUMPDEST PUSH2 0x16E3 DUP2 DUP6 PUSH2 0x1682 JUMP JUMPDEST SWAP4 POP PUSH2 0x16F3 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1693 JUMP JUMPDEST PUSH2 0x16FC DUP2 PUSH2 0x16BD JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1721 DUP2 DUP5 PUSH2 0x16CE JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x173C DUP2 PUSH2 0x1729 JUMP JUMPDEST DUP2 EQ PUSH2 0x1747 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1759 DUP2 PUSH2 0x1733 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1775 JUMPI PUSH2 0x1774 PUSH2 0x15B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1783 DUP5 DUP3 DUP6 ADD PUSH2 0x174A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17B7 DUP3 PUSH2 0x178C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x17C7 DUP2 PUSH2 0x17AC JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x17E2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x17BE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x17F1 DUP2 PUSH2 0x17AC JUMP JUMPDEST DUP2 EQ PUSH2 0x17FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x180E DUP2 PUSH2 0x17E8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x182B JUMPI PUSH2 0x182A PUSH2 0x15B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1839 DUP6 DUP3 DUP7 ADD PUSH2 0x17FF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x184A DUP6 DUP3 DUP7 ADD PUSH2 0x174A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x186D JUMPI PUSH2 0x186C PUSH2 0x15B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x187B DUP7 DUP3 DUP8 ADD PUSH2 0x17FF JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x188C DUP7 DUP3 DUP8 ADD PUSH2 0x17FF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x189D DUP7 DUP3 DUP8 ADD PUSH2 0x174A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18BD JUMPI PUSH2 0x18BC PUSH2 0x15B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x18CB DUP5 DUP3 DUP6 ADD PUSH2 0x17FF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x18DD DUP2 PUSH2 0x1729 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x18F8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x18D4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1907 DUP2 PUSH2 0x1641 JUMP JUMPDEST DUP2 EQ PUSH2 0x1912 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1924 DUP2 PUSH2 0x18FE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1941 JUMPI PUSH2 0x1940 PUSH2 0x15B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x194F DUP6 DUP3 DUP7 ADD PUSH2 0x17FF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1960 DUP6 DUP3 DUP7 ADD PUSH2 0x1915 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x19AC DUP3 PUSH2 0x16BD JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x19CB JUMPI PUSH2 0x19CA PUSH2 0x1974 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19DE PUSH2 0x15A8 JUMP JUMPDEST SWAP1 POP PUSH2 0x19EA DUP3 DUP3 PUSH2 0x19A3 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1A0A JUMPI PUSH2 0x1A09 PUSH2 0x1974 JUMP JUMPDEST JUMPDEST PUSH2 0x1A13 DUP3 PUSH2 0x16BD JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A42 PUSH2 0x1A3D DUP5 PUSH2 0x19EF JUMP JUMPDEST PUSH2 0x19D4 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1A5E JUMPI PUSH2 0x1A5D PUSH2 0x196F JUMP JUMPDEST JUMPDEST PUSH2 0x1A69 DUP5 DUP3 DUP6 PUSH2 0x1A20 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1A86 JUMPI PUSH2 0x1A85 PUSH2 0x196A JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1A96 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1A2F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1AB9 JUMPI PUSH2 0x1AB8 PUSH2 0x15B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1AC7 DUP8 DUP3 DUP9 ADD PUSH2 0x17FF JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1AD8 DUP8 DUP3 DUP9 ADD PUSH2 0x17FF JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x1AE9 DUP8 DUP3 DUP9 ADD PUSH2 0x174A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B0A JUMPI PUSH2 0x1B09 PUSH2 0x15B7 JUMP JUMPDEST JUMPDEST PUSH2 0x1B16 DUP8 DUP3 DUP9 ADD PUSH2 0x1A71 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B39 JUMPI PUSH2 0x1B38 PUSH2 0x15B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1B47 DUP6 DUP3 DUP7 ADD PUSH2 0x17FF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1B58 DUP6 DUP3 DUP7 ADD PUSH2 0x17FF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1BA9 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1BBC JUMPI PUSH2 0x1BBB PUSH2 0x1B62 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C1E PUSH1 0x21 DUP4 PUSH2 0x1682 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C29 DUP3 PUSH2 0x1BC2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C4D DUP2 PUSH2 0x1C11 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CB0 PUSH1 0x3D DUP4 PUSH2 0x1682 JUMP JUMPDEST SWAP2 POP PUSH2 0x1CBB DUP3 PUSH2 0x1C54 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CDF DUP2 PUSH2 0x1CA3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D42 PUSH1 0x2D DUP4 PUSH2 0x1682 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D4D DUP3 PUSH2 0x1CE6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D71 DUP2 PUSH2 0x1D35 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DAE PUSH1 0x18 DUP4 PUSH2 0x1682 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DB9 DUP3 PUSH2 0x1D78 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1DDD DUP2 PUSH2 0x1DA1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E40 PUSH1 0x29 DUP4 PUSH2 0x1682 JUMP JUMPDEST SWAP2 POP PUSH2 0x1E4B DUP3 PUSH2 0x1DE4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E6F DUP2 PUSH2 0x1E33 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E8C DUP3 PUSH2 0x1677 JUMP JUMPDEST PUSH2 0x1E96 DUP2 DUP6 PUSH2 0x1E76 JUMP JUMPDEST SWAP4 POP PUSH2 0x1EA6 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1693 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EBE DUP3 DUP6 PUSH2 0x1E81 JUMP JUMPDEST SWAP2 POP PUSH2 0x1ECA DUP3 DUP5 PUSH2 0x1E81 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F32 PUSH1 0x25 DUP4 PUSH2 0x1682 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F3D DUP3 PUSH2 0x1ED6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F61 DUP2 PUSH2 0x1F25 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FC4 PUSH1 0x24 DUP4 PUSH2 0x1682 JUMP JUMPDEST SWAP2 POP PUSH2 0x1FCF DUP3 PUSH2 0x1F68 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1FF3 DUP2 PUSH2 0x1FB7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2030 PUSH1 0x19 DUP4 PUSH2 0x1682 JUMP JUMPDEST SWAP2 POP PUSH2 0x203B DUP3 PUSH2 0x1FFA JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x205F DUP2 PUSH2 0x2023 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20C2 PUSH1 0x32 DUP4 PUSH2 0x1682 JUMP JUMPDEST SWAP2 POP PUSH2 0x20CD DUP3 PUSH2 0x2066 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x20F1 DUP2 PUSH2 0x20B5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2161 DUP3 PUSH2 0x1729 JUMP JUMPDEST SWAP2 POP PUSH2 0x216C DUP4 PUSH2 0x1729 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x2184 JUMPI PUSH2 0x2183 PUSH2 0x2127 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2195 DUP3 PUSH2 0x1729 JUMP JUMPDEST SWAP2 POP PUSH2 0x21A0 DUP4 PUSH2 0x1729 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x21B8 JUMPI PUSH2 0x21B7 PUSH2 0x2127 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21E5 DUP3 PUSH2 0x21BE JUMP JUMPDEST PUSH2 0x21EF DUP2 DUP6 PUSH2 0x21C9 JUMP JUMPDEST SWAP4 POP PUSH2 0x21FF DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1693 JUMP JUMPDEST PUSH2 0x2208 DUP2 PUSH2 0x16BD JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2228 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x17BE JUMP JUMPDEST PUSH2 0x2235 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x17BE JUMP JUMPDEST PUSH2 0x2242 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x18D4 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2254 DUP2 DUP5 PUSH2 0x21DA JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x226E DUP2 PUSH2 0x15E8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x228A JUMPI PUSH2 0x2289 PUSH2 0x15B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2298 DUP5 DUP3 DUP6 ADD PUSH2 0x225F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2E CALL SSTORE 0xBE 0xEC PC BALANCE 0x5F SWAP10 GT 0xE1 0xC7 CODECOPY 0xE0 MULMOD SWAP4 PUSH32 0xE03BFA665F2F6054E78352D0BB320D64736F6C63430008110033000000000000 ","sourceMap":"628:16327:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1570:300;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2471:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3935:167;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3468:406;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4612:326;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5004:179;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2190:219;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1929:204;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2633:102;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4169:153;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5249:314;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2801:276;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4388:162;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1570:300;1672:4;1722:25;1707:40;;;:11;:40;;;;:104;;;;1778:33;1763:48;;;:11;:48;;;;1707:104;:156;;;;1827:36;1851:11;1827:23;:36::i;:::-;1707:156;1688:175;;1570:300;;;:::o;2471:98::-;2525:13;2557:5;2550:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:98;:::o;3935:167::-;4011:7;4030:23;4045:7;4030:14;:23::i;:::-;4071:15;:24;4087:7;4071:24;;;;;;;;;;;;;;;;;;;;;4064:31;;3935:167;;;:::o;3468:406::-;3548:13;3564:23;3579:7;3564:14;:23::i;:::-;3548:39;;3611:5;3605:11;;:2;:11;;;3597:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;3702:5;3686:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;3711:37;3728:5;3735:12;:10;:12::i;:::-;3711:16;:37::i;:::-;3686:62;3665:170;;;;;;;;;;;;:::i;:::-;;;;;;;;;3846:21;3855:2;3859:7;3846:8;:21::i;:::-;3538:336;3468:406;;:::o;4612:326::-;4801:41;4820:12;:10;:12::i;:::-;4834:7;4801:18;:41::i;:::-;4793:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;4903:28;4913:4;4919:2;4923:7;4903:9;:28::i;:::-;4612:326;;;:::o;5004:179::-;5137:39;5154:4;5160:2;5164:7;5137:39;;;;;;;;;;;;:16;:39::i;:::-;5004:179;;;:::o;2190:219::-;2262:7;2281:13;2297:17;2306:7;2297:8;:17::i;:::-;2281:33;;2349:1;2332:19;;:5;:19;;;2324:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;2397:5;2390:12;;;2190:219;;;:::o;1929:204::-;2001:7;2045:1;2028:19;;:5;:19;;;2020:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2110:9;:16;2120:5;2110:16;;;;;;;;;;;;;;;;2103:23;;1929:204;;;:::o;2633:102::-;2689:13;2721:7;2714:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2633:102;:::o;4169:153::-;4263:52;4282:12;:10;:12::i;:::-;4296:8;4306;4263:18;:52::i;:::-;4169:153;;:::o;5249:314::-;5417:41;5436:12;:10;:12::i;:::-;5450:7;5417:18;:41::i;:::-;5409:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;5518:38;5532:4;5538:2;5542:7;5551:4;5518:13;:38::i;:::-;5249:314;;;;:::o;2801:276::-;2874:13;2899:23;2914:7;2899:14;:23::i;:::-;2933:21;2957:10;:8;:10::i;:::-;2933:34;;3008:1;2990:7;2984:21;:25;:86;;;;;;;;;;;;;;;;;3036:7;3045:18;:7;:16;:18::i;:::-;3019:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2984:86;2977:93;;;2801:276;;;:::o;4388:162::-;4485:4;4508:18;:25;4527:5;4508:25;;;;;;;;;;;;;;;:35;4534:8;4508:35;;;;;;;;;;;;;;;;;;;;;;;;;4501:42;;4388:162;;;;:::o;829:155:9:-;914:4;952:25;937:40;;;:11;:40;;;;930:47;;829:155;;;:::o;13466:133:1:-;13547:16;13555:7;13547;:16::i;:::-;13539:53;;;;;;;;;;;;:::i;:::-;;;;;;;;;13466:133;:::o;640:96:6:-;693:7;719:10;712:17;;640:96;:::o;12768:171:1:-;12869:2;12842:15;:24;12858:7;12842:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;12924:7;12920:2;12886:46;;12895:23;12910:7;12895:14;:23::i;:::-;12886:46;;;;;;;;;;;;12768:171;;:::o;7540:261::-;7633:4;7649:13;7665:23;7680:7;7665:14;:23::i;:::-;7649:39;;7717:5;7706:16;;:7;:16;;;:52;;;;7726:32;7743:5;7750:7;7726:16;:32::i;:::-;7706:52;:87;;;;7786:7;7762:31;;:20;7774:7;7762:11;:20::i;:::-;:31;;;7706:87;7698:96;;;7540:261;;;;:::o;11423:1233::-;11577:4;11550:31;;:23;11565:7;11550:14;:23::i;:::-;:31;;;11542:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11655:1;11641:16;;:2;:16;;;11633:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;11709:42;11730:4;11736:2;11740:7;11749:1;11709:20;:42::i;:::-;11878:4;11851:31;;:23;11866:7;11851:14;:23::i;:::-;:31;;;11843:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11993:15;:24;12009:7;11993:24;;;;;;;;;;;;11986:31;;;;;;;;;;;12480:1;12461:9;:15;12471:4;12461:15;;;;;;;;;;;;;;;;:20;;;;;;;;;;;12512:1;12495:9;:13;12505:2;12495:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;12552:2;12533:7;:16;12541:7;12533:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;12589:7;12585:2;12570:27;;12579:4;12570:27;;;;;;;;;;;;12608:41;12628:4;12634:2;12638:7;12647:1;12608:19;:41::i;:::-;11423:1233;;;:::o;6838:115::-;6904:7;6930;:16;6938:7;6930:16;;;;;;;;;;;;;;;;;;;;;6923:23;;6838:115;;;:::o;13075:307::-;13225:8;13216:17;;:5;:17;;;13208:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;13311:8;13273:18;:25;13292:5;13273:25;;;;;;;;;;;;;;;:35;13299:8;13273:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;13356:8;13334:41;;13349:5;13334:41;;;13366:8;13334:41;;;;;;:::i;:::-;;;;;;;;13075:307;;;:::o;6424:305::-;6574:28;6584:4;6590:2;6594:7;6574:9;:28::i;:::-;6620:47;6643:4;6649:2;6653:7;6662:4;6620:22;:47::i;:::-;6612:110;;;;;;;;;;;;:::i;:::-;;;;;;;;;6424:305;;;;:::o;3319:92::-;3370:13;3395:9;;;;;;;;;;;;;;3319:92;:::o;415:696:8:-;471:13;520:14;557:1;537:17;548:5;537:10;:17::i;:::-;:21;520:38;;572:20;606:6;595:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;572:41;;627:11;753:6;749:2;745:15;737:6;733:28;726:35;;788:280;795:4;788:280;;;819:5;;;;;;;;958:8;953:2;946:5;942:14;937:30;932:3;924:44;1012:2;1003:11;;;;;;:::i;:::-;;;;;1045:1;1036:5;:10;788:280;1032:21;788:280;1088:6;1081:13;;;;;415:696;;;:::o;7256:126:1:-;7321:4;7373:1;7344:31;;:17;7353:7;7344:8;:17::i;:::-;:31;;;;7337:38;;7256:126;;;:::o;15698:396::-;15882:1;15870:9;:13;15866:222;;;15919:1;15903:18;;:4;:18;;;15899:85;;15960:9;15941;:15;15951:4;15941:15;;;;;;;;;;;;;;;;:28;;;;;;;:::i;:::-;;;;;;;;15899:85;16015:1;16001:16;;:2;:16;;;15997:81;;16054:9;16037;:13;16047:2;16037:13;;;;;;;;;;;;;;;;:26;;;;;;;:::i;:::-;;;;;;;;15997:81;15866:222;15698:396;;;;:::o;16800:153::-;;;;;:::o;14151:831::-;14300:4;14320:15;:2;:13;;;:15::i;:::-;14316:660;;;14371:2;14355:36;;;14392:12;:10;:12::i;:::-;14406:4;14412:7;14421:4;14355:71;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;14351:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14610:1;14593:6;:13;:18;14589:321;;14635:60;;;;;;;;;;:::i;:::-;;;;;;;;14589:321;14862:6;14856:13;14847:6;14843:2;14839:15;14832:38;14351:573;14486:41;;;14476:51;;;:6;:51;;;;14469:58;;;;;14316:660;14961:4;14954:11;;14151:831;;;;;;;:::o;9889:890:11:-;9942:7;9961:14;9978:1;9961:18;;10026:6;10017:5;:15;10013:99;;10061:6;10052:15;;;;;;:::i;:::-;;;;;10095:2;10085:12;;;;10013:99;10138:6;10129:5;:15;10125:99;;10173:6;10164:15;;;;;;:::i;:::-;;;;;10207:2;10197:12;;;;10125:99;10250:6;10241:5;:15;10237:99;;10285:6;10276:15;;;;;;:::i;:::-;;;;;10319:2;10309:12;;;;10237:99;10362:5;10353;:14;10349:96;;10396:5;10387:14;;;;;;:::i;:::-;;;;;10429:1;10419:11;;;;10349:96;10471:5;10462;:14;10458:96;;10505:5;10496:14;;;;;;:::i;:::-;;;;;10538:1;10528:11;;;;10458:96;10580:5;10571;:14;10567:96;;10614:5;10605:14;;;;;;:::i;:::-;;;;;10647:1;10637:11;;;;10567:96;10689:5;10680;:14;10676:64;;10724:1;10714:11;;;;10676:64;10766:6;10759:13;;;9889:890;;;:::o;1175:320:5:-;1235:4;1487:1;1465:7;:19;;;:23;1458:30;;1175:320;;;:::o;7:75:14:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:99::-;1570:6;1604:5;1598:12;1588:22;;1518:99;;;:::o;1623:169::-;1707:11;1741:6;1736:3;1729:19;1781:4;1776:3;1772:14;1757:29;;1623:169;;;;:::o;1798:246::-;1879:1;1889:113;1903:6;1900:1;1897:13;1889:113;;;1988:1;1983:3;1979:11;1973:18;1969:1;1964:3;1960:11;1953:39;1925:2;1922:1;1918:10;1913:15;;1889:113;;;2036:1;2027:6;2022:3;2018:16;2011:27;1860:184;1798:246;;;:::o;2050:102::-;2091:6;2142:2;2138:7;2133:2;2126:5;2122:14;2118:28;2108:38;;2050:102;;;:::o;2158:377::-;2246:3;2274:39;2307:5;2274:39;:::i;:::-;2329:71;2393:6;2388:3;2329:71;:::i;:::-;2322:78;;2409:65;2467:6;2462:3;2455:4;2448:5;2444:16;2409:65;:::i;:::-;2499:29;2521:6;2499:29;:::i;:::-;2494:3;2490:39;2483:46;;2250:285;2158:377;;;;:::o;2541:313::-;2654:4;2692:2;2681:9;2677:18;2669:26;;2741:9;2735:4;2731:20;2727:1;2716:9;2712:17;2705:47;2769:78;2842:4;2833:6;2769:78;:::i;:::-;2761:86;;2541:313;;;;:::o;2860:77::-;2897:7;2926:5;2915:16;;2860:77;;;:::o;2943:122::-;3016:24;3034:5;3016:24;:::i;:::-;3009:5;3006:35;2996:63;;3055:1;3052;3045:12;2996:63;2943:122;:::o;3071:139::-;3117:5;3155:6;3142:20;3133:29;;3171:33;3198:5;3171:33;:::i;:::-;3071:139;;;;:::o;3216:329::-;3275:6;3324:2;3312:9;3303:7;3299:23;3295:32;3292:119;;;3330:79;;:::i;:::-;3292:119;3450:1;3475:53;3520:7;3511:6;3500:9;3496:22;3475:53;:::i;:::-;3465:63;;3421:117;3216:329;;;;:::o;3551:126::-;3588:7;3628:42;3621:5;3617:54;3606:65;;3551:126;;;:::o;3683:96::-;3720:7;3749:24;3767:5;3749:24;:::i;:::-;3738:35;;3683:96;;;:::o;3785:118::-;3872:24;3890:5;3872:24;:::i;:::-;3867:3;3860:37;3785:118;;:::o;3909:222::-;4002:4;4040:2;4029:9;4025:18;4017:26;;4053:71;4121:1;4110:9;4106:17;4097:6;4053:71;:::i;:::-;3909:222;;;;:::o;4137:122::-;4210:24;4228:5;4210:24;:::i;:::-;4203:5;4200:35;4190:63;;4249:1;4246;4239:12;4190:63;4137:122;:::o;4265:139::-;4311:5;4349:6;4336:20;4327:29;;4365:33;4392:5;4365:33;:::i;:::-;4265:139;;;;:::o;4410:474::-;4478:6;4486;4535:2;4523:9;4514:7;4510:23;4506:32;4503:119;;;4541:79;;:::i;:::-;4503:119;4661:1;4686:53;4731:7;4722:6;4711:9;4707:22;4686:53;:::i;:::-;4676:63;;4632:117;4788:2;4814:53;4859:7;4850:6;4839:9;4835:22;4814:53;:::i;:::-;4804:63;;4759:118;4410:474;;;;;:::o;4890:619::-;4967:6;4975;4983;5032:2;5020:9;5011:7;5007:23;5003:32;5000:119;;;5038:79;;:::i;:::-;5000:119;5158:1;5183:53;5228:7;5219:6;5208:9;5204:22;5183:53;:::i;:::-;5173:63;;5129:117;5285:2;5311:53;5356:7;5347:6;5336:9;5332:22;5311:53;:::i;:::-;5301:63;;5256:118;5413:2;5439:53;5484:7;5475:6;5464:9;5460:22;5439:53;:::i;:::-;5429:63;;5384:118;4890:619;;;;;:::o;5515:329::-;5574:6;5623:2;5611:9;5602:7;5598:23;5594:32;5591:119;;;5629:79;;:::i;:::-;5591:119;5749:1;5774:53;5819:7;5810:6;5799:9;5795:22;5774:53;:::i;:::-;5764:63;;5720:117;5515:329;;;;:::o;5850:118::-;5937:24;5955:5;5937:24;:::i;:::-;5932:3;5925:37;5850:118;;:::o;5974:222::-;6067:4;6105:2;6094:9;6090:18;6082:26;;6118:71;6186:1;6175:9;6171:17;6162:6;6118:71;:::i;:::-;5974:222;;;;:::o;6202:116::-;6272:21;6287:5;6272:21;:::i;:::-;6265:5;6262:32;6252:60;;6308:1;6305;6298:12;6252:60;6202:116;:::o;6324:133::-;6367:5;6405:6;6392:20;6383:29;;6421:30;6445:5;6421:30;:::i;:::-;6324:133;;;;:::o;6463:468::-;6528:6;6536;6585:2;6573:9;6564:7;6560:23;6556:32;6553:119;;;6591:79;;:::i;:::-;6553:119;6711:1;6736:53;6781:7;6772:6;6761:9;6757:22;6736:53;:::i;:::-;6726:63;;6682:117;6838:2;6864:50;6906:7;6897:6;6886:9;6882:22;6864:50;:::i;:::-;6854:60;;6809:115;6463:468;;;;;:::o;6937:117::-;7046:1;7043;7036:12;7060:117;7169:1;7166;7159:12;7183:180;7231:77;7228:1;7221:88;7328:4;7325:1;7318:15;7352:4;7349:1;7342:15;7369:281;7452:27;7474:4;7452:27;:::i;:::-;7444:6;7440:40;7582:6;7570:10;7567:22;7546:18;7534:10;7531:34;7528:62;7525:88;;;7593:18;;:::i;:::-;7525:88;7633:10;7629:2;7622:22;7412:238;7369:281;;:::o;7656:129::-;7690:6;7717:20;;:::i;:::-;7707:30;;7746:33;7774:4;7766:6;7746:33;:::i;:::-;7656:129;;;:::o;7791:307::-;7852:4;7942:18;7934:6;7931:30;7928:56;;;7964:18;;:::i;:::-;7928:56;8002:29;8024:6;8002:29;:::i;:::-;7994:37;;8086:4;8080;8076:15;8068:23;;7791:307;;;:::o;8104:146::-;8201:6;8196:3;8191;8178:30;8242:1;8233:6;8228:3;8224:16;8217:27;8104:146;;;:::o;8256:423::-;8333:5;8358:65;8374:48;8415:6;8374:48;:::i;:::-;8358:65;:::i;:::-;8349:74;;8446:6;8439:5;8432:21;8484:4;8477:5;8473:16;8522:3;8513:6;8508:3;8504:16;8501:25;8498:112;;;8529:79;;:::i;:::-;8498:112;8619:54;8666:6;8661:3;8656;8619:54;:::i;:::-;8339:340;8256:423;;;;;:::o;8698:338::-;8753:5;8802:3;8795:4;8787:6;8783:17;8779:27;8769:122;;8810:79;;:::i;:::-;8769:122;8927:6;8914:20;8952:78;9026:3;9018:6;9011:4;9003:6;8999:17;8952:78;:::i;:::-;8943:87;;8759:277;8698:338;;;;:::o;9042:943::-;9137:6;9145;9153;9161;9210:3;9198:9;9189:7;9185:23;9181:33;9178:120;;;9217:79;;:::i;:::-;9178:120;9337:1;9362:53;9407:7;9398:6;9387:9;9383:22;9362:53;:::i;:::-;9352:63;;9308:117;9464:2;9490:53;9535:7;9526:6;9515:9;9511:22;9490:53;:::i;:::-;9480:63;;9435:118;9592:2;9618:53;9663:7;9654:6;9643:9;9639:22;9618:53;:::i;:::-;9608:63;;9563:118;9748:2;9737:9;9733:18;9720:32;9779:18;9771:6;9768:30;9765:117;;;9801:79;;:::i;:::-;9765:117;9906:62;9960:7;9951:6;9940:9;9936:22;9906:62;:::i;:::-;9896:72;;9691:287;9042:943;;;;;;;:::o;9991:474::-;10059:6;10067;10116:2;10104:9;10095:7;10091:23;10087:32;10084:119;;;10122:79;;:::i;:::-;10084:119;10242:1;10267:53;10312:7;10303:6;10292:9;10288:22;10267:53;:::i;:::-;10257:63;;10213:117;10369:2;10395:53;10440:7;10431:6;10420:9;10416:22;10395:53;:::i;:::-;10385:63;;10340:118;9991:474;;;;;:::o;10471:180::-;10519:77;10516:1;10509:88;10616:4;10613:1;10606:15;10640:4;10637:1;10630:15;10657:320;10701:6;10738:1;10732:4;10728:12;10718:22;;10785:1;10779:4;10775:12;10806:18;10796:81;;10862:4;10854:6;10850:17;10840:27;;10796:81;10924:2;10916:6;10913:14;10893:18;10890:38;10887:84;;10943:18;;:::i;:::-;10887:84;10708:269;10657:320;;;:::o;10983:220::-;11123:34;11119:1;11111:6;11107:14;11100:58;11192:3;11187:2;11179:6;11175:15;11168:28;10983:220;:::o;11209:366::-;11351:3;11372:67;11436:2;11431:3;11372:67;:::i;:::-;11365:74;;11448:93;11537:3;11448:93;:::i;:::-;11566:2;11561:3;11557:12;11550:19;;11209:366;;;:::o;11581:419::-;11747:4;11785:2;11774:9;11770:18;11762:26;;11834:9;11828:4;11824:20;11820:1;11809:9;11805:17;11798:47;11862:131;11988:4;11862:131;:::i;:::-;11854:139;;11581:419;;;:::o;12006:248::-;12146:34;12142:1;12134:6;12130:14;12123:58;12215:31;12210:2;12202:6;12198:15;12191:56;12006:248;:::o;12260:366::-;12402:3;12423:67;12487:2;12482:3;12423:67;:::i;:::-;12416:74;;12499:93;12588:3;12499:93;:::i;:::-;12617:2;12612:3;12608:12;12601:19;;12260:366;;;:::o;12632:419::-;12798:4;12836:2;12825:9;12821:18;12813:26;;12885:9;12879:4;12875:20;12871:1;12860:9;12856:17;12849:47;12913:131;13039:4;12913:131;:::i;:::-;12905:139;;12632:419;;;:::o;13057:232::-;13197:34;13193:1;13185:6;13181:14;13174:58;13266:15;13261:2;13253:6;13249:15;13242:40;13057:232;:::o;13295:366::-;13437:3;13458:67;13522:2;13517:3;13458:67;:::i;:::-;13451:74;;13534:93;13623:3;13534:93;:::i;:::-;13652:2;13647:3;13643:12;13636:19;;13295:366;;;:::o;13667:419::-;13833:4;13871:2;13860:9;13856:18;13848:26;;13920:9;13914:4;13910:20;13906:1;13895:9;13891:17;13884:47;13948:131;14074:4;13948:131;:::i;:::-;13940:139;;13667:419;;;:::o;14092:174::-;14232:26;14228:1;14220:6;14216:14;14209:50;14092:174;:::o;14272:366::-;14414:3;14435:67;14499:2;14494:3;14435:67;:::i;:::-;14428:74;;14511:93;14600:3;14511:93;:::i;:::-;14629:2;14624:3;14620:12;14613:19;;14272:366;;;:::o;14644:419::-;14810:4;14848:2;14837:9;14833:18;14825:26;;14897:9;14891:4;14887:20;14883:1;14872:9;14868:17;14861:47;14925:131;15051:4;14925:131;:::i;:::-;14917:139;;14644:419;;;:::o;15069:228::-;15209:34;15205:1;15197:6;15193:14;15186:58;15278:11;15273:2;15265:6;15261:15;15254:36;15069:228;:::o;15303:366::-;15445:3;15466:67;15530:2;15525:3;15466:67;:::i;:::-;15459:74;;15542:93;15631:3;15542:93;:::i;:::-;15660:2;15655:3;15651:12;15644:19;;15303:366;;;:::o;15675:419::-;15841:4;15879:2;15868:9;15864:18;15856:26;;15928:9;15922:4;15918:20;15914:1;15903:9;15899:17;15892:47;15956:131;16082:4;15956:131;:::i;:::-;15948:139;;15675:419;;;:::o;16100:148::-;16202:11;16239:3;16224:18;;16100:148;;;;:::o;16254:390::-;16360:3;16388:39;16421:5;16388:39;:::i;:::-;16443:89;16525:6;16520:3;16443:89;:::i;:::-;16436:96;;16541:65;16599:6;16594:3;16587:4;16580:5;16576:16;16541:65;:::i;:::-;16631:6;16626:3;16622:16;16615:23;;16364:280;16254:390;;;;:::o;16650:435::-;16830:3;16852:95;16943:3;16934:6;16852:95;:::i;:::-;16845:102;;16964:95;17055:3;17046:6;16964:95;:::i;:::-;16957:102;;17076:3;17069:10;;16650:435;;;;;:::o;17091:224::-;17231:34;17227:1;17219:6;17215:14;17208:58;17300:7;17295:2;17287:6;17283:15;17276:32;17091:224;:::o;17321:366::-;17463:3;17484:67;17548:2;17543:3;17484:67;:::i;:::-;17477:74;;17560:93;17649:3;17560:93;:::i;:::-;17678:2;17673:3;17669:12;17662:19;;17321:366;;;:::o;17693:419::-;17859:4;17897:2;17886:9;17882:18;17874:26;;17946:9;17940:4;17936:20;17932:1;17921:9;17917:17;17910:47;17974:131;18100:4;17974:131;:::i;:::-;17966:139;;17693:419;;;:::o;18118:223::-;18258:34;18254:1;18246:6;18242:14;18235:58;18327:6;18322:2;18314:6;18310:15;18303:31;18118:223;:::o;18347:366::-;18489:3;18510:67;18574:2;18569:3;18510:67;:::i;:::-;18503:74;;18586:93;18675:3;18586:93;:::i;:::-;18704:2;18699:3;18695:12;18688:19;;18347:366;;;:::o;18719:419::-;18885:4;18923:2;18912:9;18908:18;18900:26;;18972:9;18966:4;18962:20;18958:1;18947:9;18943:17;18936:47;19000:131;19126:4;19000:131;:::i;:::-;18992:139;;18719:419;;;:::o;19144:175::-;19284:27;19280:1;19272:6;19268:14;19261:51;19144:175;:::o;19325:366::-;19467:3;19488:67;19552:2;19547:3;19488:67;:::i;:::-;19481:74;;19564:93;19653:3;19564:93;:::i;:::-;19682:2;19677:3;19673:12;19666:19;;19325:366;;;:::o;19697:419::-;19863:4;19901:2;19890:9;19886:18;19878:26;;19950:9;19944:4;19940:20;19936:1;19925:9;19921:17;19914:47;19978:131;20104:4;19978:131;:::i;:::-;19970:139;;19697:419;;;:::o;20122:237::-;20262:34;20258:1;20250:6;20246:14;20239:58;20331:20;20326:2;20318:6;20314:15;20307:45;20122:237;:::o;20365:366::-;20507:3;20528:67;20592:2;20587:3;20528:67;:::i;:::-;20521:74;;20604:93;20693:3;20604:93;:::i;:::-;20722:2;20717:3;20713:12;20706:19;;20365:366;;;:::o;20737:419::-;20903:4;20941:2;20930:9;20926:18;20918:26;;20990:9;20984:4;20980:20;20976:1;20965:9;20961:17;20954:47;21018:131;21144:4;21018:131;:::i;:::-;21010:139;;20737:419;;;:::o;21162:180::-;21210:77;21207:1;21200:88;21307:4;21304:1;21297:15;21331:4;21328:1;21321:15;21348:180;21396:77;21393:1;21386:88;21493:4;21490:1;21483:15;21517:4;21514:1;21507:15;21534:194;21574:4;21594:20;21612:1;21594:20;:::i;:::-;21589:25;;21628:20;21646:1;21628:20;:::i;:::-;21623:25;;21672:1;21669;21665:9;21657:17;;21696:1;21690:4;21687:11;21684:37;;;21701:18;;:::i;:::-;21684:37;21534:194;;;;:::o;21734:191::-;21774:3;21793:20;21811:1;21793:20;:::i;:::-;21788:25;;21827:20;21845:1;21827:20;:::i;:::-;21822:25;;21870:1;21867;21863:9;21856:16;;21891:3;21888:1;21885:10;21882:36;;;21898:18;;:::i;:::-;21882:36;21734:191;;;;:::o;21931:98::-;21982:6;22016:5;22010:12;22000:22;;21931:98;;;:::o;22035:168::-;22118:11;22152:6;22147:3;22140:19;22192:4;22187:3;22183:14;22168:29;;22035:168;;;;:::o;22209:373::-;22295:3;22323:38;22355:5;22323:38;:::i;:::-;22377:70;22440:6;22435:3;22377:70;:::i;:::-;22370:77;;22456:65;22514:6;22509:3;22502:4;22495:5;22491:16;22456:65;:::i;:::-;22546:29;22568:6;22546:29;:::i;:::-;22541:3;22537:39;22530:46;;22299:283;22209:373;;;;:::o;22588:640::-;22783:4;22821:3;22810:9;22806:19;22798:27;;22835:71;22903:1;22892:9;22888:17;22879:6;22835:71;:::i;:::-;22916:72;22984:2;22973:9;22969:18;22960:6;22916:72;:::i;:::-;22998;23066:2;23055:9;23051:18;23042:6;22998:72;:::i;:::-;23117:9;23111:4;23107:20;23102:2;23091:9;23087:18;23080:48;23145:76;23216:4;23207:6;23145:76;:::i;:::-;23137:84;;22588:640;;;;;;;:::o;23234:141::-;23290:5;23321:6;23315:13;23306:22;;23337:32;23363:5;23337:32;:::i;:::-;23234:141;;;;:::o;23381:349::-;23450:6;23499:2;23487:9;23478:7;23474:23;23470:32;23467:119;;;23505:79;;:::i;:::-;23467:119;23625:1;23650:63;23705:7;23696:6;23685:9;23681:22;23650:63;:::i;:::-;23640:73;;23596:127;23381:349;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1783800","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"2921","getApproved(uint256)":"5277","isApprovedForAll(address,address)":"infinite","name()":"infinite","ownerOf(uint256)":"3022","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","supportsInterface(bytes4)":"774","symbol()":"infinite","tokenURI(uint256)":"3459","transferFrom(address,address,uint256)":"infinite"},"internal":{"_afterTokenTransfer(address,address,uint256,uint256)":"17","_approve(address,uint256)":"infinite","_baseURI()":"infinite","_beforeTokenTransfer(address,address,uint256,uint256)":"infinite","_burn(uint256)":"infinite","_checkOnERC721Received(address,address,uint256,bytes memory)":"infinite","_exists(uint256)":"2312","_isApprovedOrOwner(address,uint256)":"infinite","_mint(address,uint256)":"infinite","_ownerOf(uint256)":"2248","_requireMinted(uint256)":"infinite","_safeMint(address,uint256)":"infinite","_safeMint(address,uint256,bytes memory)":"infinite","_safeTransfer(address,address,uint256,bytes memory)":"infinite","_setApprovalForAll(address,address,bool)":"infinite","_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the contract by setting a `name` and a `symbol` to the token collection.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":\"ERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":140,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":144,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":148,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":152,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":158,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Required interface of an ERC721 compliant contract.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."}},"title":"ERC721 token receiver interface","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"IERC721Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional metadata extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a09abdc3732e0c34fe4885aa8571bfb41a251fdcff68744f78a9499a155ab62c64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG0 SWAP11 0xBD 0xC3 PUSH20 0x2E0C34FE4885AA8571BFB41A251FDCFF68744F78 0xA9 0x49 SWAP11 ISZERO GAS 0xB6 0x2C PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"194:8964:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a09abdc3732e0c34fe4885aa8571bfb41a251fdcff68744f78a9499a155ab62c64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG0 SWAP11 0xBD 0xC3 PUSH20 0x2E0C34FE4885AA8571BFB41A251FDCFF68744F78 0xA9 0x49 SWAP11 ISZERO GAS 0xB6 0x2C PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"194:8964:5:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Counters.sol":{"Counters":{"abi":[],"devdoc":{"author":"Matt Condon (@shrugs)","details":"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`","kind":"dev","methods":{},"title":"Counters","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206d57eab5abce5980e16157af3e54f91ac4d40b1cd70c31d551381348bbab7cb764736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH14 0x57EAB5ABCE5980E16157AF3E54F9 BYTE 0xC4 0xD4 SIGNEXTEND SHR 0xD7 0xC BALANCE 0xD5 MLOAD CODESIZE SGT BASEFEE 0xBB 0xAB PUSH29 0xB764736F6C634300081100330000000000000000000000000000000000 ","sourceMap":"424:971:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206d57eab5abce5980e16157af3e54f91ac4d40b1cd70c31d551381348bbab7cb764736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH14 0x57EAB5ABCE5980E16157AF3E54F9 BYTE 0xC4 0xD4 SIGNEXTEND SHR 0xD7 0xC BALANCE 0xD5 MLOAD CODESIZE SGT BASEFEE 0xBB 0xAB PUSH29 0xB764736F6C634300081100330000000000000000000000000000000000 ","sourceMap":"424:971:7:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"current(struct Counters.Counter storage pointer)":"infinite","decrement(struct Counters.Counter storage pointer)":"infinite","increment(struct Counters.Counter storage pointer)":"infinite","reset(struct Counters.Counter storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Counters.sol\":\"Counters\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122060017698e01c6932f89fdb7b12ba917edb07b5f945503f3abdcd2267742fb84b64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH1 0x1 PUSH23 0x98E01C6932F89FDB7B12BA917EDB07B5F945503F3ABDCD 0x22 PUSH8 0x742FB84B64736F6C PUSH4 0x43000811 STOP CALLER ","sourceMap":"188:2065:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122060017698e01c6932f89fdb7b12ba917edb07b5f945503f3abdcd2267742fb84b64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH1 0x1 PUSH23 0x98E01C6932F89FDB7B12BA917EDB07B5F945503F3ABDCD 0x22 PUSH8 0x742FB84B64736F6C PUSH4 0x43000811 STOP CALLER ","sourceMap":"188:2065:8:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205dbe6febdcf68c239e1ab1b2757512b1ef3440b4378677bd12b1687ef6a5a35764736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5D 0xBE PUSH16 0xEBDCF68C239E1AB1B2757512B1EF3440 0xB4 CALLDATACOPY DUP7 PUSH24 0xBD12B1687EF6A5A35764736F6C6343000811003300000000 ","sourceMap":"202:12302:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205dbe6febdcf68c239e1ab1b2757512b1ef3440b4378677bd12b1687ef6a5a35764736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5D 0xBE PUSH16 0xEBDCF68C239E1AB1B2757512B1EF3440 0xB4 CALLDATACOPY DUP7 PUSH24 0xBD12B1687EF6A5A35764736F6C6343000811003300000000 ","sourceMap":"202:12302:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"SafeMath":{"abi":[],"devdoc":{"details":"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a02c648438644133931b4c66812933dcc54aec01449b04904e46734647f00bf764736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG0 0x2C PUSH5 0x8438644133 SWAP4 SHL 0x4C PUSH7 0x812933DCC54AEC ADD DIFFICULTY SWAP12 DIV SWAP1 0x4E CHAINID PUSH20 0x4647F00BF764736F6C6343000811003300000000 ","sourceMap":"482:6300:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a02c648438644133931b4c66812933dcc54aec01449b04904e46734647f00bf764736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG0 0x2C PUSH5 0x8438644133 SWAP4 SHL 0x4C PUSH7 0x812933DCC54AEC ADD DIFFICULTY SWAP12 DIV SWAP1 0x4E CHAINID PUSH20 0x4647F00BF764736F6C6343000811003300000000 ","sourceMap":"482:6300:12:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"add(uint256,uint256)":"infinite","div(uint256,uint256)":"infinite","div(uint256,uint256,string memory)":"infinite","mod(uint256,uint256)":"infinite","mod(uint256,uint256,string memory)":"infinite","mul(uint256,uint256)":"infinite","sub(uint256,uint256)":"infinite","sub(uint256,uint256,string memory)":"infinite","tryAdd(uint256,uint256)":"infinite","tryDiv(uint256,uint256)":"infinite","tryMod(uint256,uint256)":"infinite","tryMul(uint256,uint256)":"infinite","trySub(uint256,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/FundingContract.sol":{"FundingContract":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"FundingContract__NotEnoughETH","type":"error"},{"inputs":[],"name":"FundingContract__NotGroupFunding","type":"error"},{"inputs":[],"name":"FundingContract__TransferFailed","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"depositFunds","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"funder","type":"address"}],"name":"getAddressToAmountFunded","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getFunder","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getIsGroupWithdrawal","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMinimumFundingAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVestingPeriod","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getWithdrawalFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"requestForWithdrawal","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdrawFunds","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdrawalCheck","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"owner()":{"details":"Returns the address of the current owner."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_175":{"entryPoint":null,"id":175,"parameterSlots":2,"returnSlots":0},"@_23":{"entryPoint":null,"id":23,"parameterSlots":0,"returnSlots":0},"@_3101":{"entryPoint":null,"id":3101,"parameterSlots":0,"returnSlots":0},"@_msgSender_1560":{"entryPoint":202,"id":1560,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_111":{"entryPoint":210,"id":111,"parameterSlots":1,"returnSlots":0},"array_dataslot_t_string_storage":{"entryPoint":566,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":408,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":887,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_uint256":{"entryPoint":702,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":848,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_uint256_to_t_uint256":{"entryPoint":722,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":1042,"id":null,"parameterSlots":2,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":587,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":513,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":1012,"id":null,"parameterSlots":2,"returnSlots":1},"identity":{"entryPoint":712,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":980,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x22":{"entryPoint":466,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":419,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":762,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":603,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":967,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":820,"id":null,"parameterSlots":2,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":616,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":772,"id":null,"parameterSlots":3,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":815,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:5231:14","statements":[{"body":{"nodeType":"YulBlock","src":"66:40:14","statements":[{"nodeType":"YulAssignment","src":"77:22:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"93:5:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"87:5:14"},"nodeType":"YulFunctionCall","src":"87:12:14"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"77:6:14"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"49:5:14","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"59:6:14","type":""}],"src":"7:99:14"},{"body":{"nodeType":"YulBlock","src":"140:152:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"157:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"160:77:14","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"150:6:14"},"nodeType":"YulFunctionCall","src":"150:88:14"},"nodeType":"YulExpressionStatement","src":"150:88:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"254:1:14","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"257:4:14","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"247:6:14"},"nodeType":"YulFunctionCall","src":"247:15:14"},"nodeType":"YulExpressionStatement","src":"247:15:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"278:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"281:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"271:6:14"},"nodeType":"YulFunctionCall","src":"271:15:14"},"nodeType":"YulExpressionStatement","src":"271:15:14"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"112:180:14"},{"body":{"nodeType":"YulBlock","src":"326:152:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"343:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"346:77:14","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"336:6:14"},"nodeType":"YulFunctionCall","src":"336:88:14"},"nodeType":"YulExpressionStatement","src":"336:88:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"440:1:14","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"443:4:14","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"433:6:14"},"nodeType":"YulFunctionCall","src":"433:15:14"},"nodeType":"YulExpressionStatement","src":"433:15:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"464:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"467:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"457:6:14"},"nodeType":"YulFunctionCall","src":"457:15:14"},"nodeType":"YulExpressionStatement","src":"457:15:14"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"298:180:14"},{"body":{"nodeType":"YulBlock","src":"535:269:14","statements":[{"nodeType":"YulAssignment","src":"545:22:14","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"559:4:14"},{"kind":"number","nodeType":"YulLiteral","src":"565:1:14","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"555:3:14"},"nodeType":"YulFunctionCall","src":"555:12:14"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"545:6:14"}]},{"nodeType":"YulVariableDeclaration","src":"576:38:14","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"606:4:14"},{"kind":"number","nodeType":"YulLiteral","src":"612:1:14","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"602:3:14"},"nodeType":"YulFunctionCall","src":"602:12:14"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"580:18:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"653:51:14","statements":[{"nodeType":"YulAssignment","src":"667:27:14","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"681:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"689:4:14","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"677:3:14"},"nodeType":"YulFunctionCall","src":"677:17:14"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"667:6:14"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"633:18:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"626:6:14"},"nodeType":"YulFunctionCall","src":"626:26:14"},"nodeType":"YulIf","src":"623:81:14"},{"body":{"nodeType":"YulBlock","src":"756:42:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"770:16:14"},"nodeType":"YulFunctionCall","src":"770:18:14"},"nodeType":"YulExpressionStatement","src":"770:18:14"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"720:18:14"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"743:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"751:2:14","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"740:2:14"},"nodeType":"YulFunctionCall","src":"740:14:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"717:2:14"},"nodeType":"YulFunctionCall","src":"717:38:14"},"nodeType":"YulIf","src":"714:84:14"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"519:4:14","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"528:6:14","type":""}],"src":"484:320:14"},{"body":{"nodeType":"YulBlock","src":"864:87:14","statements":[{"nodeType":"YulAssignment","src":"874:11:14","value":{"name":"ptr","nodeType":"YulIdentifier","src":"882:3:14"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"874:4:14"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"902:1:14","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"905:3:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"895:6:14"},"nodeType":"YulFunctionCall","src":"895:14:14"},"nodeType":"YulExpressionStatement","src":"895:14:14"},{"nodeType":"YulAssignment","src":"918:26:14","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"936:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"939:4:14","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"926:9:14"},"nodeType":"YulFunctionCall","src":"926:18:14"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"918:4:14"}]}]},"name":"array_dataslot_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"851:3:14","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"859:4:14","type":""}],"src":"810:141:14"},{"body":{"nodeType":"YulBlock","src":"1001:49:14","statements":[{"nodeType":"YulAssignment","src":"1011:33:14","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1029:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"1036:2:14","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1025:3:14"},"nodeType":"YulFunctionCall","src":"1025:14:14"},{"kind":"number","nodeType":"YulLiteral","src":"1041:2:14","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"1021:3:14"},"nodeType":"YulFunctionCall","src":"1021:23:14"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"1011:6:14"}]}]},"name":"divide_by_32_ceil","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"984:5:14","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"994:6:14","type":""}],"src":"957:93:14"},{"body":{"nodeType":"YulBlock","src":"1109:54:14","statements":[{"nodeType":"YulAssignment","src":"1119:37:14","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"1144:4:14"},{"name":"value","nodeType":"YulIdentifier","src":"1150:5:14"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1140:3:14"},"nodeType":"YulFunctionCall","src":"1140:16:14"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"1119:8:14"}]}]},"name":"shift_left_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"1084:4:14","type":""},{"name":"value","nodeType":"YulTypedName","src":"1090:5:14","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"1100:8:14","type":""}],"src":"1056:107:14"},{"body":{"nodeType":"YulBlock","src":"1245:317:14","statements":[{"nodeType":"YulVariableDeclaration","src":"1255:35:14","value":{"arguments":[{"name":"shiftBytes","nodeType":"YulIdentifier","src":"1276:10:14"},{"kind":"number","nodeType":"YulLiteral","src":"1288:1:14","type":"","value":"8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"1272:3:14"},"nodeType":"YulFunctionCall","src":"1272:18:14"},"variables":[{"name":"shiftBits","nodeType":"YulTypedName","src":"1259:9:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1299:109:14","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"1330:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"1341:66:14","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"1311:18:14"},"nodeType":"YulFunctionCall","src":"1311:97:14"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"1303:4:14","type":""}]},{"nodeType":"YulAssignment","src":"1417:51:14","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"1448:9:14"},{"name":"toInsert","nodeType":"YulIdentifier","src":"1459:8:14"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"1429:18:14"},"nodeType":"YulFunctionCall","src":"1429:39:14"},"variableNames":[{"name":"toInsert","nodeType":"YulIdentifier","src":"1417:8:14"}]},{"nodeType":"YulAssignment","src":"1477:30:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1490:5:14"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"1501:4:14"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1497:3:14"},"nodeType":"YulFunctionCall","src":"1497:9:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1486:3:14"},"nodeType":"YulFunctionCall","src":"1486:21:14"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1477:5:14"}]},{"nodeType":"YulAssignment","src":"1516:40:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1529:5:14"},{"arguments":[{"name":"toInsert","nodeType":"YulIdentifier","src":"1540:8:14"},{"name":"mask","nodeType":"YulIdentifier","src":"1550:4:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1536:3:14"},"nodeType":"YulFunctionCall","src":"1536:19:14"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1526:2:14"},"nodeType":"YulFunctionCall","src":"1526:30:14"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"1516:6:14"}]}]},"name":"update_byte_slice_dynamic32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1206:5:14","type":""},{"name":"shiftBytes","nodeType":"YulTypedName","src":"1213:10:14","type":""},{"name":"toInsert","nodeType":"YulTypedName","src":"1225:8:14","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"1238:6:14","type":""}],"src":"1169:393:14"},{"body":{"nodeType":"YulBlock","src":"1613:32:14","statements":[{"nodeType":"YulAssignment","src":"1623:16:14","value":{"name":"value","nodeType":"YulIdentifier","src":"1634:5:14"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1623:7:14"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1595:5:14","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1605:7:14","type":""}],"src":"1568:77:14"},{"body":{"nodeType":"YulBlock","src":"1683:28:14","statements":[{"nodeType":"YulAssignment","src":"1693:12:14","value":{"name":"value","nodeType":"YulIdentifier","src":"1700:5:14"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"1693:3:14"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1669:5:14","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"1679:3:14","type":""}],"src":"1651:60:14"},{"body":{"nodeType":"YulBlock","src":"1777:82:14","statements":[{"nodeType":"YulAssignment","src":"1787:66:14","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1845:5:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1827:17:14"},"nodeType":"YulFunctionCall","src":"1827:24:14"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"1818:8:14"},"nodeType":"YulFunctionCall","src":"1818:34:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1800:17:14"},"nodeType":"YulFunctionCall","src":"1800:53:14"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"1787:9:14"}]}]},"name":"convert_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1757:5:14","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"1767:9:14","type":""}],"src":"1717:142:14"},{"body":{"nodeType":"YulBlock","src":"1912:28:14","statements":[{"nodeType":"YulAssignment","src":"1922:12:14","value":{"name":"value","nodeType":"YulIdentifier","src":"1929:5:14"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"1922:3:14"}]}]},"name":"prepare_store_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1898:5:14","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"1908:3:14","type":""}],"src":"1865:75:14"},{"body":{"nodeType":"YulBlock","src":"2022:193:14","statements":[{"nodeType":"YulVariableDeclaration","src":"2032:63:14","value":{"arguments":[{"name":"value_0","nodeType":"YulIdentifier","src":"2087:7:14"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"2056:30:14"},"nodeType":"YulFunctionCall","src":"2056:39:14"},"variables":[{"name":"convertedValue_0","nodeType":"YulTypedName","src":"2036:16:14","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2111:4:14"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2151:4:14"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"2145:5:14"},"nodeType":"YulFunctionCall","src":"2145:11:14"},{"name":"offset","nodeType":"YulIdentifier","src":"2158:6:14"},{"arguments":[{"name":"convertedValue_0","nodeType":"YulIdentifier","src":"2190:16:14"}],"functionName":{"name":"prepare_store_t_uint256","nodeType":"YulIdentifier","src":"2166:23:14"},"nodeType":"YulFunctionCall","src":"2166:41:14"}],"functionName":{"name":"update_byte_slice_dynamic32","nodeType":"YulIdentifier","src":"2117:27:14"},"nodeType":"YulFunctionCall","src":"2117:91:14"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2104:6:14"},"nodeType":"YulFunctionCall","src":"2104:105:14"},"nodeType":"YulExpressionStatement","src":"2104:105:14"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"1999:4:14","type":""},{"name":"offset","nodeType":"YulTypedName","src":"2005:6:14","type":""},{"name":"value_0","nodeType":"YulTypedName","src":"2013:7:14","type":""}],"src":"1946:269:14"},{"body":{"nodeType":"YulBlock","src":"2270:24:14","statements":[{"nodeType":"YulAssignment","src":"2280:8:14","value":{"kind":"number","nodeType":"YulLiteral","src":"2287:1:14","type":"","value":"0"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"2280:3:14"}]}]},"name":"zero_value_for_split_t_uint256","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"2266:3:14","type":""}],"src":"2221:73:14"},{"body":{"nodeType":"YulBlock","src":"2353:136:14","statements":[{"nodeType":"YulVariableDeclaration","src":"2363:46:14","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nodeType":"YulIdentifier","src":"2377:30:14"},"nodeType":"YulFunctionCall","src":"2377:32:14"},"variables":[{"name":"zero_0","nodeType":"YulTypedName","src":"2367:6:14","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2462:4:14"},{"name":"offset","nodeType":"YulIdentifier","src":"2468:6:14"},{"name":"zero_0","nodeType":"YulIdentifier","src":"2476:6:14"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"2418:43:14"},"nodeType":"YulFunctionCall","src":"2418:65:14"},"nodeType":"YulExpressionStatement","src":"2418:65:14"}]},"name":"storage_set_to_zero_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"2339:4:14","type":""},{"name":"offset","nodeType":"YulTypedName","src":"2345:6:14","type":""}],"src":"2300:189:14"},{"body":{"nodeType":"YulBlock","src":"2545:136:14","statements":[{"body":{"nodeType":"YulBlock","src":"2612:63:14","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2656:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"2663:1:14","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nodeType":"YulIdentifier","src":"2626:29:14"},"nodeType":"YulFunctionCall","src":"2626:39:14"},"nodeType":"YulExpressionStatement","src":"2626:39:14"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2565:5:14"},{"name":"end","nodeType":"YulIdentifier","src":"2572:3:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2562:2:14"},"nodeType":"YulFunctionCall","src":"2562:14:14"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2577:26:14","statements":[{"nodeType":"YulAssignment","src":"2579:22:14","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2592:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"2599:1:14","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2588:3:14"},"nodeType":"YulFunctionCall","src":"2588:13:14"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"2579:5:14"}]}]},"pre":{"nodeType":"YulBlock","src":"2559:2:14","statements":[]},"src":"2555:120:14"}]},"name":"clear_storage_range_t_bytes1","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"2533:5:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"2540:3:14","type":""}],"src":"2495:186:14"},{"body":{"nodeType":"YulBlock","src":"2766:464:14","statements":[{"body":{"nodeType":"YulBlock","src":"2792:431:14","statements":[{"nodeType":"YulVariableDeclaration","src":"2806:54:14","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2854:5:14"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"2822:31:14"},"nodeType":"YulFunctionCall","src":"2822:38:14"},"variables":[{"name":"dataArea","nodeType":"YulTypedName","src":"2810:8:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2873:63:14","value":{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"2896:8:14"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2924:10:14"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"2906:17:14"},"nodeType":"YulFunctionCall","src":"2906:29:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2892:3:14"},"nodeType":"YulFunctionCall","src":"2892:44:14"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"2877:11:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"3093:27:14","statements":[{"nodeType":"YulAssignment","src":"3095:23:14","value":{"name":"dataArea","nodeType":"YulIdentifier","src":"3110:8:14"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"3095:11:14"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"3077:10:14"},{"kind":"number","nodeType":"YulLiteral","src":"3089:2:14","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3074:2:14"},"nodeType":"YulFunctionCall","src":"3074:18:14"},"nodeType":"YulIf","src":"3071:49:14"},{"expression":{"arguments":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"3162:11:14"},{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"3179:8:14"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"3207:3:14"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"3189:17:14"},"nodeType":"YulFunctionCall","src":"3189:22:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3175:3:14"},"nodeType":"YulFunctionCall","src":"3175:37:14"}],"functionName":{"name":"clear_storage_range_t_bytes1","nodeType":"YulIdentifier","src":"3133:28:14"},"nodeType":"YulFunctionCall","src":"3133:80:14"},"nodeType":"YulExpressionStatement","src":"3133:80:14"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2783:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"2788:2:14","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2780:2:14"},"nodeType":"YulFunctionCall","src":"2780:11:14"},"nodeType":"YulIf","src":"2777:446:14"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"2742:5:14","type":""},{"name":"len","nodeType":"YulTypedName","src":"2749:3:14","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"2754:10:14","type":""}],"src":"2687:543:14"},{"body":{"nodeType":"YulBlock","src":"3299:54:14","statements":[{"nodeType":"YulAssignment","src":"3309:37:14","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"3334:4:14"},{"name":"value","nodeType":"YulIdentifier","src":"3340:5:14"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3330:3:14"},"nodeType":"YulFunctionCall","src":"3330:16:14"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"3309:8:14"}]}]},"name":"shift_right_unsigned_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"3274:4:14","type":""},{"name":"value","nodeType":"YulTypedName","src":"3280:5:14","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"3290:8:14","type":""}],"src":"3236:117:14"},{"body":{"nodeType":"YulBlock","src":"3410:118:14","statements":[{"nodeType":"YulVariableDeclaration","src":"3420:68:14","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3469:1:14","type":"","value":"8"},{"name":"bytes","nodeType":"YulIdentifier","src":"3472:5:14"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3465:3:14"},"nodeType":"YulFunctionCall","src":"3465:13:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3484:1:14","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3480:3:14"},"nodeType":"YulFunctionCall","src":"3480:6:14"}],"functionName":{"name":"shift_right_unsigned_dynamic","nodeType":"YulIdentifier","src":"3436:28:14"},"nodeType":"YulFunctionCall","src":"3436:51:14"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3432:3:14"},"nodeType":"YulFunctionCall","src":"3432:56:14"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"3424:4:14","type":""}]},{"nodeType":"YulAssignment","src":"3497:25:14","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3511:4:14"},{"name":"mask","nodeType":"YulIdentifier","src":"3517:4:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3507:3:14"},"nodeType":"YulFunctionCall","src":"3507:15:14"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"3497:6:14"}]}]},"name":"mask_bytes_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"3387:4:14","type":""},{"name":"bytes","nodeType":"YulTypedName","src":"3393:5:14","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"3403:6:14","type":""}],"src":"3359:169:14"},{"body":{"nodeType":"YulBlock","src":"3614:214:14","statements":[{"nodeType":"YulAssignment","src":"3747:37:14","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3774:4:14"},{"name":"len","nodeType":"YulIdentifier","src":"3780:3:14"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"3755:18:14"},"nodeType":"YulFunctionCall","src":"3755:29:14"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"3747:4:14"}]},{"nodeType":"YulAssignment","src":"3793:29:14","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3804:4:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3814:1:14","type":"","value":"2"},{"name":"len","nodeType":"YulIdentifier","src":"3817:3:14"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3810:3:14"},"nodeType":"YulFunctionCall","src":"3810:11:14"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3801:2:14"},"nodeType":"YulFunctionCall","src":"3801:21:14"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"3793:4:14"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"3595:4:14","type":""},{"name":"len","nodeType":"YulTypedName","src":"3601:3:14","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"3609:4:14","type":""}],"src":"3533:295:14"},{"body":{"nodeType":"YulBlock","src":"3925:1303:14","statements":[{"nodeType":"YulVariableDeclaration","src":"3936:51:14","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3983:3:14"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"3950:32:14"},"nodeType":"YulFunctionCall","src":"3950:37:14"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"3940:6:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"4072:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4074:16:14"},"nodeType":"YulFunctionCall","src":"4074:18:14"},"nodeType":"YulExpressionStatement","src":"4074:18:14"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4044:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"4052:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4041:2:14"},"nodeType":"YulFunctionCall","src":"4041:30:14"},"nodeType":"YulIf","src":"4038:56:14"},{"nodeType":"YulVariableDeclaration","src":"4104:52:14","value":{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4150:4:14"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"4144:5:14"},"nodeType":"YulFunctionCall","src":"4144:11:14"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"4118:25:14"},"nodeType":"YulFunctionCall","src":"4118:38:14"},"variables":[{"name":"oldLen","nodeType":"YulTypedName","src":"4108:6:14","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4249:4:14"},{"name":"oldLen","nodeType":"YulIdentifier","src":"4255:6:14"},{"name":"newLen","nodeType":"YulIdentifier","src":"4263:6:14"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulIdentifier","src":"4203:45:14"},"nodeType":"YulFunctionCall","src":"4203:67:14"},"nodeType":"YulExpressionStatement","src":"4203:67:14"},{"nodeType":"YulVariableDeclaration","src":"4280:18:14","value":{"kind":"number","nodeType":"YulLiteral","src":"4297:1:14","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"4284:9:14","type":""}]},{"nodeType":"YulAssignment","src":"4308:17:14","value":{"kind":"number","nodeType":"YulLiteral","src":"4321:4:14","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"4308:9:14"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"4372:611:14","statements":[{"nodeType":"YulVariableDeclaration","src":"4386:37:14","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4405:6:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4417:4:14","type":"","value":"0x1f"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4413:3:14"},"nodeType":"YulFunctionCall","src":"4413:9:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4401:3:14"},"nodeType":"YulFunctionCall","src":"4401:22:14"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"4390:7:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4437:51:14","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4483:4:14"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"4451:31:14"},"nodeType":"YulFunctionCall","src":"4451:37:14"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"4441:6:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4501:10:14","value":{"kind":"number","nodeType":"YulLiteral","src":"4510:1:14","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"4505:1:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"4569:163:14","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4594:6:14"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4612:3:14"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4617:9:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4608:3:14"},"nodeType":"YulFunctionCall","src":"4608:19:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4602:5:14"},"nodeType":"YulFunctionCall","src":"4602:26:14"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4587:6:14"},"nodeType":"YulFunctionCall","src":"4587:42:14"},"nodeType":"YulExpressionStatement","src":"4587:42:14"},{"nodeType":"YulAssignment","src":"4646:24:14","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4660:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"4668:1:14","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4656:3:14"},"nodeType":"YulFunctionCall","src":"4656:14:14"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4646:6:14"}]},{"nodeType":"YulAssignment","src":"4687:31:14","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"4704:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"4715:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4700:3:14"},"nodeType":"YulFunctionCall","src":"4700:18:14"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"4687:9:14"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4535:1:14"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"4538:7:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4532:2:14"},"nodeType":"YulFunctionCall","src":"4532:14:14"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4547:21:14","statements":[{"nodeType":"YulAssignment","src":"4549:17:14","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4558:1:14"},{"kind":"number","nodeType":"YulLiteral","src":"4561:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4554:3:14"},"nodeType":"YulFunctionCall","src":"4554:12:14"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"4549:1:14"}]}]},"pre":{"nodeType":"YulBlock","src":"4528:3:14","statements":[]},"src":"4524:208:14"},{"body":{"nodeType":"YulBlock","src":"4768:156:14","statements":[{"nodeType":"YulVariableDeclaration","src":"4786:43:14","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4813:3:14"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4818:9:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4809:3:14"},"nodeType":"YulFunctionCall","src":"4809:19:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4803:5:14"},"nodeType":"YulFunctionCall","src":"4803:26:14"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"4790:9:14","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4853:6:14"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"4880:9:14"},{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4895:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"4903:4:14","type":"","value":"0x1f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4891:3:14"},"nodeType":"YulFunctionCall","src":"4891:17:14"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"4861:18:14"},"nodeType":"YulFunctionCall","src":"4861:48:14"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4846:6:14"},"nodeType":"YulFunctionCall","src":"4846:64:14"},"nodeType":"YulExpressionStatement","src":"4846:64:14"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"4751:7:14"},{"name":"newLen","nodeType":"YulIdentifier","src":"4760:6:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4748:2:14"},"nodeType":"YulFunctionCall","src":"4748:19:14"},"nodeType":"YulIf","src":"4745:179:14"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4944:4:14"},{"arguments":[{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4958:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"4966:1:14","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4954:3:14"},"nodeType":"YulFunctionCall","src":"4954:14:14"},{"kind":"number","nodeType":"YulLiteral","src":"4970:1:14","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4950:3:14"},"nodeType":"YulFunctionCall","src":"4950:22:14"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4937:6:14"},"nodeType":"YulFunctionCall","src":"4937:36:14"},"nodeType":"YulExpressionStatement","src":"4937:36:14"}]},"nodeType":"YulCase","src":"4365:618:14","value":{"kind":"number","nodeType":"YulLiteral","src":"4370:1:14","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"5000:222:14","statements":[{"nodeType":"YulVariableDeclaration","src":"5014:14:14","value":{"kind":"number","nodeType":"YulLiteral","src":"5027:1:14","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5018:5:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"5051:67:14","statements":[{"nodeType":"YulAssignment","src":"5069:35:14","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5088:3:14"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"5093:9:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5084:3:14"},"nodeType":"YulFunctionCall","src":"5084:19:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5078:5:14"},"nodeType":"YulFunctionCall","src":"5078:26:14"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5069:5:14"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"5044:6:14"},"nodeType":"YulIf","src":"5041:77:14"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"5138:4:14"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5197:5:14"},{"name":"newLen","nodeType":"YulIdentifier","src":"5204:6:14"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"5144:52:14"},"nodeType":"YulFunctionCall","src":"5144:67:14"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"5131:6:14"},"nodeType":"YulFunctionCall","src":"5131:81:14"},"nodeType":"YulExpressionStatement","src":"5131:81:14"}]},"nodeType":"YulCase","src":"4992:230:14","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4345:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"4353:2:14","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4342:2:14"},"nodeType":"YulFunctionCall","src":"4342:14:14"},"nodeType":"YulSwitch","src":"4335:887:14"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"3914:4:14","type":""},{"name":"src","nodeType":"YulTypedName","src":"3920:3:14","type":""}],"src":"3833:1395:14"}]},"contents":"{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n}\n","id":14,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b506040518060400160405280601481526020017f46756e64696e67436f6e7472616374546f6b656e0000000000000000000000008152506040518060400160405280600381526020017f464354000000000000000000000000000000000000000000000000000000000081525081600090816200008f919062000412565b508060019081620000a1919062000412565b505050620000c4620000b8620000ca60201b60201c565b620000d260201b60201c565b620004f9565b600033905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200021a57607f821691505b60208210810362000230576200022f620001d2565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200029a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200025b565b620002a686836200025b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620002f3620002ed620002e784620002be565b620002c8565b620002be565b9050919050565b6000819050919050565b6200030f83620002d2565b620003276200031e82620002fa565b84845462000268565b825550505050565b600090565b6200033e6200032f565b6200034b81848462000304565b505050565b5b8181101562000373576200036760008262000334565b60018101905062000351565b5050565b601f821115620003c2576200038c8162000236565b62000397846200024b565b81016020851015620003a7578190505b620003bf620003b6856200024b565b83018262000350565b50505b505050565b600082821c905092915050565b6000620003e760001984600802620003c7565b1980831691505092915050565b6000620004028383620003d4565b9150826002028217905092915050565b6200041d8262000198565b67ffffffffffffffff811115620004395762000438620001a3565b5b62000445825462000201565b6200045282828562000377565b600060209050601f8311600181146200048a576000841562000475578287015190505b620004818582620003f4565b865550620004f1565b601f1984166200049a8662000236565b60005b82811015620004c4578489015182556001820191506020850194506020810190506200049d565b86831015620004e45784890151620004e0601f891682620003d4565b8355505b6001600288020188555050505b505050505050565b61306480620005096000396000f3fe6080604052600436106101bb5760003560e01c8063715018a6116100ec578063c87b56dd1161008a578063db06941e11610064578063db06941e14610605578063e2c41dbc14610630578063e985e9c51461063a578063f2fde38b14610677576101c2565b8063c87b56dd14610560578063d7b4750c1461059d578063d8e159f8146105da576101c2565b806395d89b41116100c657806395d89b41146104b85780639c885eb3146104e3578063a22cb4651461050e578063b88d4fde14610537576101c2565b8063715018a61461044b5780637dc4c2ba146104625780638da5cb5b1461048d576101c2565b806323b872dd116101595780634e71d92d116101335780634e71d92d1461038f5780636352211e146103a657806365ac4341146103e357806370a082311461040e576101c2565b806323b872dd1461032657806324600fc31461034f57806342842e0e14610366576101c2565b8063081812fc11610195578063081812fc1461026c578063095ea7b3146102a95780631095941e146102d25780631096cb79146102fb576101c2565b806301ffc9a7146101c75780630343fb251461020457806306fdde0314610241576101c2565b366101c257005b600080fd5b3480156101d357600080fd5b506101ee60048036038101906101e991906120b1565b6106a0565b6040516101fb91906120f9565b60405180910390f35b34801561021057600080fd5b5061022b60048036038101906102269190612172565b610782565b60405161023891906121b8565b60405180910390f35b34801561024d57600080fd5b506102566107cb565b6040516102639190612263565b60405180910390f35b34801561027857600080fd5b50610293600480360381019061028e91906122b1565b61085d565b6040516102a091906122ed565b60405180910390f35b3480156102b557600080fd5b506102d060048036038101906102cb9190612308565b6108a3565b005b3480156102de57600080fd5b506102f960048036038101906102f491906122b1565b6109ba565b005b34801561030757600080fd5b50610310610a76565b60405161031d91906121b8565b60405180910390f35b34801561033257600080fd5b5061034d60048036038101906103489190612348565b610a80565b005b34801561035b57600080fd5b50610364610ae0565b005b34801561037257600080fd5b5061038d60048036038101906103889190612348565b610bf1565b005b34801561039b57600080fd5b506103a4610c11565b005b3480156103b257600080fd5b506103cd60048036038101906103c891906122b1565b610c13565b6040516103da91906122ed565b60405180910390f35b3480156103ef57600080fd5b506103f8610c99565b60405161040591906121b8565b60405180910390f35b34801561041a57600080fd5b5061043560048036038101906104309190612172565b610ca3565b60405161044291906121b8565b60405180910390f35b34801561045757600080fd5b50610460610d5a565b005b34801561046e57600080fd5b50610477610d6e565b60405161048491906120f9565b60405180910390f35b34801561049957600080fd5b506104a2610e10565b6040516104af91906122ed565b60405180910390f35b3480156104c457600080fd5b506104cd610e3a565b6040516104da9190612263565b60405180910390f35b3480156104ef57600080fd5b506104f8610ecc565b60405161050591906120f9565b60405180910390f35b34801561051a57600080fd5b50610535600480360381019061053091906123c7565b610ee3565b005b34801561054357600080fd5b5061055e6004803603810190610559919061253c565b610ef9565b005b34801561056c57600080fd5b50610587600480360381019061058291906122b1565b610f5b565b6040516105949190612263565b60405180910390f35b3480156105a957600080fd5b506105c460048036038101906105bf91906122b1565b610f62565b6040516105d191906122ed565b60405180910390f35b3480156105e657600080fd5b506105ef610faa565b6040516105fc91906121b8565b60405180910390f35b34801561061157600080fd5b5061061a610fb4565b60405161062791906121b8565b60405180910390f35b610638610fd2565b005b34801561064657600080fd5b50610661600480360381019061065c91906125bf565b6110e4565b60405161066e91906120f9565b60405180910390f35b34801561068357600080fd5b5061069e60048036038101906106999190612172565b611178565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061076b57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061077b575061077a826111fb565b5b9050919050565b6000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600080546107da9061262e565b80601f01602080910402602001604051908101604052809291908181526020018280546108069061262e565b80156108535780601f1061082857610100808354040283529160200191610853565b820191906000526020600020905b81548152906001019060200180831161083657829003601f168201915b5050505050905090565b600061086882611265565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006108ae82610c13565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361091e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610915906126d1565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661093d6112b0565b73ffffffffffffffffffffffffffffffffffffffff16148061096c575061096b816109666112b0565b6110e4565b5b6109ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a290612763565b60405180910390fd5b6109b583836112b8565b505050565b600c60009054906101000a900460ff16610a00576040517fad1faa7200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600f600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610a736008611371565b50565b6000600b54905090565b610a91610a8b6112b0565b82611387565b610ad0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac7906127f5565b60405180910390fd5b610adb83838361141c565b505050565b610ae8611715565b600c60009054906101000a900460ff1615610b4557610b05610d6e565b610b44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3b90612887565b60405180910390fd5b5b600047905060003373ffffffffffffffffffffffffffffffffffffffff1682604051610b70906128d8565b60006040518083038185875af1925050503d8060008114610bad576040519150601f19603f3d011682016040523d82523d6000602084013e610bb2565b606091505b5050905080610bed576040517f9af25e5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b610c0c83838360405180602001604052806000815250610ef9565b505050565b565b600080610c1f83611793565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8790612939565b60405180910390fd5b80915050919050565b6000600954905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0a906129cb565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610d62611715565b610d6c60006117d0565b565b6000600c60009054906101000a900460ff16610db6576040517fad1faa7200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610dc26008611896565b90506000610df26064610de4603c600e805490506118a490919063ffffffff16565b6118ba90919063ffffffff16565b9050808210610e0657600192505050610e0d565b6000925050505b90565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610e499061262e565b80601f0160208091040260200160405190810160405280929190818152602001828054610e759061262e565b8015610ec25780601f10610e9757610100808354040283529160200191610ec2565b820191906000526020600020905b815481529060010190602001808311610ea557829003601f168201915b5050505050905090565b6000600c60009054906101000a900460ff16905090565b610ef5610eee6112b0565b83836118d0565b5050565b610f0a610f046112b0565b83611387565b610f49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f40906127f5565b60405180910390fd5b610f5584848484611a3c565b50505050565b6060919050565b6000600e8281548110610f7857610f776129eb565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600a54905090565b6000610fcd600b546009546118ba90919063ffffffff16565b905090565b6000610fdc610fb4565b90506000610fea6007611896565b9050813411611025576040517fcf463cf900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600e339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506110d63382611a98565b6110e06007611371565b5050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611180611715565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036111ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e690612a8c565b60405180910390fd5b6111f8816117d0565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61126e81611ab6565b6112ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a490612939565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661132b83610c13565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6001816000016000828254019250508190555050565b60008061139383610c13565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806113d557506113d481856110e4565b5b8061141357508373ffffffffffffffffffffffffffffffffffffffff166113fb8461085d565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661143c82610c13565b73ffffffffffffffffffffffffffffffffffffffff1614611492576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148990612b1e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611501576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f890612bb0565b60405180910390fd5b61150e8383836001611af7565b8273ffffffffffffffffffffffffffffffffffffffff1661152e82610c13565b73ffffffffffffffffffffffffffffffffffffffff1614611584576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157b90612b1e565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46117108383836001611c1d565b505050565b61171d6112b0565b73ffffffffffffffffffffffffffffffffffffffff1661173b610e10565b73ffffffffffffffffffffffffffffffffffffffff1614611791576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178890612c1c565b60405180910390fd5b565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081600001549050919050565b600081836118b29190612c6b565b905092915050565b600081836118c89190612cdc565b905092915050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361193e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193590612d59565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611a2f91906120f9565b60405180910390a3505050565b611a4784848461141c565b611a5384848484611c23565b611a92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8990612deb565b60405180910390fd5b50505050565b611ab2828260405180602001604052806000815250611daa565b5050565b60008073ffffffffffffffffffffffffffffffffffffffff16611ad883611793565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6001811115611c1757600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611b8b5780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611b839190612e0b565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611c165780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c0e9190612e3f565b925050819055505b5b50505050565b50505050565b6000611c448473ffffffffffffffffffffffffffffffffffffffff16611e05565b15611d9d578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611c6d6112b0565b8786866040518563ffffffff1660e01b8152600401611c8f9493929190612ec8565b6020604051808303816000875af1925050508015611ccb57506040513d601f19601f82011682018060405250810190611cc89190612f29565b60015b611d4d573d8060008114611cfb576040519150601f19603f3d011682016040523d82523d6000602084013e611d00565b606091505b506000815103611d45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3c90612deb565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611da2565b600190505b949350505050565b611db48383611e28565b611dc16000848484611c23565b611e00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611df790612deb565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611e97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8e90612fa2565b60405180910390fd5b611ea081611ab6565b15611ee0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed79061300e565b60405180910390fd5b611eee600083836001611af7565b611ef781611ab6565b15611f37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f2e9061300e565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612041600083836001611c1d565b5050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61208e81612059565b811461209957600080fd5b50565b6000813590506120ab81612085565b92915050565b6000602082840312156120c7576120c661204f565b5b60006120d58482850161209c565b91505092915050565b60008115159050919050565b6120f3816120de565b82525050565b600060208201905061210e60008301846120ea565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061213f82612114565b9050919050565b61214f81612134565b811461215a57600080fd5b50565b60008135905061216c81612146565b92915050565b6000602082840312156121885761218761204f565b5b60006121968482850161215d565b91505092915050565b6000819050919050565b6121b28161219f565b82525050565b60006020820190506121cd60008301846121a9565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561220d5780820151818401526020810190506121f2565b60008484015250505050565b6000601f19601f8301169050919050565b6000612235826121d3565b61223f81856121de565b935061224f8185602086016121ef565b61225881612219565b840191505092915050565b6000602082019050818103600083015261227d818461222a565b905092915050565b61228e8161219f565b811461229957600080fd5b50565b6000813590506122ab81612285565b92915050565b6000602082840312156122c7576122c661204f565b5b60006122d58482850161229c565b91505092915050565b6122e781612134565b82525050565b600060208201905061230260008301846122de565b92915050565b6000806040838503121561231f5761231e61204f565b5b600061232d8582860161215d565b925050602061233e8582860161229c565b9150509250929050565b6000806000606084860312156123615761236061204f565b5b600061236f8682870161215d565b93505060206123808682870161215d565b92505060406123918682870161229c565b9150509250925092565b6123a4816120de565b81146123af57600080fd5b50565b6000813590506123c18161239b565b92915050565b600080604083850312156123de576123dd61204f565b5b60006123ec8582860161215d565b92505060206123fd858286016123b2565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61244982612219565b810181811067ffffffffffffffff8211171561246857612467612411565b5b80604052505050565b600061247b612045565b90506124878282612440565b919050565b600067ffffffffffffffff8211156124a7576124a6612411565b5b6124b082612219565b9050602081019050919050565b82818337600083830152505050565b60006124df6124da8461248c565b612471565b9050828152602081018484840111156124fb576124fa61240c565b5b6125068482856124bd565b509392505050565b600082601f83011261252357612522612407565b5b81356125338482602086016124cc565b91505092915050565b600080600080608085870312156125565761255561204f565b5b60006125648782880161215d565b94505060206125758782880161215d565b93505060406125868782880161229c565b925050606085013567ffffffffffffffff8111156125a7576125a6612054565b5b6125b38782880161250e565b91505092959194509250565b600080604083850312156125d6576125d561204f565b5b60006125e48582860161215d565b92505060206125f58582860161215d565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061264657607f821691505b602082108103612659576126586125ff565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006126bb6021836121de565b91506126c68261265f565b604082019050919050565b600060208201905081810360008301526126ea816126ae565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b600061274d603d836121de565b9150612758826126f1565b604082019050919050565b6000602082019050818103600083015261277c81612740565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b60006127df602d836121de565b91506127ea82612783565b604082019050919050565b6000602082019050818103600083015261280e816127d2565b9050919050565b7f5468657265206973206e6f206d616a6f7269747920617070726f76616c20746f60008201527f2077697468647261770000000000000000000000000000000000000000000000602082015250565b60006128716029836121de565b915061287c82612815565b604082019050919050565b600060208201905081810360008301526128a081612864565b9050919050565b600081905092915050565b50565b60006128c26000836128a7565b91506128cd826128b2565b600082019050919050565b60006128e3826128b5565b9150819050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006129236018836121de565b915061292e826128ed565b602082019050919050565b6000602082019050818103600083015261295281612916565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b60006129b56029836121de565b91506129c082612959565b604082019050919050565b600060208201905081810360008301526129e4816129a8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612a766026836121de565b9150612a8182612a1a565b604082019050919050565b60006020820190508181036000830152612aa581612a69565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612b086025836121de565b9150612b1382612aac565b604082019050919050565b60006020820190508181036000830152612b3781612afb565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612b9a6024836121de565b9150612ba582612b3e565b604082019050919050565b60006020820190508181036000830152612bc981612b8d565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612c066020836121de565b9150612c1182612bd0565b602082019050919050565b60006020820190508181036000830152612c3581612bf9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612c768261219f565b9150612c818361219f565b9250828202612c8f8161219f565b91508282048414831517612ca657612ca5612c3c565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612ce78261219f565b9150612cf28361219f565b925082612d0257612d01612cad565b5b828204905092915050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612d436019836121de565b9150612d4e82612d0d565b602082019050919050565b60006020820190508181036000830152612d7281612d36565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612dd56032836121de565b9150612de082612d79565b604082019050919050565b60006020820190508181036000830152612e0481612dc8565b9050919050565b6000612e168261219f565b9150612e218361219f565b9250828203905081811115612e3957612e38612c3c565b5b92915050565b6000612e4a8261219f565b9150612e558361219f565b9250828201905080821115612e6d57612e6c612c3c565b5b92915050565b600081519050919050565b600082825260208201905092915050565b6000612e9a82612e73565b612ea48185612e7e565b9350612eb48185602086016121ef565b612ebd81612219565b840191505092915050565b6000608082019050612edd60008301876122de565b612eea60208301866122de565b612ef760408301856121a9565b8181036060830152612f098184612e8f565b905095945050505050565b600081519050612f2381612085565b92915050565b600060208284031215612f3f57612f3e61204f565b5b6000612f4d84828501612f14565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000612f8c6020836121de565b9150612f9782612f56565b602082019050919050565b60006020820190508181036000830152612fbb81612f7f565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000612ff8601c836121de565b915061300382612fc2565b602082019050919050565b6000602082019050818103600083015261302781612feb565b905091905056fea26469706673582212202a11e1f0843a0bccf475f2b7a38cd188e8763b27256e41695c4fe7a6646ffdc864736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x14 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x46756E64696E67436F6E7472616374546F6B656E000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4643540000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x0 SWAP1 DUP2 PUSH3 0x8F SWAP2 SWAP1 PUSH3 0x412 JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP1 DUP2 PUSH3 0xA1 SWAP2 SWAP1 PUSH3 0x412 JUMP JUMPDEST POP POP POP PUSH3 0xC4 PUSH3 0xB8 PUSH3 0xCA PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0xD2 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x4F9 JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x6 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x21A JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x230 JUMPI PUSH3 0x22F PUSH3 0x1D2 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH3 0x29A PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH3 0x25B JUMP JUMPDEST PUSH3 0x2A6 DUP7 DUP4 PUSH3 0x25B JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2F3 PUSH3 0x2ED PUSH3 0x2E7 DUP5 PUSH3 0x2BE JUMP JUMPDEST PUSH3 0x2C8 JUMP JUMPDEST PUSH3 0x2BE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x30F DUP4 PUSH3 0x2D2 JUMP JUMPDEST PUSH3 0x327 PUSH3 0x31E DUP3 PUSH3 0x2FA JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH3 0x268 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH3 0x33E PUSH3 0x32F JUMP JUMPDEST PUSH3 0x34B DUP2 DUP5 DUP5 PUSH3 0x304 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x373 JUMPI PUSH3 0x367 PUSH1 0x0 DUP3 PUSH3 0x334 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x351 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x3C2 JUMPI PUSH3 0x38C DUP2 PUSH3 0x236 JUMP JUMPDEST PUSH3 0x397 DUP5 PUSH3 0x24B JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH3 0x3A7 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH3 0x3BF PUSH3 0x3B6 DUP6 PUSH3 0x24B JUMP JUMPDEST DUP4 ADD DUP3 PUSH3 0x350 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x3E7 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH3 0x3C7 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x402 DUP4 DUP4 PUSH3 0x3D4 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x41D DUP3 PUSH3 0x198 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x439 JUMPI PUSH3 0x438 PUSH3 0x1A3 JUMP JUMPDEST JUMPDEST PUSH3 0x445 DUP3 SLOAD PUSH3 0x201 JUMP JUMPDEST PUSH3 0x452 DUP3 DUP3 DUP6 PUSH3 0x377 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x48A JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x475 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH3 0x481 DUP6 DUP3 PUSH3 0x3F4 JUMP JUMPDEST DUP7 SSTORE POP PUSH3 0x4F1 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH3 0x49A DUP7 PUSH3 0x236 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x4C4 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x49D JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH3 0x4E4 JUMPI DUP5 DUP10 ADD MLOAD PUSH3 0x4E0 PUSH1 0x1F DUP10 AND DUP3 PUSH3 0x3D4 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x3064 DUP1 PUSH3 0x509 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1BB JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xEC JUMPI DUP1 PUSH4 0xC87B56DD GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xDB06941E GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xDB06941E EQ PUSH2 0x605 JUMPI DUP1 PUSH4 0xE2C41DBC EQ PUSH2 0x630 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x63A JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x677 JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x560 JUMPI DUP1 PUSH4 0xD7B4750C EQ PUSH2 0x59D JUMPI DUP1 PUSH4 0xD8E159F8 EQ PUSH2 0x5DA JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x95D89B41 GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x4B8 JUMPI DUP1 PUSH4 0x9C885EB3 EQ PUSH2 0x4E3 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x50E JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x537 JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x44B JUMPI DUP1 PUSH4 0x7DC4C2BA EQ PUSH2 0x462 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x48D JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x159 JUMPI DUP1 PUSH4 0x4E71D92D GT PUSH2 0x133 JUMPI DUP1 PUSH4 0x4E71D92D EQ PUSH2 0x38F JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x3A6 JUMPI DUP1 PUSH4 0x65AC4341 EQ PUSH2 0x3E3 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x40E JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x23B872DD EQ PUSH2 0x326 JUMPI DUP1 PUSH4 0x24600FC3 EQ PUSH2 0x34F JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x366 JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x81812FC GT PUSH2 0x195 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x26C JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x2A9 JUMPI DUP1 PUSH4 0x1095941E EQ PUSH2 0x2D2 JUMPI DUP1 PUSH4 0x1096CB79 EQ PUSH2 0x2FB JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1C7 JUMPI DUP1 PUSH4 0x343FB25 EQ PUSH2 0x204 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x241 JUMPI PUSH2 0x1C2 JUMP JUMPDEST CALLDATASIZE PUSH2 0x1C2 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1E9 SWAP2 SWAP1 PUSH2 0x20B1 JUMP JUMPDEST PUSH2 0x6A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0x20F9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x210 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x226 SWAP2 SWAP1 PUSH2 0x2172 JUMP JUMPDEST PUSH2 0x782 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x238 SWAP2 SWAP1 PUSH2 0x21B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x256 PUSH2 0x7CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x263 SWAP2 SWAP1 PUSH2 0x2263 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x278 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x293 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x28E SWAP2 SWAP1 PUSH2 0x22B1 JUMP JUMPDEST PUSH2 0x85D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A0 SWAP2 SWAP1 PUSH2 0x22ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2CB SWAP2 SWAP1 PUSH2 0x2308 JUMP JUMPDEST PUSH2 0x8A3 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2F4 SWAP2 SWAP1 PUSH2 0x22B1 JUMP JUMPDEST PUSH2 0x9BA JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x307 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x310 PUSH2 0xA76 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x31D SWAP2 SWAP1 PUSH2 0x21B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x332 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x34D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x348 SWAP2 SWAP1 PUSH2 0x2348 JUMP JUMPDEST PUSH2 0xA80 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x35B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x364 PUSH2 0xAE0 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x372 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x38D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x388 SWAP2 SWAP1 PUSH2 0x2348 JUMP JUMPDEST PUSH2 0xBF1 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3A4 PUSH2 0xC11 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3CD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3C8 SWAP2 SWAP1 PUSH2 0x22B1 JUMP JUMPDEST PUSH2 0xC13 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3DA SWAP2 SWAP1 PUSH2 0x22ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F8 PUSH2 0xC99 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x405 SWAP2 SWAP1 PUSH2 0x21B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x41A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x435 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x430 SWAP2 SWAP1 PUSH2 0x2172 JUMP JUMPDEST PUSH2 0xCA3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x442 SWAP2 SWAP1 PUSH2 0x21B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x457 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x460 PUSH2 0xD5A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x46E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x477 PUSH2 0xD6E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x484 SWAP2 SWAP1 PUSH2 0x20F9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x499 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A2 PUSH2 0xE10 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4AF SWAP2 SWAP1 PUSH2 0x22ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4CD PUSH2 0xE3A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4DA SWAP2 SWAP1 PUSH2 0x2263 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4F8 PUSH2 0xECC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x505 SWAP2 SWAP1 PUSH2 0x20F9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x51A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x535 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x530 SWAP2 SWAP1 PUSH2 0x23C7 JUMP JUMPDEST PUSH2 0xEE3 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x543 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x55E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x559 SWAP2 SWAP1 PUSH2 0x253C JUMP JUMPDEST PUSH2 0xEF9 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x56C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x587 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x582 SWAP2 SWAP1 PUSH2 0x22B1 JUMP JUMPDEST PUSH2 0xF5B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x594 SWAP2 SWAP1 PUSH2 0x2263 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5BF SWAP2 SWAP1 PUSH2 0x22B1 JUMP JUMPDEST PUSH2 0xF62 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5D1 SWAP2 SWAP1 PUSH2 0x22ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5EF PUSH2 0xFAA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5FC SWAP2 SWAP1 PUSH2 0x21B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x611 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x61A PUSH2 0xFB4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x627 SWAP2 SWAP1 PUSH2 0x21B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x638 PUSH2 0xFD2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x646 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x661 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x65C SWAP2 SWAP1 PUSH2 0x25BF JUMP JUMPDEST PUSH2 0x10E4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x66E SWAP2 SWAP1 PUSH2 0x20F9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x683 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x69E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x699 SWAP2 SWAP1 PUSH2 0x2172 JUMP JUMPDEST PUSH2 0x1178 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x76B JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x77B JUMPI POP PUSH2 0x77A DUP3 PUSH2 0x11FB JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x7DA SWAP1 PUSH2 0x262E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x806 SWAP1 PUSH2 0x262E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x853 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x828 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x853 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x836 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x868 DUP3 PUSH2 0x1265 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8AE DUP3 PUSH2 0xC13 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x91E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x915 SWAP1 PUSH2 0x26D1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x93D PUSH2 0x12B0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x96C JUMPI POP PUSH2 0x96B DUP2 PUSH2 0x966 PUSH2 0x12B0 JUMP JUMPDEST PUSH2 0x10E4 JUMP JUMPDEST JUMPDEST PUSH2 0x9AB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9A2 SWAP1 PUSH2 0x2763 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9B5 DUP4 DUP4 PUSH2 0x12B8 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0xC PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xA00 JUMPI PUSH1 0x40 MLOAD PUSH32 0xAD1FAA7200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xF PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0xA73 PUSH1 0x8 PUSH2 0x1371 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xB SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xA91 PUSH2 0xA8B PUSH2 0x12B0 JUMP JUMPDEST DUP3 PUSH2 0x1387 JUMP JUMPDEST PUSH2 0xAD0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAC7 SWAP1 PUSH2 0x27F5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xADB DUP4 DUP4 DUP4 PUSH2 0x141C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0xAE8 PUSH2 0x1715 JUMP JUMPDEST PUSH1 0xC PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xB45 JUMPI PUSH2 0xB05 PUSH2 0xD6E JUMP JUMPDEST PUSH2 0xB44 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB3B SWAP1 PUSH2 0x2887 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST PUSH1 0x0 SELFBALANCE SWAP1 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH2 0xB70 SWAP1 PUSH2 0x28D8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xBAD JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xBB2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xBED JUMPI PUSH1 0x40 MLOAD PUSH32 0x9AF25E5D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xC0C DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xEF9 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xC1F DUP4 PUSH2 0x1793 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xC90 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC87 SWAP1 PUSH2 0x2939 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xD13 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD0A SWAP1 PUSH2 0x29CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD62 PUSH2 0x1715 JUMP JUMPDEST PUSH2 0xD6C PUSH1 0x0 PUSH2 0x17D0 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xDB6 JUMPI PUSH1 0x40 MLOAD PUSH32 0xAD1FAA7200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xDC2 PUSH1 0x8 PUSH2 0x1896 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xDF2 PUSH1 0x64 PUSH2 0xDE4 PUSH1 0x3C PUSH1 0xE DUP1 SLOAD SWAP1 POP PUSH2 0x18A4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x18BA SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 DUP3 LT PUSH2 0xE06 JUMPI PUSH1 0x1 SWAP3 POP POP POP PUSH2 0xE0D JUMP JUMPDEST PUSH1 0x0 SWAP3 POP POP POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0xE49 SWAP1 PUSH2 0x262E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xE75 SWAP1 PUSH2 0x262E JUMP JUMPDEST DUP1 ISZERO PUSH2 0xEC2 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xE97 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xEC2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xEA5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xEF5 PUSH2 0xEEE PUSH2 0x12B0 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x18D0 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xF0A PUSH2 0xF04 PUSH2 0x12B0 JUMP JUMPDEST DUP4 PUSH2 0x1387 JUMP JUMPDEST PUSH2 0xF49 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF40 SWAP1 PUSH2 0x27F5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF55 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1A3C JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xF78 JUMPI PUSH2 0xF77 PUSH2 0x29EB JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFCD PUSH1 0xB SLOAD PUSH1 0x9 SLOAD PUSH2 0x18BA SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFDC PUSH2 0xFB4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xFEA PUSH1 0x7 PUSH2 0x1896 JUMP JUMPDEST SWAP1 POP DUP2 CALLVALUE GT PUSH2 0x1025 JUMPI PUSH1 0x40 MLOAD PUSH32 0xCF463CF900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLVALUE PUSH1 0xD PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0xE CALLER SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x10D6 CALLER DUP3 PUSH2 0x1A98 JUMP JUMPDEST PUSH2 0x10E0 PUSH1 0x7 PUSH2 0x1371 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1180 PUSH2 0x1715 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x11EF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11E6 SWAP1 PUSH2 0x2A8C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x11F8 DUP2 PUSH2 0x17D0 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x126E DUP2 PUSH2 0x1AB6 JUMP JUMPDEST PUSH2 0x12AD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A4 SWAP1 PUSH2 0x2939 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x132B DUP4 PUSH2 0xC13 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1393 DUP4 PUSH2 0xC13 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x13D5 JUMPI POP PUSH2 0x13D4 DUP2 DUP6 PUSH2 0x10E4 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x1413 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x13FB DUP5 PUSH2 0x85D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x143C DUP3 PUSH2 0xC13 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1492 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1489 SWAP1 PUSH2 0x2B1E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1501 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F8 SWAP1 PUSH2 0x2BB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x150E DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1AF7 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x152E DUP3 PUSH2 0xC13 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1584 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x157B SWAP1 PUSH2 0x2B1E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1710 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1C1D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x171D PUSH2 0x12B0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x173B PUSH2 0xE10 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1791 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1788 SWAP1 PUSH2 0x2C1C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x6 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x18B2 SWAP2 SWAP1 PUSH2 0x2C6B JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x18C8 SWAP2 SWAP1 PUSH2 0x2CDC JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x193E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1935 SWAP1 PUSH2 0x2D59 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1A2F SWAP2 SWAP1 PUSH2 0x20F9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1A47 DUP5 DUP5 DUP5 PUSH2 0x141C JUMP JUMPDEST PUSH2 0x1A53 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1C23 JUMP JUMPDEST PUSH2 0x1A92 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A89 SWAP1 PUSH2 0x2DEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x1AB2 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1DAA JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1AD8 DUP4 PUSH2 0x1793 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1C17 JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1B8B JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1B83 SWAP2 SWAP1 PUSH2 0x2E0B JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1C16 JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1C0E SWAP2 SWAP1 PUSH2 0x2E3F JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C44 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1E05 JUMP JUMPDEST ISZERO PUSH2 0x1D9D JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1C6D PUSH2 0x12B0 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C8F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2EC8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1CCB JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1CC8 SWAP2 SWAP1 PUSH2 0x2F29 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1D4D JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1CFB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1D00 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x1D45 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D3C SWAP1 PUSH2 0x2DEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x1DA2 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1DB4 DUP4 DUP4 PUSH2 0x1E28 JUMP JUMPDEST PUSH2 0x1DC1 PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x1C23 JUMP JUMPDEST PUSH2 0x1E00 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DF7 SWAP1 PUSH2 0x2DEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1E97 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E8E SWAP1 PUSH2 0x2FA2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1EA0 DUP2 PUSH2 0x1AB6 JUMP JUMPDEST ISZERO PUSH2 0x1EE0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1ED7 SWAP1 PUSH2 0x300E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1EEE PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1AF7 JUMP JUMPDEST PUSH2 0x1EF7 DUP2 PUSH2 0x1AB6 JUMP JUMPDEST ISZERO PUSH2 0x1F37 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F2E SWAP1 PUSH2 0x300E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x2041 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1C1D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x208E DUP2 PUSH2 0x2059 JUMP JUMPDEST DUP2 EQ PUSH2 0x2099 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x20AB DUP2 PUSH2 0x2085 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x20C7 JUMPI PUSH2 0x20C6 PUSH2 0x204F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x20D5 DUP5 DUP3 DUP6 ADD PUSH2 0x209C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x20F3 DUP2 PUSH2 0x20DE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x210E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x20EA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x213F DUP3 PUSH2 0x2114 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x214F DUP2 PUSH2 0x2134 JUMP JUMPDEST DUP2 EQ PUSH2 0x215A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x216C DUP2 PUSH2 0x2146 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2188 JUMPI PUSH2 0x2187 PUSH2 0x204F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2196 DUP5 DUP3 DUP6 ADD PUSH2 0x215D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x21B2 DUP2 PUSH2 0x219F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x21CD PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x21A9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x220D JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x21F2 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2235 DUP3 PUSH2 0x21D3 JUMP JUMPDEST PUSH2 0x223F DUP2 DUP6 PUSH2 0x21DE JUMP JUMPDEST SWAP4 POP PUSH2 0x224F DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x21EF JUMP JUMPDEST PUSH2 0x2258 DUP2 PUSH2 0x2219 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x227D DUP2 DUP5 PUSH2 0x222A JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x228E DUP2 PUSH2 0x219F JUMP JUMPDEST DUP2 EQ PUSH2 0x2299 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x22AB DUP2 PUSH2 0x2285 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x22C7 JUMPI PUSH2 0x22C6 PUSH2 0x204F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x22D5 DUP5 DUP3 DUP6 ADD PUSH2 0x229C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x22E7 DUP2 PUSH2 0x2134 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2302 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x22DE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x231F JUMPI PUSH2 0x231E PUSH2 0x204F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x232D DUP6 DUP3 DUP7 ADD PUSH2 0x215D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x233E DUP6 DUP3 DUP7 ADD PUSH2 0x229C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2361 JUMPI PUSH2 0x2360 PUSH2 0x204F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x236F DUP7 DUP3 DUP8 ADD PUSH2 0x215D JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2380 DUP7 DUP3 DUP8 ADD PUSH2 0x215D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x2391 DUP7 DUP3 DUP8 ADD PUSH2 0x229C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x23A4 DUP2 PUSH2 0x20DE JUMP JUMPDEST DUP2 EQ PUSH2 0x23AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x23C1 DUP2 PUSH2 0x239B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x23DE JUMPI PUSH2 0x23DD PUSH2 0x204F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x23EC DUP6 DUP3 DUP7 ADD PUSH2 0x215D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x23FD DUP6 DUP3 DUP7 ADD PUSH2 0x23B2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x2449 DUP3 PUSH2 0x2219 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x2468 JUMPI PUSH2 0x2467 PUSH2 0x2411 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x247B PUSH2 0x2045 JUMP JUMPDEST SWAP1 POP PUSH2 0x2487 DUP3 DUP3 PUSH2 0x2440 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x24A7 JUMPI PUSH2 0x24A6 PUSH2 0x2411 JUMP JUMPDEST JUMPDEST PUSH2 0x24B0 DUP3 PUSH2 0x2219 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x24DF PUSH2 0x24DA DUP5 PUSH2 0x248C JUMP JUMPDEST PUSH2 0x2471 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x24FB JUMPI PUSH2 0x24FA PUSH2 0x240C JUMP JUMPDEST JUMPDEST PUSH2 0x2506 DUP5 DUP3 DUP6 PUSH2 0x24BD JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2523 JUMPI PUSH2 0x2522 PUSH2 0x2407 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2533 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x24CC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2556 JUMPI PUSH2 0x2555 PUSH2 0x204F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2564 DUP8 DUP3 DUP9 ADD PUSH2 0x215D JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x2575 DUP8 DUP3 DUP9 ADD PUSH2 0x215D JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x2586 DUP8 DUP3 DUP9 ADD PUSH2 0x229C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x25A7 JUMPI PUSH2 0x25A6 PUSH2 0x2054 JUMP JUMPDEST JUMPDEST PUSH2 0x25B3 DUP8 DUP3 DUP9 ADD PUSH2 0x250E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x25D6 JUMPI PUSH2 0x25D5 PUSH2 0x204F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x25E4 DUP6 DUP3 DUP7 ADD PUSH2 0x215D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x25F5 DUP6 DUP3 DUP7 ADD PUSH2 0x215D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2646 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2659 JUMPI PUSH2 0x2658 PUSH2 0x25FF JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26BB PUSH1 0x21 DUP4 PUSH2 0x21DE JUMP JUMPDEST SWAP2 POP PUSH2 0x26C6 DUP3 PUSH2 0x265F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x26EA DUP2 PUSH2 0x26AE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x274D PUSH1 0x3D DUP4 PUSH2 0x21DE JUMP JUMPDEST SWAP2 POP PUSH2 0x2758 DUP3 PUSH2 0x26F1 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x277C DUP2 PUSH2 0x2740 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27DF PUSH1 0x2D DUP4 PUSH2 0x21DE JUMP JUMPDEST SWAP2 POP PUSH2 0x27EA DUP3 PUSH2 0x2783 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x280E DUP2 PUSH2 0x27D2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5468657265206973206E6F206D616A6F7269747920617070726F76616C20746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x2077697468647261770000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2871 PUSH1 0x29 DUP4 PUSH2 0x21DE JUMP JUMPDEST SWAP2 POP PUSH2 0x287C DUP3 PUSH2 0x2815 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x28A0 DUP2 PUSH2 0x2864 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28C2 PUSH1 0x0 DUP4 PUSH2 0x28A7 JUMP JUMPDEST SWAP2 POP PUSH2 0x28CD DUP3 PUSH2 0x28B2 JUMP JUMPDEST PUSH1 0x0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28E3 DUP3 PUSH2 0x28B5 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2923 PUSH1 0x18 DUP4 PUSH2 0x21DE JUMP JUMPDEST SWAP2 POP PUSH2 0x292E DUP3 PUSH2 0x28ED JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2952 DUP2 PUSH2 0x2916 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29B5 PUSH1 0x29 DUP4 PUSH2 0x21DE JUMP JUMPDEST SWAP2 POP PUSH2 0x29C0 DUP3 PUSH2 0x2959 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x29E4 DUP2 PUSH2 0x29A8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A76 PUSH1 0x26 DUP4 PUSH2 0x21DE JUMP JUMPDEST SWAP2 POP PUSH2 0x2A81 DUP3 PUSH2 0x2A1A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2AA5 DUP2 PUSH2 0x2A69 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B08 PUSH1 0x25 DUP4 PUSH2 0x21DE JUMP JUMPDEST SWAP2 POP PUSH2 0x2B13 DUP3 PUSH2 0x2AAC JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B37 DUP2 PUSH2 0x2AFB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B9A PUSH1 0x24 DUP4 PUSH2 0x21DE JUMP JUMPDEST SWAP2 POP PUSH2 0x2BA5 DUP3 PUSH2 0x2B3E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2BC9 DUP2 PUSH2 0x2B8D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C06 PUSH1 0x20 DUP4 PUSH2 0x21DE JUMP JUMPDEST SWAP2 POP PUSH2 0x2C11 DUP3 PUSH2 0x2BD0 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C35 DUP2 PUSH2 0x2BF9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2C76 DUP3 PUSH2 0x219F JUMP JUMPDEST SWAP2 POP PUSH2 0x2C81 DUP4 PUSH2 0x219F JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x2C8F DUP2 PUSH2 0x219F JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x2CA6 JUMPI PUSH2 0x2CA5 PUSH2 0x2C3C JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2CE7 DUP3 PUSH2 0x219F JUMP JUMPDEST SWAP2 POP PUSH2 0x2CF2 DUP4 PUSH2 0x219F JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x2D02 JUMPI PUSH2 0x2D01 PUSH2 0x2CAD JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D43 PUSH1 0x19 DUP4 PUSH2 0x21DE JUMP JUMPDEST SWAP2 POP PUSH2 0x2D4E DUP3 PUSH2 0x2D0D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2D72 DUP2 PUSH2 0x2D36 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DD5 PUSH1 0x32 DUP4 PUSH2 0x21DE JUMP JUMPDEST SWAP2 POP PUSH2 0x2DE0 DUP3 PUSH2 0x2D79 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E04 DUP2 PUSH2 0x2DC8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E16 DUP3 PUSH2 0x219F JUMP JUMPDEST SWAP2 POP PUSH2 0x2E21 DUP4 PUSH2 0x219F JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x2E39 JUMPI PUSH2 0x2E38 PUSH2 0x2C3C JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E4A DUP3 PUSH2 0x219F JUMP JUMPDEST SWAP2 POP PUSH2 0x2E55 DUP4 PUSH2 0x219F JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x2E6D JUMPI PUSH2 0x2E6C PUSH2 0x2C3C JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E9A DUP3 PUSH2 0x2E73 JUMP JUMPDEST PUSH2 0x2EA4 DUP2 DUP6 PUSH2 0x2E7E JUMP JUMPDEST SWAP4 POP PUSH2 0x2EB4 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x21EF JUMP JUMPDEST PUSH2 0x2EBD DUP2 PUSH2 0x2219 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2EDD PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x22DE JUMP JUMPDEST PUSH2 0x2EEA PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x22DE JUMP JUMPDEST PUSH2 0x2EF7 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x21A9 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2F09 DUP2 DUP5 PUSH2 0x2E8F JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2F23 DUP2 PUSH2 0x2085 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2F3F JUMPI PUSH2 0x2F3E PUSH2 0x204F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2F4D DUP5 DUP3 DUP6 ADD PUSH2 0x2F14 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F8C PUSH1 0x20 DUP4 PUSH2 0x21DE JUMP JUMPDEST SWAP2 POP PUSH2 0x2F97 DUP3 PUSH2 0x2F56 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2FBB DUP2 PUSH2 0x2F7F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FF8 PUSH1 0x1C DUP4 PUSH2 0x21DE JUMP JUMPDEST SWAP2 POP PUSH2 0x3003 DUP3 PUSH2 0x2FC2 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3027 DUP2 PUSH2 0x2FEB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2A GT 0xE1 CREATE DUP5 GASPRICE SIGNEXTEND 0xCC DELEGATECALL PUSH22 0xF2B7A38CD188E8763B27256E41695C4FE7A6646FFDC8 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"403:3519:13:-:0;;;1087:379;;;;;;;;;;1390:113:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1464:5;1456;:13;;;;;;:::i;:::-;;1489:7;1479;:17;;;;;;:::i;:::-;;1390:113;;936:32:0;955:12;:10;;;:12;;:::i;:::-;936:18;;;:32;;:::i;:::-;403:3519:13;;640:96:6;693:7;719:10;712:17;;640:96;:::o;2433:187:0:-;2506:16;2525:6;;;;;;;;;;;2506:25;;2550:8;2541:6;;:17;;;;;;;;;;;;;;;;;;2604:8;2573:40;;2594:8;2573:40;;;;;;;;;;;;2496:124;2433:187;:::o;7:99:14:-;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:180::-;160:77;157:1;150:88;257:4;254:1;247:15;281:4;278:1;271:15;298:180;346:77;343:1;336:88;443:4;440:1;433:15;467:4;464:1;457:15;484:320;528:6;565:1;559:4;555:12;545:22;;612:1;606:4;602:12;633:18;623:81;;689:4;681:6;677:17;667:27;;623:81;751:2;743:6;740:14;720:18;717:38;714:84;;770:18;;:::i;:::-;714:84;535:269;484:320;;;:::o;810:141::-;859:4;882:3;874:11;;905:3;902:1;895:14;939:4;936:1;926:18;918:26;;810:141;;;:::o;957:93::-;994:6;1041:2;1036;1029:5;1025:14;1021:23;1011:33;;957:93;;;:::o;1056:107::-;1100:8;1150:5;1144:4;1140:16;1119:37;;1056:107;;;;:::o;1169:393::-;1238:6;1288:1;1276:10;1272:18;1311:97;1341:66;1330:9;1311:97;:::i;:::-;1429:39;1459:8;1448:9;1429:39;:::i;:::-;1417:51;;1501:4;1497:9;1490:5;1486:21;1477:30;;1550:4;1540:8;1536:19;1529:5;1526:30;1516:40;;1245:317;;1169:393;;;;;:::o;1568:77::-;1605:7;1634:5;1623:16;;1568:77;;;:::o;1651:60::-;1679:3;1700:5;1693:12;;1651:60;;;:::o;1717:142::-;1767:9;1800:53;1818:34;1827:24;1845:5;1827:24;:::i;:::-;1818:34;:::i;:::-;1800:53;:::i;:::-;1787:66;;1717:142;;;:::o;1865:75::-;1908:3;1929:5;1922:12;;1865:75;;;:::o;1946:269::-;2056:39;2087:7;2056:39;:::i;:::-;2117:91;2166:41;2190:16;2166:41;:::i;:::-;2158:6;2151:4;2145:11;2117:91;:::i;:::-;2111:4;2104:105;2022:193;1946:269;;;:::o;2221:73::-;2266:3;2221:73;:::o;2300:189::-;2377:32;;:::i;:::-;2418:65;2476:6;2468;2462:4;2418:65;:::i;:::-;2353:136;2300:189;;:::o;2495:186::-;2555:120;2572:3;2565:5;2562:14;2555:120;;;2626:39;2663:1;2656:5;2626:39;:::i;:::-;2599:1;2592:5;2588:13;2579:22;;2555:120;;;2495:186;;:::o;2687:543::-;2788:2;2783:3;2780:11;2777:446;;;2822:38;2854:5;2822:38;:::i;:::-;2906:29;2924:10;2906:29;:::i;:::-;2896:8;2892:44;3089:2;3077:10;3074:18;3071:49;;;3110:8;3095:23;;3071:49;3133:80;3189:22;3207:3;3189:22;:::i;:::-;3179:8;3175:37;3162:11;3133:80;:::i;:::-;2792:431;;2777:446;2687:543;;;:::o;3236:117::-;3290:8;3340:5;3334:4;3330:16;3309:37;;3236:117;;;;:::o;3359:169::-;3403:6;3436:51;3484:1;3480:6;3472:5;3469:1;3465:13;3436:51;:::i;:::-;3432:56;3517:4;3511;3507:15;3497:25;;3410:118;3359:169;;;;:::o;3533:295::-;3609:4;3755:29;3780:3;3774:4;3755:29;:::i;:::-;3747:37;;3817:3;3814:1;3810:11;3804:4;3801:21;3793:29;;3533:295;;;;:::o;3833:1395::-;3950:37;3983:3;3950:37;:::i;:::-;4052:18;4044:6;4041:30;4038:56;;;4074:18;;:::i;:::-;4038:56;4118:38;4150:4;4144:11;4118:38;:::i;:::-;4203:67;4263:6;4255;4249:4;4203:67;:::i;:::-;4297:1;4321:4;4308:17;;4353:2;4345:6;4342:14;4370:1;4365:618;;;;5027:1;5044:6;5041:77;;;5093:9;5088:3;5084:19;5078:26;5069:35;;5041:77;5144:67;5204:6;5197:5;5144:67;:::i;:::-;5138:4;5131:81;5000:222;4335:887;;4365:618;4417:4;4413:9;4405:6;4401:22;4451:37;4483:4;4451:37;:::i;:::-;4510:1;4524:208;4538:7;4535:1;4532:14;4524:208;;;4617:9;4612:3;4608:19;4602:26;4594:6;4587:42;4668:1;4660:6;4656:14;4646:24;;4715:2;4704:9;4700:18;4687:31;;4561:4;4558:1;4554:12;4549:17;;4524:208;;;4760:6;4751:7;4748:19;4745:179;;;4818:9;4813:3;4809:19;4803:26;4861:48;4903:4;4895:6;4891:17;4880:9;4861:48;:::i;:::-;4853:6;4846:64;4768:156;4745:179;4970:1;4966;4958:6;4954:14;4950:22;4944:4;4937:36;4372:611;;;4335:887;;3925:1303;;;3833:1395;;:::o;403:3519:13:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_3190":{"entryPoint":null,"id":3190,"parameterSlots":0,"returnSlots":0},"@_afterTokenTransfer_1056":{"entryPoint":7197,"id":1056,"parameterSlots":4,"returnSlots":0},"@_approve_889":{"entryPoint":4792,"id":889,"parameterSlots":2,"returnSlots":0},"@_beforeTokenTransfer_1043":{"entryPoint":6903,"id":1043,"parameterSlots":4,"returnSlots":0},"@_checkOnERC721Received_997":{"entryPoint":7203,"id":997,"parameterSlots":4,"returnSlots":1},"@_checkOwner_54":{"entryPoint":5909,"id":54,"parameterSlots":0,"returnSlots":0},"@_exists_558":{"entryPoint":6838,"id":558,"parameterSlots":1,"returnSlots":1},"@_isApprovedOrOwner_592":{"entryPoint":4999,"id":592,"parameterSlots":2,"returnSlots":1},"@_mint_713":{"entryPoint":7720,"id":713,"parameterSlots":2,"returnSlots":0},"@_msgSender_1560":{"entryPoint":4784,"id":1560,"parameterSlots":0,"returnSlots":1},"@_ownerOf_540":{"entryPoint":6035,"id":540,"parameterSlots":1,"returnSlots":1},"@_requireMinted_935":{"entryPoint":4709,"id":935,"parameterSlots":1,"returnSlots":0},"@_safeMint_607":{"entryPoint":6808,"id":607,"parameterSlots":2,"returnSlots":0},"@_safeMint_636":{"entryPoint":7594,"id":636,"parameterSlots":3,"returnSlots":0},"@_safeTransfer_527":{"entryPoint":6716,"id":527,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_921":{"entryPoint":6352,"id":921,"parameterSlots":3,"returnSlots":0},"@_transferOwnership_111":{"entryPoint":6096,"id":111,"parameterSlots":1,"returnSlots":0},"@_transfer_865":{"entryPoint":5148,"id":865,"parameterSlots":3,"returnSlots":0},"@approve_369":{"entryPoint":2211,"id":369,"parameterSlots":2,"returnSlots":0},"@balanceOf_230":{"entryPoint":3235,"id":230,"parameterSlots":1,"returnSlots":1},"@claim_3164":{"entryPoint":3089,"id":3164,"parameterSlots":0,"returnSlots":0},"@current_1588":{"entryPoint":6294,"id":1588,"parameterSlots":1,"returnSlots":1},"@depositFunds_3151":{"entryPoint":4050,"id":3151,"parameterSlots":0,"returnSlots":0},"@div_2941":{"entryPoint":6330,"id":2941,"parameterSlots":2,"returnSlots":1},"@getAddressToAmountFunded_3322":{"entryPoint":1922,"id":3322,"parameterSlots":1,"returnSlots":1},"@getApproved_387":{"entryPoint":2141,"id":387,"parameterSlots":1,"returnSlots":1},"@getFunder_3334":{"entryPoint":3938,"id":3334,"parameterSlots":1,"returnSlots":1},"@getIsGroupWithdrawal_3310":{"entryPoint":3788,"id":3310,"parameterSlots":0,"returnSlots":1},"@getMinimumFundingAmount_3278":{"entryPoint":4020,"id":3278,"parameterSlots":0,"returnSlots":1},"@getTotalAmount_3286":{"entryPoint":3225,"id":3286,"parameterSlots":0,"returnSlots":1},"@getVestingPeriod_3302":{"entryPoint":2678,"id":3302,"parameterSlots":0,"returnSlots":1},"@getWithdrawalFee_3294":{"entryPoint":4010,"id":3294,"parameterSlots":0,"returnSlots":1},"@increment_1602":{"entryPoint":4977,"id":1602,"parameterSlots":1,"returnSlots":0},"@isApprovedForAll_422":{"entryPoint":4324,"id":422,"parameterSlots":2,"returnSlots":1},"@isContract_1236":{"entryPoint":7685,"id":1236,"parameterSlots":1,"returnSlots":1},"@mul_2926":{"entryPoint":6308,"id":2926,"parameterSlots":2,"returnSlots":1},"@name_268":{"entryPoint":1995,"id":268,"parameterSlots":0,"returnSlots":1},"@ownerOf_258":{"entryPoint":3091,"id":258,"parameterSlots":1,"returnSlots":1},"@owner_40":{"entryPoint":3600,"id":40,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_68":{"entryPoint":3418,"id":68,"parameterSlots":0,"returnSlots":0},"@requestForWithdrawal_3186":{"entryPoint":2490,"id":3186,"parameterSlots":1,"returnSlots":0},"@safeTransferFrom_468":{"entryPoint":3057,"id":468,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_498":{"entryPoint":3833,"id":498,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_404":{"entryPoint":3811,"id":404,"parameterSlots":2,"returnSlots":0},"@supportsInterface_1842":{"entryPoint":4603,"id":1842,"parameterSlots":1,"returnSlots":1},"@supportsInterface_206":{"entryPoint":1696,"id":206,"parameterSlots":1,"returnSlots":1},"@symbol_278":{"entryPoint":3642,"id":278,"parameterSlots":0,"returnSlots":1},"@tokenURI_3160":{"entryPoint":3931,"id":3160,"parameterSlots":1,"returnSlots":1},"@transferFrom_449":{"entryPoint":2688,"id":449,"parameterSlots":3,"returnSlots":0},"@transferOwnership_91":{"entryPoint":4472,"id":91,"parameterSlots":1,"returnSlots":0},"@withdrawFunds_3267":{"entryPoint":2784,"id":3267,"parameterSlots":0,"returnSlots":0},"@withdrawalCheck_3224":{"entryPoint":3438,"id":3224,"parameterSlots":0,"returnSlots":1},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":9420,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":8541,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":9138,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":8348,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4_fromMemory":{"entryPoint":12052,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":9486,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":8860,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":8562,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":9663,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":9032,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":9532,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":9159,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":8968,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":8369,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":12073,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":8881,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":8926,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":8426,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":11919,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":8746,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack":{"entryPoint":10194,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_1996ccb6adb7d105883c503be6c0fca8b239a35cc290cf1105e26098b6525e2f_to_t_string_memory_ptr_fromStack":{"entryPoint":10340,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack":{"entryPoint":11720,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack":{"entryPoint":10857,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack":{"entryPoint":11003,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack":{"entryPoint":12267,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack":{"entryPoint":11149,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack":{"entryPoint":11574,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack":{"entryPoint":10664,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack":{"entryPoint":12159,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack":{"entryPoint":11257,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack":{"entryPoint":10518,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack":{"entryPoint":9902,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":10421,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack":{"entryPoint":10048,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":8617,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":10456,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":8941,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":11976,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":8441,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8803,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10229,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1996ccb6adb7d105883c503be6c0fca8b239a35cc290cf1105e26098b6525e2f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10375,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11755,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10892,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11038,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12302,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11184,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11609,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10699,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12194,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11292,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10553,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9937,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10083,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":8632,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":9329,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":8261,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":9356,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":11891,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":8659,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":11902,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":10407,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":8670,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":11839,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":11484,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":11371,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":11787,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":8500,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":8414,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":8281,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":8468,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":8607,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory_with_cleanup":{"entryPoint":9405,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":8687,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":9774,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":9280,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x11":{"entryPoint":11324,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":11437,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":9727,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":10731,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":9233,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":9223,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":9228,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":8276,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":8271,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":8729,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af":{"entryPoint":10115,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_1996ccb6adb7d105883c503be6c0fca8b239a35cc290cf1105e26098b6525e2f":{"entryPoint":10261,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e":{"entryPoint":11641,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe":{"entryPoint":10778,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48":{"entryPoint":10924,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57":{"entryPoint":12226,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4":{"entryPoint":11070,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05":{"entryPoint":11533,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159":{"entryPoint":10585,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6":{"entryPoint":12118,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe":{"entryPoint":11216,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f":{"entryPoint":10477,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942":{"entryPoint":9823,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470":{"entryPoint":10418,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83":{"entryPoint":9969,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":8518,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":9115,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":8325,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":8837,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:29607:14","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:14","statements":[{"nodeType":"YulAssignment","src":"57:19:14","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:14","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:14"},"nodeType":"YulFunctionCall","src":"67:9:14"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:14"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:14","type":""}],"src":"7:75:14"},{"body":{"nodeType":"YulBlock","src":"177:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:14"},"nodeType":"YulFunctionCall","src":"187:12:14"},"nodeType":"YulExpressionStatement","src":"187:12:14"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:14"},{"body":{"nodeType":"YulBlock","src":"300:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:14"},"nodeType":"YulFunctionCall","src":"310:12:14"},"nodeType":"YulExpressionStatement","src":"310:12:14"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:14"},{"body":{"nodeType":"YulBlock","src":"378:105:14","statements":[{"nodeType":"YulAssignment","src":"388:89:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"403:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"410:66:14","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"399:3:14"},"nodeType":"YulFunctionCall","src":"399:78:14"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"388:7:14"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"360:5:14","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"370:7:14","type":""}],"src":"334:149:14"},{"body":{"nodeType":"YulBlock","src":"531:78:14","statements":[{"body":{"nodeType":"YulBlock","src":"587:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"596:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"599:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"589:6:14"},"nodeType":"YulFunctionCall","src":"589:12:14"},"nodeType":"YulExpressionStatement","src":"589:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"554:5:14"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"578:5:14"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"561:16:14"},"nodeType":"YulFunctionCall","src":"561:23:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"551:2:14"},"nodeType":"YulFunctionCall","src":"551:34:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"544:6:14"},"nodeType":"YulFunctionCall","src":"544:42:14"},"nodeType":"YulIf","src":"541:62:14"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"524:5:14","type":""}],"src":"489:120:14"},{"body":{"nodeType":"YulBlock","src":"666:86:14","statements":[{"nodeType":"YulAssignment","src":"676:29:14","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"698:6:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"685:12:14"},"nodeType":"YulFunctionCall","src":"685:20:14"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:14"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"740:5:14"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"714:25:14"},"nodeType":"YulFunctionCall","src":"714:32:14"},"nodeType":"YulExpressionStatement","src":"714:32:14"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"644:6:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"652:3:14","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"660:5:14","type":""}],"src":"615:137:14"},{"body":{"nodeType":"YulBlock","src":"823:262:14","statements":[{"body":{"nodeType":"YulBlock","src":"869:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"871:77:14"},"nodeType":"YulFunctionCall","src":"871:79:14"},"nodeType":"YulExpressionStatement","src":"871:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"844:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"840:3:14"},"nodeType":"YulFunctionCall","src":"840:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"865:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"836:3:14"},"nodeType":"YulFunctionCall","src":"836:32:14"},"nodeType":"YulIf","src":"833:119:14"},{"nodeType":"YulBlock","src":"962:116:14","statements":[{"nodeType":"YulVariableDeclaration","src":"977:15:14","value":{"kind":"number","nodeType":"YulLiteral","src":"991:1:14","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"981:6:14","type":""}]},{"nodeType":"YulAssignment","src":"1006:62:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1040:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"1051:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1036:3:14"},"nodeType":"YulFunctionCall","src":"1036:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1060:7:14"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"1016:19:14"},"nodeType":"YulFunctionCall","src":"1016:52:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1006:6:14"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"793:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"804:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"816:6:14","type":""}],"src":"758:327:14"},{"body":{"nodeType":"YulBlock","src":"1133:48:14","statements":[{"nodeType":"YulAssignment","src":"1143:32:14","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1161:6:14"},"nodeType":"YulFunctionCall","src":"1161:13:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1154:6:14"},"nodeType":"YulFunctionCall","src":"1154:21:14"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1143:7:14"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1115:5:14","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1125:7:14","type":""}],"src":"1091:90:14"},{"body":{"nodeType":"YulBlock","src":"1246:50:14","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1263:3:14"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1283:5:14"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"1268:14:14"},"nodeType":"YulFunctionCall","src":"1268:21:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1256:6:14"},"nodeType":"YulFunctionCall","src":"1256:34:14"},"nodeType":"YulExpressionStatement","src":"1256:34:14"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1234:5:14","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1241:3:14","type":""}],"src":"1187:109:14"},{"body":{"nodeType":"YulBlock","src":"1394:118:14","statements":[{"nodeType":"YulAssignment","src":"1404:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1416:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"1427:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:14"},"nodeType":"YulFunctionCall","src":"1412:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1404:4:14"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1478:6:14"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1491:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"1502:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1487:3:14"},"nodeType":"YulFunctionCall","src":"1487:17:14"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"1440:37:14"},"nodeType":"YulFunctionCall","src":"1440:65:14"},"nodeType":"YulExpressionStatement","src":"1440:65:14"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1378:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1389:4:14","type":""}],"src":"1302:210:14"},{"body":{"nodeType":"YulBlock","src":"1563:81:14","statements":[{"nodeType":"YulAssignment","src":"1573:65:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1588:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"1595:42:14","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1584:3:14"},"nodeType":"YulFunctionCall","src":"1584:54:14"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1573:7:14"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1545:5:14","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1555:7:14","type":""}],"src":"1518:126:14"},{"body":{"nodeType":"YulBlock","src":"1695:51:14","statements":[{"nodeType":"YulAssignment","src":"1705:35:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1734:5:14"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"1716:17:14"},"nodeType":"YulFunctionCall","src":"1716:24:14"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1705:7:14"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1677:5:14","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1687:7:14","type":""}],"src":"1650:96:14"},{"body":{"nodeType":"YulBlock","src":"1795:79:14","statements":[{"body":{"nodeType":"YulBlock","src":"1852:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1861:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1864:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1854:6:14"},"nodeType":"YulFunctionCall","src":"1854:12:14"},"nodeType":"YulExpressionStatement","src":"1854:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1818:5:14"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1843:5:14"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"1825:17:14"},"nodeType":"YulFunctionCall","src":"1825:24:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1815:2:14"},"nodeType":"YulFunctionCall","src":"1815:35:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1808:6:14"},"nodeType":"YulFunctionCall","src":"1808:43:14"},"nodeType":"YulIf","src":"1805:63:14"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1788:5:14","type":""}],"src":"1752:122:14"},{"body":{"nodeType":"YulBlock","src":"1932:87:14","statements":[{"nodeType":"YulAssignment","src":"1942:29:14","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1964:6:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1951:12:14"},"nodeType":"YulFunctionCall","src":"1951:20:14"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1942:5:14"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2007:5:14"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1980:26:14"},"nodeType":"YulFunctionCall","src":"1980:33:14"},"nodeType":"YulExpressionStatement","src":"1980:33:14"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1910:6:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"1918:3:14","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1926:5:14","type":""}],"src":"1880:139:14"},{"body":{"nodeType":"YulBlock","src":"2091:263:14","statements":[{"body":{"nodeType":"YulBlock","src":"2137:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2139:77:14"},"nodeType":"YulFunctionCall","src":"2139:79:14"},"nodeType":"YulExpressionStatement","src":"2139:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2112:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"2121:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2108:3:14"},"nodeType":"YulFunctionCall","src":"2108:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"2133:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2104:3:14"},"nodeType":"YulFunctionCall","src":"2104:32:14"},"nodeType":"YulIf","src":"2101:119:14"},{"nodeType":"YulBlock","src":"2230:117:14","statements":[{"nodeType":"YulVariableDeclaration","src":"2245:15:14","value":{"kind":"number","nodeType":"YulLiteral","src":"2259:1:14","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2249:6:14","type":""}]},{"nodeType":"YulAssignment","src":"2274:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2309:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"2320:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2305:3:14"},"nodeType":"YulFunctionCall","src":"2305:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2329:7:14"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2284:20:14"},"nodeType":"YulFunctionCall","src":"2284:53:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2274:6:14"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2061:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2072:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2084:6:14","type":""}],"src":"2025:329:14"},{"body":{"nodeType":"YulBlock","src":"2405:32:14","statements":[{"nodeType":"YulAssignment","src":"2415:16:14","value":{"name":"value","nodeType":"YulIdentifier","src":"2426:5:14"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2415:7:14"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2387:5:14","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2397:7:14","type":""}],"src":"2360:77:14"},{"body":{"nodeType":"YulBlock","src":"2508:53:14","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2525:3:14"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2548:5:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"2530:17:14"},"nodeType":"YulFunctionCall","src":"2530:24:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2518:6:14"},"nodeType":"YulFunctionCall","src":"2518:37:14"},"nodeType":"YulExpressionStatement","src":"2518:37:14"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2496:5:14","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2503:3:14","type":""}],"src":"2443:118:14"},{"body":{"nodeType":"YulBlock","src":"2665:124:14","statements":[{"nodeType":"YulAssignment","src":"2675:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2687:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"2698:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2683:3:14"},"nodeType":"YulFunctionCall","src":"2683:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2675:4:14"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2755:6:14"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2768:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"2779:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2764:3:14"},"nodeType":"YulFunctionCall","src":"2764:17:14"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"2711:43:14"},"nodeType":"YulFunctionCall","src":"2711:71:14"},"nodeType":"YulExpressionStatement","src":"2711:71:14"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2637:9:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2649:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2660:4:14","type":""}],"src":"2567:222:14"},{"body":{"nodeType":"YulBlock","src":"2854:40:14","statements":[{"nodeType":"YulAssignment","src":"2865:22:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2881:5:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2875:5:14"},"nodeType":"YulFunctionCall","src":"2875:12:14"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2865:6:14"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2837:5:14","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"2847:6:14","type":""}],"src":"2795:99:14"},{"body":{"nodeType":"YulBlock","src":"2996:73:14","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3013:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"3018:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3006:6:14"},"nodeType":"YulFunctionCall","src":"3006:19:14"},"nodeType":"YulExpressionStatement","src":"3006:19:14"},{"nodeType":"YulAssignment","src":"3034:29:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3053:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"3058:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3049:3:14"},"nodeType":"YulFunctionCall","src":"3049:14:14"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"3034:11:14"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"2968:3:14","type":""},{"name":"length","nodeType":"YulTypedName","src":"2973:6:14","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"2984:11:14","type":""}],"src":"2900:169:14"},{"body":{"nodeType":"YulBlock","src":"3137:184:14","statements":[{"nodeType":"YulVariableDeclaration","src":"3147:10:14","value":{"kind":"number","nodeType":"YulLiteral","src":"3156:1:14","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"3151:1:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"3216:63:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3241:3:14"},{"name":"i","nodeType":"YulIdentifier","src":"3246:1:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3237:3:14"},"nodeType":"YulFunctionCall","src":"3237:11:14"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3260:3:14"},{"name":"i","nodeType":"YulIdentifier","src":"3265:1:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3256:3:14"},"nodeType":"YulFunctionCall","src":"3256:11:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3250:5:14"},"nodeType":"YulFunctionCall","src":"3250:18:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3230:6:14"},"nodeType":"YulFunctionCall","src":"3230:39:14"},"nodeType":"YulExpressionStatement","src":"3230:39:14"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3177:1:14"},{"name":"length","nodeType":"YulIdentifier","src":"3180:6:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3174:2:14"},"nodeType":"YulFunctionCall","src":"3174:13:14"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3188:19:14","statements":[{"nodeType":"YulAssignment","src":"3190:15:14","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3199:1:14"},{"kind":"number","nodeType":"YulLiteral","src":"3202:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3195:3:14"},"nodeType":"YulFunctionCall","src":"3195:10:14"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3190:1:14"}]}]},"pre":{"nodeType":"YulBlock","src":"3170:3:14","statements":[]},"src":"3166:113:14"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3299:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"3304:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3295:3:14"},"nodeType":"YulFunctionCall","src":"3295:16:14"},{"kind":"number","nodeType":"YulLiteral","src":"3313:1:14","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3288:6:14"},"nodeType":"YulFunctionCall","src":"3288:27:14"},"nodeType":"YulExpressionStatement","src":"3288:27:14"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"3119:3:14","type":""},{"name":"dst","nodeType":"YulTypedName","src":"3124:3:14","type":""},{"name":"length","nodeType":"YulTypedName","src":"3129:6:14","type":""}],"src":"3075:246:14"},{"body":{"nodeType":"YulBlock","src":"3375:54:14","statements":[{"nodeType":"YulAssignment","src":"3385:38:14","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3403:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"3410:2:14","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3399:3:14"},"nodeType":"YulFunctionCall","src":"3399:14:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3419:2:14","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3415:3:14"},"nodeType":"YulFunctionCall","src":"3415:7:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3395:3:14"},"nodeType":"YulFunctionCall","src":"3395:28:14"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"3385:6:14"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3358:5:14","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"3368:6:14","type":""}],"src":"3327:102:14"},{"body":{"nodeType":"YulBlock","src":"3527:285:14","statements":[{"nodeType":"YulVariableDeclaration","src":"3537:53:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3584:5:14"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"3551:32:14"},"nodeType":"YulFunctionCall","src":"3551:39:14"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3541:6:14","type":""}]},{"nodeType":"YulAssignment","src":"3599:78:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3665:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"3670:6:14"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"3606:58:14"},"nodeType":"YulFunctionCall","src":"3606:71:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"3599:3:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3725:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"3732:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3721:3:14"},"nodeType":"YulFunctionCall","src":"3721:16:14"},{"name":"pos","nodeType":"YulIdentifier","src":"3739:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"3744:6:14"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"3686:34:14"},"nodeType":"YulFunctionCall","src":"3686:65:14"},"nodeType":"YulExpressionStatement","src":"3686:65:14"},{"nodeType":"YulAssignment","src":"3760:46:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3771:3:14"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3798:6:14"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"3776:21:14"},"nodeType":"YulFunctionCall","src":"3776:29:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3767:3:14"},"nodeType":"YulFunctionCall","src":"3767:39:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"3760:3:14"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3508:5:14","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3515:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"3523:3:14","type":""}],"src":"3435:377:14"},{"body":{"nodeType":"YulBlock","src":"3936:195:14","statements":[{"nodeType":"YulAssignment","src":"3946:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3958:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"3969:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3954:3:14"},"nodeType":"YulFunctionCall","src":"3954:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3946:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3993:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"4004:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3989:3:14"},"nodeType":"YulFunctionCall","src":"3989:17:14"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"4012:4:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"4018:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4008:3:14"},"nodeType":"YulFunctionCall","src":"4008:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3982:6:14"},"nodeType":"YulFunctionCall","src":"3982:47:14"},"nodeType":"YulExpressionStatement","src":"3982:47:14"},{"nodeType":"YulAssignment","src":"4038:86:14","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4110:6:14"},{"name":"tail","nodeType":"YulIdentifier","src":"4119:4:14"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4046:63:14"},"nodeType":"YulFunctionCall","src":"4046:78:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4038:4:14"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3908:9:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3920:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3931:4:14","type":""}],"src":"3818:313:14"},{"body":{"nodeType":"YulBlock","src":"4180:79:14","statements":[{"body":{"nodeType":"YulBlock","src":"4237:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4246:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4249:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4239:6:14"},"nodeType":"YulFunctionCall","src":"4239:12:14"},"nodeType":"YulExpressionStatement","src":"4239:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4203:5:14"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4228:5:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"4210:17:14"},"nodeType":"YulFunctionCall","src":"4210:24:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4200:2:14"},"nodeType":"YulFunctionCall","src":"4200:35:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4193:6:14"},"nodeType":"YulFunctionCall","src":"4193:43:14"},"nodeType":"YulIf","src":"4190:63:14"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4173:5:14","type":""}],"src":"4137:122:14"},{"body":{"nodeType":"YulBlock","src":"4317:87:14","statements":[{"nodeType":"YulAssignment","src":"4327:29:14","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4349:6:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4336:12:14"},"nodeType":"YulFunctionCall","src":"4336:20:14"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4327:5:14"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4392:5:14"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"4365:26:14"},"nodeType":"YulFunctionCall","src":"4365:33:14"},"nodeType":"YulExpressionStatement","src":"4365:33:14"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4295:6:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"4303:3:14","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"4311:5:14","type":""}],"src":"4265:139:14"},{"body":{"nodeType":"YulBlock","src":"4476:263:14","statements":[{"body":{"nodeType":"YulBlock","src":"4522:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4524:77:14"},"nodeType":"YulFunctionCall","src":"4524:79:14"},"nodeType":"YulExpressionStatement","src":"4524:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4497:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"4506:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4493:3:14"},"nodeType":"YulFunctionCall","src":"4493:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"4518:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4489:3:14"},"nodeType":"YulFunctionCall","src":"4489:32:14"},"nodeType":"YulIf","src":"4486:119:14"},{"nodeType":"YulBlock","src":"4615:117:14","statements":[{"nodeType":"YulVariableDeclaration","src":"4630:15:14","value":{"kind":"number","nodeType":"YulLiteral","src":"4644:1:14","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4634:6:14","type":""}]},{"nodeType":"YulAssignment","src":"4659:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4694:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"4705:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4690:3:14"},"nodeType":"YulFunctionCall","src":"4690:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4714:7:14"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4669:20:14"},"nodeType":"YulFunctionCall","src":"4669:53:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4659:6:14"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4446:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4457:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4469:6:14","type":""}],"src":"4410:329:14"},{"body":{"nodeType":"YulBlock","src":"4810:53:14","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4827:3:14"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4850:5:14"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"4832:17:14"},"nodeType":"YulFunctionCall","src":"4832:24:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4820:6:14"},"nodeType":"YulFunctionCall","src":"4820:37:14"},"nodeType":"YulExpressionStatement","src":"4820:37:14"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4798:5:14","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4805:3:14","type":""}],"src":"4745:118:14"},{"body":{"nodeType":"YulBlock","src":"4967:124:14","statements":[{"nodeType":"YulAssignment","src":"4977:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4989:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"5000:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4985:3:14"},"nodeType":"YulFunctionCall","src":"4985:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4977:4:14"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5057:6:14"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5070:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"5081:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5066:3:14"},"nodeType":"YulFunctionCall","src":"5066:17:14"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"5013:43:14"},"nodeType":"YulFunctionCall","src":"5013:71:14"},"nodeType":"YulExpressionStatement","src":"5013:71:14"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4939:9:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4951:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4962:4:14","type":""}],"src":"4869:222:14"},{"body":{"nodeType":"YulBlock","src":"5180:391:14","statements":[{"body":{"nodeType":"YulBlock","src":"5226:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5228:77:14"},"nodeType":"YulFunctionCall","src":"5228:79:14"},"nodeType":"YulExpressionStatement","src":"5228:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5201:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"5210:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5197:3:14"},"nodeType":"YulFunctionCall","src":"5197:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"5222:2:14","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5193:3:14"},"nodeType":"YulFunctionCall","src":"5193:32:14"},"nodeType":"YulIf","src":"5190:119:14"},{"nodeType":"YulBlock","src":"5319:117:14","statements":[{"nodeType":"YulVariableDeclaration","src":"5334:15:14","value":{"kind":"number","nodeType":"YulLiteral","src":"5348:1:14","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5338:6:14","type":""}]},{"nodeType":"YulAssignment","src":"5363:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5398:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"5409:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5394:3:14"},"nodeType":"YulFunctionCall","src":"5394:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5418:7:14"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5373:20:14"},"nodeType":"YulFunctionCall","src":"5373:53:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5363:6:14"}]}]},{"nodeType":"YulBlock","src":"5446:118:14","statements":[{"nodeType":"YulVariableDeclaration","src":"5461:16:14","value":{"kind":"number","nodeType":"YulLiteral","src":"5475:2:14","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5465:6:14","type":""}]},{"nodeType":"YulAssignment","src":"5491:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5526:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"5537:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5522:3:14"},"nodeType":"YulFunctionCall","src":"5522:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5546:7:14"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5501:20:14"},"nodeType":"YulFunctionCall","src":"5501:53:14"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5491:6:14"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5142:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5153:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5165:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5173:6:14","type":""}],"src":"5097:474:14"},{"body":{"nodeType":"YulBlock","src":"5677:519:14","statements":[{"body":{"nodeType":"YulBlock","src":"5723:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5725:77:14"},"nodeType":"YulFunctionCall","src":"5725:79:14"},"nodeType":"YulExpressionStatement","src":"5725:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5698:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"5707:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5694:3:14"},"nodeType":"YulFunctionCall","src":"5694:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"5719:2:14","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5690:3:14"},"nodeType":"YulFunctionCall","src":"5690:32:14"},"nodeType":"YulIf","src":"5687:119:14"},{"nodeType":"YulBlock","src":"5816:117:14","statements":[{"nodeType":"YulVariableDeclaration","src":"5831:15:14","value":{"kind":"number","nodeType":"YulLiteral","src":"5845:1:14","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5835:6:14","type":""}]},{"nodeType":"YulAssignment","src":"5860:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5895:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"5906:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5891:3:14"},"nodeType":"YulFunctionCall","src":"5891:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5915:7:14"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5870:20:14"},"nodeType":"YulFunctionCall","src":"5870:53:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5860:6:14"}]}]},{"nodeType":"YulBlock","src":"5943:118:14","statements":[{"nodeType":"YulVariableDeclaration","src":"5958:16:14","value":{"kind":"number","nodeType":"YulLiteral","src":"5972:2:14","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5962:6:14","type":""}]},{"nodeType":"YulAssignment","src":"5988:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6023:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"6034:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6019:3:14"},"nodeType":"YulFunctionCall","src":"6019:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6043:7:14"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5998:20:14"},"nodeType":"YulFunctionCall","src":"5998:53:14"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5988:6:14"}]}]},{"nodeType":"YulBlock","src":"6071:118:14","statements":[{"nodeType":"YulVariableDeclaration","src":"6086:16:14","value":{"kind":"number","nodeType":"YulLiteral","src":"6100:2:14","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6090:6:14","type":""}]},{"nodeType":"YulAssignment","src":"6116:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6151:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"6162:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6147:3:14"},"nodeType":"YulFunctionCall","src":"6147:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6171:7:14"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"6126:20:14"},"nodeType":"YulFunctionCall","src":"6126:53:14"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"6116:6:14"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5631:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5642:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5654:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5662:6:14","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5670:6:14","type":""}],"src":"5577:619:14"},{"body":{"nodeType":"YulBlock","src":"6242:76:14","statements":[{"body":{"nodeType":"YulBlock","src":"6296:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6305:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6308:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6298:6:14"},"nodeType":"YulFunctionCall","src":"6298:12:14"},"nodeType":"YulExpressionStatement","src":"6298:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6265:5:14"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6287:5:14"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"6272:14:14"},"nodeType":"YulFunctionCall","src":"6272:21:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6262:2:14"},"nodeType":"YulFunctionCall","src":"6262:32:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6255:6:14"},"nodeType":"YulFunctionCall","src":"6255:40:14"},"nodeType":"YulIf","src":"6252:60:14"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6235:5:14","type":""}],"src":"6202:116:14"},{"body":{"nodeType":"YulBlock","src":"6373:84:14","statements":[{"nodeType":"YulAssignment","src":"6383:29:14","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6405:6:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6392:12:14"},"nodeType":"YulFunctionCall","src":"6392:20:14"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"6383:5:14"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6445:5:14"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"6421:23:14"},"nodeType":"YulFunctionCall","src":"6421:30:14"},"nodeType":"YulExpressionStatement","src":"6421:30:14"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"6351:6:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"6359:3:14","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"6367:5:14","type":""}],"src":"6324:133:14"},{"body":{"nodeType":"YulBlock","src":"6543:388:14","statements":[{"body":{"nodeType":"YulBlock","src":"6589:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6591:77:14"},"nodeType":"YulFunctionCall","src":"6591:79:14"},"nodeType":"YulExpressionStatement","src":"6591:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6564:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"6573:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6560:3:14"},"nodeType":"YulFunctionCall","src":"6560:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"6585:2:14","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6556:3:14"},"nodeType":"YulFunctionCall","src":"6556:32:14"},"nodeType":"YulIf","src":"6553:119:14"},{"nodeType":"YulBlock","src":"6682:117:14","statements":[{"nodeType":"YulVariableDeclaration","src":"6697:15:14","value":{"kind":"number","nodeType":"YulLiteral","src":"6711:1:14","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6701:6:14","type":""}]},{"nodeType":"YulAssignment","src":"6726:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6761:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"6772:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6757:3:14"},"nodeType":"YulFunctionCall","src":"6757:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6781:7:14"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"6736:20:14"},"nodeType":"YulFunctionCall","src":"6736:53:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6726:6:14"}]}]},{"nodeType":"YulBlock","src":"6809:115:14","statements":[{"nodeType":"YulVariableDeclaration","src":"6824:16:14","value":{"kind":"number","nodeType":"YulLiteral","src":"6838:2:14","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6828:6:14","type":""}]},{"nodeType":"YulAssignment","src":"6854:60:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6886:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"6897:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6882:3:14"},"nodeType":"YulFunctionCall","src":"6882:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6906:7:14"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"6864:17:14"},"nodeType":"YulFunctionCall","src":"6864:50:14"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6854:6:14"}]}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6505:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6516:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6528:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6536:6:14","type":""}],"src":"6463:468:14"},{"body":{"nodeType":"YulBlock","src":"7026:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7043:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7046:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7036:6:14"},"nodeType":"YulFunctionCall","src":"7036:12:14"},"nodeType":"YulExpressionStatement","src":"7036:12:14"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"6937:117:14"},{"body":{"nodeType":"YulBlock","src":"7149:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7166:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7169:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7159:6:14"},"nodeType":"YulFunctionCall","src":"7159:12:14"},"nodeType":"YulExpressionStatement","src":"7159:12:14"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"7060:117:14"},{"body":{"nodeType":"YulBlock","src":"7211:152:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7228:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7231:77:14","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7221:6:14"},"nodeType":"YulFunctionCall","src":"7221:88:14"},"nodeType":"YulExpressionStatement","src":"7221:88:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7325:1:14","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"7328:4:14","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7318:6:14"},"nodeType":"YulFunctionCall","src":"7318:15:14"},"nodeType":"YulExpressionStatement","src":"7318:15:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7349:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7352:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7342:6:14"},"nodeType":"YulFunctionCall","src":"7342:15:14"},"nodeType":"YulExpressionStatement","src":"7342:15:14"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"7183:180:14"},{"body":{"nodeType":"YulBlock","src":"7412:238:14","statements":[{"nodeType":"YulVariableDeclaration","src":"7422:58:14","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7444:6:14"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"7474:4:14"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"7452:21:14"},"nodeType":"YulFunctionCall","src":"7452:27:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7440:3:14"},"nodeType":"YulFunctionCall","src":"7440:40:14"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"7426:10:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"7591:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7593:16:14"},"nodeType":"YulFunctionCall","src":"7593:18:14"},"nodeType":"YulExpressionStatement","src":"7593:18:14"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7534:10:14"},{"kind":"number","nodeType":"YulLiteral","src":"7546:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7531:2:14"},"nodeType":"YulFunctionCall","src":"7531:34:14"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7570:10:14"},{"name":"memPtr","nodeType":"YulIdentifier","src":"7582:6:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7567:2:14"},"nodeType":"YulFunctionCall","src":"7567:22:14"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7528:2:14"},"nodeType":"YulFunctionCall","src":"7528:62:14"},"nodeType":"YulIf","src":"7525:88:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7629:2:14","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7633:10:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7622:6:14"},"nodeType":"YulFunctionCall","src":"7622:22:14"},"nodeType":"YulExpressionStatement","src":"7622:22:14"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7398:6:14","type":""},{"name":"size","nodeType":"YulTypedName","src":"7406:4:14","type":""}],"src":"7369:281:14"},{"body":{"nodeType":"YulBlock","src":"7697:88:14","statements":[{"nodeType":"YulAssignment","src":"7707:30:14","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"7717:18:14"},"nodeType":"YulFunctionCall","src":"7717:20:14"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7707:6:14"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7766:6:14"},{"name":"size","nodeType":"YulIdentifier","src":"7774:4:14"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"7746:19:14"},"nodeType":"YulFunctionCall","src":"7746:33:14"},"nodeType":"YulExpressionStatement","src":"7746:33:14"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"7681:4:14","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"7690:6:14","type":""}],"src":"7656:129:14"},{"body":{"nodeType":"YulBlock","src":"7857:241:14","statements":[{"body":{"nodeType":"YulBlock","src":"7962:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7964:16:14"},"nodeType":"YulFunctionCall","src":"7964:18:14"},"nodeType":"YulExpressionStatement","src":"7964:18:14"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7934:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"7942:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7931:2:14"},"nodeType":"YulFunctionCall","src":"7931:30:14"},"nodeType":"YulIf","src":"7928:56:14"},{"nodeType":"YulAssignment","src":"7994:37:14","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8024:6:14"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"8002:21:14"},"nodeType":"YulFunctionCall","src":"8002:29:14"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"7994:4:14"}]},{"nodeType":"YulAssignment","src":"8068:23:14","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"8080:4:14"},{"kind":"number","nodeType":"YulLiteral","src":"8086:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8076:3:14"},"nodeType":"YulFunctionCall","src":"8076:15:14"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"8068:4:14"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"7841:6:14","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"7852:4:14","type":""}],"src":"7791:307:14"},{"body":{"nodeType":"YulBlock","src":"8168:82:14","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8191:3:14"},{"name":"src","nodeType":"YulIdentifier","src":"8196:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"8201:6:14"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"8178:12:14"},"nodeType":"YulFunctionCall","src":"8178:30:14"},"nodeType":"YulExpressionStatement","src":"8178:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8228:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"8233:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8224:3:14"},"nodeType":"YulFunctionCall","src":"8224:16:14"},{"kind":"number","nodeType":"YulLiteral","src":"8242:1:14","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8217:6:14"},"nodeType":"YulFunctionCall","src":"8217:27:14"},"nodeType":"YulExpressionStatement","src":"8217:27:14"}]},"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"8150:3:14","type":""},{"name":"dst","nodeType":"YulTypedName","src":"8155:3:14","type":""},{"name":"length","nodeType":"YulTypedName","src":"8160:6:14","type":""}],"src":"8104:146:14"},{"body":{"nodeType":"YulBlock","src":"8339:340:14","statements":[{"nodeType":"YulAssignment","src":"8349:74:14","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8415:6:14"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"8374:40:14"},"nodeType":"YulFunctionCall","src":"8374:48:14"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"8358:15:14"},"nodeType":"YulFunctionCall","src":"8358:65:14"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"8349:5:14"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"8439:5:14"},{"name":"length","nodeType":"YulIdentifier","src":"8446:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8432:6:14"},"nodeType":"YulFunctionCall","src":"8432:21:14"},"nodeType":"YulExpressionStatement","src":"8432:21:14"},{"nodeType":"YulVariableDeclaration","src":"8462:27:14","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"8477:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"8484:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8473:3:14"},"nodeType":"YulFunctionCall","src":"8473:16:14"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"8466:3:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"8527:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"8529:77:14"},"nodeType":"YulFunctionCall","src":"8529:79:14"},"nodeType":"YulExpressionStatement","src":"8529:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8508:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"8513:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8504:3:14"},"nodeType":"YulFunctionCall","src":"8504:16:14"},{"name":"end","nodeType":"YulIdentifier","src":"8522:3:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8501:2:14"},"nodeType":"YulFunctionCall","src":"8501:25:14"},"nodeType":"YulIf","src":"8498:112:14"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8656:3:14"},{"name":"dst","nodeType":"YulIdentifier","src":"8661:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"8666:6:14"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"8619:36:14"},"nodeType":"YulFunctionCall","src":"8619:54:14"},"nodeType":"YulExpressionStatement","src":"8619:54:14"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"8312:3:14","type":""},{"name":"length","nodeType":"YulTypedName","src":"8317:6:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"8325:3:14","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"8333:5:14","type":""}],"src":"8256:423:14"},{"body":{"nodeType":"YulBlock","src":"8759:277:14","statements":[{"body":{"nodeType":"YulBlock","src":"8808:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"8810:77:14"},"nodeType":"YulFunctionCall","src":"8810:79:14"},"nodeType":"YulExpressionStatement","src":"8810:79:14"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8787:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"8795:4:14","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8783:3:14"},"nodeType":"YulFunctionCall","src":"8783:17:14"},{"name":"end","nodeType":"YulIdentifier","src":"8802:3:14"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8779:3:14"},"nodeType":"YulFunctionCall","src":"8779:27:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8772:6:14"},"nodeType":"YulFunctionCall","src":"8772:35:14"},"nodeType":"YulIf","src":"8769:122:14"},{"nodeType":"YulVariableDeclaration","src":"8900:34:14","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8927:6:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8914:12:14"},"nodeType":"YulFunctionCall","src":"8914:20:14"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8904:6:14","type":""}]},{"nodeType":"YulAssignment","src":"8943:87:14","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9003:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"9011:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8999:3:14"},"nodeType":"YulFunctionCall","src":"8999:17:14"},{"name":"length","nodeType":"YulIdentifier","src":"9018:6:14"},{"name":"end","nodeType":"YulIdentifier","src":"9026:3:14"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"8952:46:14"},"nodeType":"YulFunctionCall","src":"8952:78:14"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"8943:5:14"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8737:6:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"8745:3:14","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"8753:5:14","type":""}],"src":"8698:338:14"},{"body":{"nodeType":"YulBlock","src":"9168:817:14","statements":[{"body":{"nodeType":"YulBlock","src":"9215:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"9217:77:14"},"nodeType":"YulFunctionCall","src":"9217:79:14"},"nodeType":"YulExpressionStatement","src":"9217:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9189:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"9198:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9185:3:14"},"nodeType":"YulFunctionCall","src":"9185:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"9210:3:14","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9181:3:14"},"nodeType":"YulFunctionCall","src":"9181:33:14"},"nodeType":"YulIf","src":"9178:120:14"},{"nodeType":"YulBlock","src":"9308:117:14","statements":[{"nodeType":"YulVariableDeclaration","src":"9323:15:14","value":{"kind":"number","nodeType":"YulLiteral","src":"9337:1:14","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9327:6:14","type":""}]},{"nodeType":"YulAssignment","src":"9352:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9387:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"9398:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9383:3:14"},"nodeType":"YulFunctionCall","src":"9383:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9407:7:14"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9362:20:14"},"nodeType":"YulFunctionCall","src":"9362:53:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9352:6:14"}]}]},{"nodeType":"YulBlock","src":"9435:118:14","statements":[{"nodeType":"YulVariableDeclaration","src":"9450:16:14","value":{"kind":"number","nodeType":"YulLiteral","src":"9464:2:14","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9454:6:14","type":""}]},{"nodeType":"YulAssignment","src":"9480:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9515:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"9526:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9511:3:14"},"nodeType":"YulFunctionCall","src":"9511:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9535:7:14"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9490:20:14"},"nodeType":"YulFunctionCall","src":"9490:53:14"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9480:6:14"}]}]},{"nodeType":"YulBlock","src":"9563:118:14","statements":[{"nodeType":"YulVariableDeclaration","src":"9578:16:14","value":{"kind":"number","nodeType":"YulLiteral","src":"9592:2:14","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9582:6:14","type":""}]},{"nodeType":"YulAssignment","src":"9608:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9643:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"9654:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9639:3:14"},"nodeType":"YulFunctionCall","src":"9639:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9663:7:14"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"9618:20:14"},"nodeType":"YulFunctionCall","src":"9618:53:14"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"9608:6:14"}]}]},{"nodeType":"YulBlock","src":"9691:287:14","statements":[{"nodeType":"YulVariableDeclaration","src":"9706:46:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9737:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"9748:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9733:3:14"},"nodeType":"YulFunctionCall","src":"9733:18:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9720:12:14"},"nodeType":"YulFunctionCall","src":"9720:32:14"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9710:6:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"9799:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"9801:77:14"},"nodeType":"YulFunctionCall","src":"9801:79:14"},"nodeType":"YulExpressionStatement","src":"9801:79:14"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9771:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"9779:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9768:2:14"},"nodeType":"YulFunctionCall","src":"9768:30:14"},"nodeType":"YulIf","src":"9765:117:14"},{"nodeType":"YulAssignment","src":"9896:72:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9940:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"9951:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9936:3:14"},"nodeType":"YulFunctionCall","src":"9936:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9960:7:14"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"9906:29:14"},"nodeType":"YulFunctionCall","src":"9906:62:14"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"9896:6:14"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9114:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9125:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9137:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9145:6:14","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9153:6:14","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9161:6:14","type":""}],"src":"9042:943:14"},{"body":{"nodeType":"YulBlock","src":"10074:391:14","statements":[{"body":{"nodeType":"YulBlock","src":"10120:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"10122:77:14"},"nodeType":"YulFunctionCall","src":"10122:79:14"},"nodeType":"YulExpressionStatement","src":"10122:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10095:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"10104:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10091:3:14"},"nodeType":"YulFunctionCall","src":"10091:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"10116:2:14","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10087:3:14"},"nodeType":"YulFunctionCall","src":"10087:32:14"},"nodeType":"YulIf","src":"10084:119:14"},{"nodeType":"YulBlock","src":"10213:117:14","statements":[{"nodeType":"YulVariableDeclaration","src":"10228:15:14","value":{"kind":"number","nodeType":"YulLiteral","src":"10242:1:14","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10232:6:14","type":""}]},{"nodeType":"YulAssignment","src":"10257:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10292:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"10303:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10288:3:14"},"nodeType":"YulFunctionCall","src":"10288:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10312:7:14"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"10267:20:14"},"nodeType":"YulFunctionCall","src":"10267:53:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10257:6:14"}]}]},{"nodeType":"YulBlock","src":"10340:118:14","statements":[{"nodeType":"YulVariableDeclaration","src":"10355:16:14","value":{"kind":"number","nodeType":"YulLiteral","src":"10369:2:14","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10359:6:14","type":""}]},{"nodeType":"YulAssignment","src":"10385:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10420:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"10431:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10416:3:14"},"nodeType":"YulFunctionCall","src":"10416:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10440:7:14"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"10395:20:14"},"nodeType":"YulFunctionCall","src":"10395:53:14"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10385:6:14"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10036:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10047:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10059:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10067:6:14","type":""}],"src":"9991:474:14"},{"body":{"nodeType":"YulBlock","src":"10499:152:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10516:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10519:77:14","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10509:6:14"},"nodeType":"YulFunctionCall","src":"10509:88:14"},"nodeType":"YulExpressionStatement","src":"10509:88:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10613:1:14","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10616:4:14","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10606:6:14"},"nodeType":"YulFunctionCall","src":"10606:15:14"},"nodeType":"YulExpressionStatement","src":"10606:15:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10637:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10640:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10630:6:14"},"nodeType":"YulFunctionCall","src":"10630:15:14"},"nodeType":"YulExpressionStatement","src":"10630:15:14"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"10471:180:14"},{"body":{"nodeType":"YulBlock","src":"10708:269:14","statements":[{"nodeType":"YulAssignment","src":"10718:22:14","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"10732:4:14"},{"kind":"number","nodeType":"YulLiteral","src":"10738:1:14","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"10728:3:14"},"nodeType":"YulFunctionCall","src":"10728:12:14"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"10718:6:14"}]},{"nodeType":"YulVariableDeclaration","src":"10749:38:14","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"10779:4:14"},{"kind":"number","nodeType":"YulLiteral","src":"10785:1:14","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10775:3:14"},"nodeType":"YulFunctionCall","src":"10775:12:14"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"10753:18:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"10826:51:14","statements":[{"nodeType":"YulAssignment","src":"10840:27:14","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10854:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"10862:4:14","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10850:3:14"},"nodeType":"YulFunctionCall","src":"10850:17:14"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"10840:6:14"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"10806:18:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10799:6:14"},"nodeType":"YulFunctionCall","src":"10799:26:14"},"nodeType":"YulIf","src":"10796:81:14"},{"body":{"nodeType":"YulBlock","src":"10929:42:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"10943:16:14"},"nodeType":"YulFunctionCall","src":"10943:18:14"},"nodeType":"YulExpressionStatement","src":"10943:18:14"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"10893:18:14"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10916:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"10924:2:14","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10913:2:14"},"nodeType":"YulFunctionCall","src":"10913:14:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10890:2:14"},"nodeType":"YulFunctionCall","src":"10890:38:14"},"nodeType":"YulIf","src":"10887:84:14"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"10692:4:14","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"10701:6:14","type":""}],"src":"10657:320:14"},{"body":{"nodeType":"YulBlock","src":"11089:114:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11111:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"11119:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11107:3:14"},"nodeType":"YulFunctionCall","src":"11107:14:14"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nodeType":"YulLiteral","src":"11123:34:14","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11100:6:14"},"nodeType":"YulFunctionCall","src":"11100:58:14"},"nodeType":"YulExpressionStatement","src":"11100:58:14"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11179:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"11187:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11175:3:14"},"nodeType":"YulFunctionCall","src":"11175:15:14"},{"hexValue":"72","kind":"string","nodeType":"YulLiteral","src":"11192:3:14","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11168:6:14"},"nodeType":"YulFunctionCall","src":"11168:28:14"},"nodeType":"YulExpressionStatement","src":"11168:28:14"}]},"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"11081:6:14","type":""}],"src":"10983:220:14"},{"body":{"nodeType":"YulBlock","src":"11355:220:14","statements":[{"nodeType":"YulAssignment","src":"11365:74:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11431:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"11436:2:14","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11372:58:14"},"nodeType":"YulFunctionCall","src":"11372:67:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11365:3:14"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11537:3:14"}],"functionName":{"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulIdentifier","src":"11448:88:14"},"nodeType":"YulFunctionCall","src":"11448:93:14"},"nodeType":"YulExpressionStatement","src":"11448:93:14"},{"nodeType":"YulAssignment","src":"11550:19:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11561:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"11566:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11557:3:14"},"nodeType":"YulFunctionCall","src":"11557:12:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11550:3:14"}]}]},"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11343:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11351:3:14","type":""}],"src":"11209:366:14"},{"body":{"nodeType":"YulBlock","src":"11752:248:14","statements":[{"nodeType":"YulAssignment","src":"11762:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11774:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"11785:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11770:3:14"},"nodeType":"YulFunctionCall","src":"11770:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11762:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11809:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"11820:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11805:3:14"},"nodeType":"YulFunctionCall","src":"11805:17:14"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11828:4:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"11834:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11824:3:14"},"nodeType":"YulFunctionCall","src":"11824:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11798:6:14"},"nodeType":"YulFunctionCall","src":"11798:47:14"},"nodeType":"YulExpressionStatement","src":"11798:47:14"},{"nodeType":"YulAssignment","src":"11854:139:14","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11988:4:14"}],"functionName":{"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11862:124:14"},"nodeType":"YulFunctionCall","src":"11862:131:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11854:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11732:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11747:4:14","type":""}],"src":"11581:419:14"},{"body":{"nodeType":"YulBlock","src":"12112:142:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12134:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"12142:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12130:3:14"},"nodeType":"YulFunctionCall","src":"12130:14:14"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f","kind":"string","nodeType":"YulLiteral","src":"12146:34:14","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12123:6:14"},"nodeType":"YulFunctionCall","src":"12123:58:14"},"nodeType":"YulExpressionStatement","src":"12123:58:14"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12202:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"12210:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12198:3:14"},"nodeType":"YulFunctionCall","src":"12198:15:14"},{"hexValue":"6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","kind":"string","nodeType":"YulLiteral","src":"12215:31:14","type":"","value":"ken owner or approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12191:6:14"},"nodeType":"YulFunctionCall","src":"12191:56:14"},"nodeType":"YulExpressionStatement","src":"12191:56:14"}]},"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12104:6:14","type":""}],"src":"12006:248:14"},{"body":{"nodeType":"YulBlock","src":"12406:220:14","statements":[{"nodeType":"YulAssignment","src":"12416:74:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12482:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"12487:2:14","type":"","value":"61"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12423:58:14"},"nodeType":"YulFunctionCall","src":"12423:67:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12416:3:14"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12588:3:14"}],"functionName":{"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulIdentifier","src":"12499:88:14"},"nodeType":"YulFunctionCall","src":"12499:93:14"},"nodeType":"YulExpressionStatement","src":"12499:93:14"},{"nodeType":"YulAssignment","src":"12601:19:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12612:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"12617:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12608:3:14"},"nodeType":"YulFunctionCall","src":"12608:12:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12601:3:14"}]}]},"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12394:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12402:3:14","type":""}],"src":"12260:366:14"},{"body":{"nodeType":"YulBlock","src":"12803:248:14","statements":[{"nodeType":"YulAssignment","src":"12813:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12825:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"12836:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12821:3:14"},"nodeType":"YulFunctionCall","src":"12821:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12813:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12860:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"12871:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12856:3:14"},"nodeType":"YulFunctionCall","src":"12856:17:14"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12879:4:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"12885:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12875:3:14"},"nodeType":"YulFunctionCall","src":"12875:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12849:6:14"},"nodeType":"YulFunctionCall","src":"12849:47:14"},"nodeType":"YulExpressionStatement","src":"12849:47:14"},{"nodeType":"YulAssignment","src":"12905:139:14","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13039:4:14"}],"functionName":{"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12913:124:14"},"nodeType":"YulFunctionCall","src":"12913:131:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12905:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12783:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12798:4:14","type":""}],"src":"12632:419:14"},{"body":{"nodeType":"YulBlock","src":"13163:126:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13185:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"13193:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13181:3:14"},"nodeType":"YulFunctionCall","src":"13181:14:14"},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65","kind":"string","nodeType":"YulLiteral","src":"13197:34:14","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13174:6:14"},"nodeType":"YulFunctionCall","src":"13174:58:14"},"nodeType":"YulExpressionStatement","src":"13174:58:14"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13253:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"13261:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13249:3:14"},"nodeType":"YulFunctionCall","src":"13249:15:14"},{"hexValue":"72206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"13266:15:14","type":"","value":"r or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13242:6:14"},"nodeType":"YulFunctionCall","src":"13242:40:14"},"nodeType":"YulExpressionStatement","src":"13242:40:14"}]},"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"13155:6:14","type":""}],"src":"13057:232:14"},{"body":{"nodeType":"YulBlock","src":"13441:220:14","statements":[{"nodeType":"YulAssignment","src":"13451:74:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13517:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"13522:2:14","type":"","value":"45"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13458:58:14"},"nodeType":"YulFunctionCall","src":"13458:67:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13451:3:14"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13623:3:14"}],"functionName":{"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulIdentifier","src":"13534:88:14"},"nodeType":"YulFunctionCall","src":"13534:93:14"},"nodeType":"YulExpressionStatement","src":"13534:93:14"},{"nodeType":"YulAssignment","src":"13636:19:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13647:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"13652:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13643:3:14"},"nodeType":"YulFunctionCall","src":"13643:12:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13636:3:14"}]}]},"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13429:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13437:3:14","type":""}],"src":"13295:366:14"},{"body":{"nodeType":"YulBlock","src":"13838:248:14","statements":[{"nodeType":"YulAssignment","src":"13848:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13860:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"13871:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13856:3:14"},"nodeType":"YulFunctionCall","src":"13856:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13848:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13895:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"13906:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13891:3:14"},"nodeType":"YulFunctionCall","src":"13891:17:14"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13914:4:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"13920:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13910:3:14"},"nodeType":"YulFunctionCall","src":"13910:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13884:6:14"},"nodeType":"YulFunctionCall","src":"13884:47:14"},"nodeType":"YulExpressionStatement","src":"13884:47:14"},{"nodeType":"YulAssignment","src":"13940:139:14","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14074:4:14"}],"functionName":{"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13948:124:14"},"nodeType":"YulFunctionCall","src":"13948:131:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13940:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13818:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13833:4:14","type":""}],"src":"13667:419:14"},{"body":{"nodeType":"YulBlock","src":"14198:122:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14220:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"14228:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14216:3:14"},"nodeType":"YulFunctionCall","src":"14216:14:14"},{"hexValue":"5468657265206973206e6f206d616a6f7269747920617070726f76616c20746f","kind":"string","nodeType":"YulLiteral","src":"14232:34:14","type":"","value":"There is no majority approval to"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14209:6:14"},"nodeType":"YulFunctionCall","src":"14209:58:14"},"nodeType":"YulExpressionStatement","src":"14209:58:14"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14288:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"14296:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14284:3:14"},"nodeType":"YulFunctionCall","src":"14284:15:14"},{"hexValue":"207769746864726177","kind":"string","nodeType":"YulLiteral","src":"14301:11:14","type":"","value":" withdraw"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14277:6:14"},"nodeType":"YulFunctionCall","src":"14277:36:14"},"nodeType":"YulExpressionStatement","src":"14277:36:14"}]},"name":"store_literal_in_memory_1996ccb6adb7d105883c503be6c0fca8b239a35cc290cf1105e26098b6525e2f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"14190:6:14","type":""}],"src":"14092:228:14"},{"body":{"nodeType":"YulBlock","src":"14472:220:14","statements":[{"nodeType":"YulAssignment","src":"14482:74:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14548:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"14553:2:14","type":"","value":"41"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14489:58:14"},"nodeType":"YulFunctionCall","src":"14489:67:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14482:3:14"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14654:3:14"}],"functionName":{"name":"store_literal_in_memory_1996ccb6adb7d105883c503be6c0fca8b239a35cc290cf1105e26098b6525e2f","nodeType":"YulIdentifier","src":"14565:88:14"},"nodeType":"YulFunctionCall","src":"14565:93:14"},"nodeType":"YulExpressionStatement","src":"14565:93:14"},{"nodeType":"YulAssignment","src":"14667:19:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14678:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"14683:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14674:3:14"},"nodeType":"YulFunctionCall","src":"14674:12:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14667:3:14"}]}]},"name":"abi_encode_t_stringliteral_1996ccb6adb7d105883c503be6c0fca8b239a35cc290cf1105e26098b6525e2f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14460:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14468:3:14","type":""}],"src":"14326:366:14"},{"body":{"nodeType":"YulBlock","src":"14869:248:14","statements":[{"nodeType":"YulAssignment","src":"14879:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14891:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"14902:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14887:3:14"},"nodeType":"YulFunctionCall","src":"14887:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14879:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14926:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"14937:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14922:3:14"},"nodeType":"YulFunctionCall","src":"14922:17:14"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14945:4:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"14951:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14941:3:14"},"nodeType":"YulFunctionCall","src":"14941:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14915:6:14"},"nodeType":"YulFunctionCall","src":"14915:47:14"},"nodeType":"YulExpressionStatement","src":"14915:47:14"},{"nodeType":"YulAssignment","src":"14971:139:14","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15105:4:14"}],"functionName":{"name":"abi_encode_t_stringliteral_1996ccb6adb7d105883c503be6c0fca8b239a35cc290cf1105e26098b6525e2f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14979:124:14"},"nodeType":"YulFunctionCall","src":"14979:131:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14971:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_1996ccb6adb7d105883c503be6c0fca8b239a35cc290cf1105e26098b6525e2f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14849:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14864:4:14","type":""}],"src":"14698:419:14"},{"body":{"nodeType":"YulBlock","src":"15236:34:14","statements":[{"nodeType":"YulAssignment","src":"15246:18:14","value":{"name":"pos","nodeType":"YulIdentifier","src":"15261:3:14"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"15246:11:14"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15208:3:14","type":""},{"name":"length","nodeType":"YulTypedName","src":"15213:6:14","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"15224:11:14","type":""}],"src":"15123:147:14"},{"body":{"nodeType":"YulBlock","src":"15382:8:14","statements":[]},"name":"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"15374:6:14","type":""}],"src":"15276:114:14"},{"body":{"nodeType":"YulBlock","src":"15559:235:14","statements":[{"nodeType":"YulAssignment","src":"15569:90:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15652:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"15657:1:14","type":"","value":"0"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"15576:75:14"},"nodeType":"YulFunctionCall","src":"15576:83:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15569:3:14"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15757:3:14"}],"functionName":{"name":"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nodeType":"YulIdentifier","src":"15668:88:14"},"nodeType":"YulFunctionCall","src":"15668:93:14"},"nodeType":"YulExpressionStatement","src":"15668:93:14"},{"nodeType":"YulAssignment","src":"15770:18:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15781:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"15786:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15777:3:14"},"nodeType":"YulFunctionCall","src":"15777:11:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15770:3:14"}]}]},"name":"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15547:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15555:3:14","type":""}],"src":"15396:398:14"},{"body":{"nodeType":"YulBlock","src":"15988:191:14","statements":[{"nodeType":"YulAssignment","src":"15999:154:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16149:3:14"}],"functionName":{"name":"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"16006:141:14"},"nodeType":"YulFunctionCall","src":"16006:147:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15999:3:14"}]},{"nodeType":"YulAssignment","src":"16163:10:14","value":{"name":"pos","nodeType":"YulIdentifier","src":"16170:3:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16163:3:14"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15975:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15984:3:14","type":""}],"src":"15800:379:14"},{"body":{"nodeType":"YulBlock","src":"16291:68:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16313:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"16321:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16309:3:14"},"nodeType":"YulFunctionCall","src":"16309:14:14"},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","kind":"string","nodeType":"YulLiteral","src":"16325:26:14","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16302:6:14"},"nodeType":"YulFunctionCall","src":"16302:50:14"},"nodeType":"YulExpressionStatement","src":"16302:50:14"}]},"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"16283:6:14","type":""}],"src":"16185:174:14"},{"body":{"nodeType":"YulBlock","src":"16511:220:14","statements":[{"nodeType":"YulAssignment","src":"16521:74:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16587:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"16592:2:14","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16528:58:14"},"nodeType":"YulFunctionCall","src":"16528:67:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16521:3:14"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16693:3:14"}],"functionName":{"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulIdentifier","src":"16604:88:14"},"nodeType":"YulFunctionCall","src":"16604:93:14"},"nodeType":"YulExpressionStatement","src":"16604:93:14"},{"nodeType":"YulAssignment","src":"16706:19:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16717:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"16722:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16713:3:14"},"nodeType":"YulFunctionCall","src":"16713:12:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16706:3:14"}]}]},"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16499:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16507:3:14","type":""}],"src":"16365:366:14"},{"body":{"nodeType":"YulBlock","src":"16908:248:14","statements":[{"nodeType":"YulAssignment","src":"16918:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16930:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"16941:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16926:3:14"},"nodeType":"YulFunctionCall","src":"16926:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16918:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16965:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"16976:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16961:3:14"},"nodeType":"YulFunctionCall","src":"16961:17:14"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16984:4:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"16990:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16980:3:14"},"nodeType":"YulFunctionCall","src":"16980:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16954:6:14"},"nodeType":"YulFunctionCall","src":"16954:47:14"},"nodeType":"YulExpressionStatement","src":"16954:47:14"},{"nodeType":"YulAssignment","src":"17010:139:14","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17144:4:14"}],"functionName":{"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17018:124:14"},"nodeType":"YulFunctionCall","src":"17018:131:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17010:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16888:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16903:4:14","type":""}],"src":"16737:419:14"},{"body":{"nodeType":"YulBlock","src":"17268:122:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17290:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"17298:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17286:3:14"},"nodeType":"YulFunctionCall","src":"17286:14:14"},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f742061207661","kind":"string","nodeType":"YulLiteral","src":"17302:34:14","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17279:6:14"},"nodeType":"YulFunctionCall","src":"17279:58:14"},"nodeType":"YulExpressionStatement","src":"17279:58:14"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17358:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"17366:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17354:3:14"},"nodeType":"YulFunctionCall","src":"17354:15:14"},{"hexValue":"6c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"17371:11:14","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17347:6:14"},"nodeType":"YulFunctionCall","src":"17347:36:14"},"nodeType":"YulExpressionStatement","src":"17347:36:14"}]},"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"17260:6:14","type":""}],"src":"17162:228:14"},{"body":{"nodeType":"YulBlock","src":"17542:220:14","statements":[{"nodeType":"YulAssignment","src":"17552:74:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17618:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"17623:2:14","type":"","value":"41"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17559:58:14"},"nodeType":"YulFunctionCall","src":"17559:67:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17552:3:14"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17724:3:14"}],"functionName":{"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulIdentifier","src":"17635:88:14"},"nodeType":"YulFunctionCall","src":"17635:93:14"},"nodeType":"YulExpressionStatement","src":"17635:93:14"},{"nodeType":"YulAssignment","src":"17737:19:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17748:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"17753:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17744:3:14"},"nodeType":"YulFunctionCall","src":"17744:12:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17737:3:14"}]}]},"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17530:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17538:3:14","type":""}],"src":"17396:366:14"},{"body":{"nodeType":"YulBlock","src":"17939:248:14","statements":[{"nodeType":"YulAssignment","src":"17949:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17961:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"17972:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17957:3:14"},"nodeType":"YulFunctionCall","src":"17957:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17949:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17996:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"18007:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17992:3:14"},"nodeType":"YulFunctionCall","src":"17992:17:14"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18015:4:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"18021:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18011:3:14"},"nodeType":"YulFunctionCall","src":"18011:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17985:6:14"},"nodeType":"YulFunctionCall","src":"17985:47:14"},"nodeType":"YulExpressionStatement","src":"17985:47:14"},{"nodeType":"YulAssignment","src":"18041:139:14","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18175:4:14"}],"functionName":{"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18049:124:14"},"nodeType":"YulFunctionCall","src":"18049:131:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18041:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17919:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17934:4:14","type":""}],"src":"17768:419:14"},{"body":{"nodeType":"YulBlock","src":"18221:152:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18238:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18241:77:14","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18231:6:14"},"nodeType":"YulFunctionCall","src":"18231:88:14"},"nodeType":"YulExpressionStatement","src":"18231:88:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18335:1:14","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"18338:4:14","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18328:6:14"},"nodeType":"YulFunctionCall","src":"18328:15:14"},"nodeType":"YulExpressionStatement","src":"18328:15:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18359:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18362:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"18352:6:14"},"nodeType":"YulFunctionCall","src":"18352:15:14"},"nodeType":"YulExpressionStatement","src":"18352:15:14"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"18193:180:14"},{"body":{"nodeType":"YulBlock","src":"18485:119:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18507:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"18515:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18503:3:14"},"nodeType":"YulFunctionCall","src":"18503:14:14"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"18519:34:14","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18496:6:14"},"nodeType":"YulFunctionCall","src":"18496:58:14"},"nodeType":"YulExpressionStatement","src":"18496:58:14"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18575:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"18583:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18571:3:14"},"nodeType":"YulFunctionCall","src":"18571:15:14"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"18588:8:14","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18564:6:14"},"nodeType":"YulFunctionCall","src":"18564:33:14"},"nodeType":"YulExpressionStatement","src":"18564:33:14"}]},"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18477:6:14","type":""}],"src":"18379:225:14"},{"body":{"nodeType":"YulBlock","src":"18756:220:14","statements":[{"nodeType":"YulAssignment","src":"18766:74:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18832:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"18837:2:14","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18773:58:14"},"nodeType":"YulFunctionCall","src":"18773:67:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18766:3:14"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18938:3:14"}],"functionName":{"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulIdentifier","src":"18849:88:14"},"nodeType":"YulFunctionCall","src":"18849:93:14"},"nodeType":"YulExpressionStatement","src":"18849:93:14"},{"nodeType":"YulAssignment","src":"18951:19:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18962:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"18967:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18958:3:14"},"nodeType":"YulFunctionCall","src":"18958:12:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18951:3:14"}]}]},"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18744:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18752:3:14","type":""}],"src":"18610:366:14"},{"body":{"nodeType":"YulBlock","src":"19153:248:14","statements":[{"nodeType":"YulAssignment","src":"19163:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19175:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"19186:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19171:3:14"},"nodeType":"YulFunctionCall","src":"19171:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19163:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19210:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"19221:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19206:3:14"},"nodeType":"YulFunctionCall","src":"19206:17:14"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19229:4:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"19235:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19225:3:14"},"nodeType":"YulFunctionCall","src":"19225:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19199:6:14"},"nodeType":"YulFunctionCall","src":"19199:47:14"},"nodeType":"YulExpressionStatement","src":"19199:47:14"},{"nodeType":"YulAssignment","src":"19255:139:14","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19389:4:14"}],"functionName":{"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19263:124:14"},"nodeType":"YulFunctionCall","src":"19263:131:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19255:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19133:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19148:4:14","type":""}],"src":"18982:419:14"},{"body":{"nodeType":"YulBlock","src":"19513:118:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19535:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"19543:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19531:3:14"},"nodeType":"YulFunctionCall","src":"19531:14:14"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nodeType":"YulLiteral","src":"19547:34:14","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19524:6:14"},"nodeType":"YulFunctionCall","src":"19524:58:14"},"nodeType":"YulExpressionStatement","src":"19524:58:14"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19603:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"19611:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19599:3:14"},"nodeType":"YulFunctionCall","src":"19599:15:14"},{"hexValue":"6f776e6572","kind":"string","nodeType":"YulLiteral","src":"19616:7:14","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19592:6:14"},"nodeType":"YulFunctionCall","src":"19592:32:14"},"nodeType":"YulExpressionStatement","src":"19592:32:14"}]},"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"19505:6:14","type":""}],"src":"19407:224:14"},{"body":{"nodeType":"YulBlock","src":"19783:220:14","statements":[{"nodeType":"YulAssignment","src":"19793:74:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19859:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"19864:2:14","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19800:58:14"},"nodeType":"YulFunctionCall","src":"19800:67:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19793:3:14"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19965:3:14"}],"functionName":{"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulIdentifier","src":"19876:88:14"},"nodeType":"YulFunctionCall","src":"19876:93:14"},"nodeType":"YulExpressionStatement","src":"19876:93:14"},{"nodeType":"YulAssignment","src":"19978:19:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19989:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"19994:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19985:3:14"},"nodeType":"YulFunctionCall","src":"19985:12:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19978:3:14"}]}]},"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19771:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19779:3:14","type":""}],"src":"19637:366:14"},{"body":{"nodeType":"YulBlock","src":"20180:248:14","statements":[{"nodeType":"YulAssignment","src":"20190:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20202:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"20213:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20198:3:14"},"nodeType":"YulFunctionCall","src":"20198:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20190:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20237:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"20248:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20233:3:14"},"nodeType":"YulFunctionCall","src":"20233:17:14"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20256:4:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"20262:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20252:3:14"},"nodeType":"YulFunctionCall","src":"20252:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20226:6:14"},"nodeType":"YulFunctionCall","src":"20226:47:14"},"nodeType":"YulExpressionStatement","src":"20226:47:14"},{"nodeType":"YulAssignment","src":"20282:139:14","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20416:4:14"}],"functionName":{"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20290:124:14"},"nodeType":"YulFunctionCall","src":"20290:131:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20282:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20160:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20175:4:14","type":""}],"src":"20009:419:14"},{"body":{"nodeType":"YulBlock","src":"20540:117:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20562:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"20570:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20558:3:14"},"nodeType":"YulFunctionCall","src":"20558:14:14"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"20574:34:14","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20551:6:14"},"nodeType":"YulFunctionCall","src":"20551:58:14"},"nodeType":"YulExpressionStatement","src":"20551:58:14"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20630:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"20638:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20626:3:14"},"nodeType":"YulFunctionCall","src":"20626:15:14"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"20643:6:14","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20619:6:14"},"nodeType":"YulFunctionCall","src":"20619:31:14"},"nodeType":"YulExpressionStatement","src":"20619:31:14"}]},"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"20532:6:14","type":""}],"src":"20434:223:14"},{"body":{"nodeType":"YulBlock","src":"20809:220:14","statements":[{"nodeType":"YulAssignment","src":"20819:74:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20885:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"20890:2:14","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20826:58:14"},"nodeType":"YulFunctionCall","src":"20826:67:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"20819:3:14"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20991:3:14"}],"functionName":{"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulIdentifier","src":"20902:88:14"},"nodeType":"YulFunctionCall","src":"20902:93:14"},"nodeType":"YulExpressionStatement","src":"20902:93:14"},{"nodeType":"YulAssignment","src":"21004:19:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21015:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"21020:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21011:3:14"},"nodeType":"YulFunctionCall","src":"21011:12:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"21004:3:14"}]}]},"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20797:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20805:3:14","type":""}],"src":"20663:366:14"},{"body":{"nodeType":"YulBlock","src":"21206:248:14","statements":[{"nodeType":"YulAssignment","src":"21216:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21228:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"21239:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21224:3:14"},"nodeType":"YulFunctionCall","src":"21224:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21216:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21263:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"21274:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21259:3:14"},"nodeType":"YulFunctionCall","src":"21259:17:14"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21282:4:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"21288:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21278:3:14"},"nodeType":"YulFunctionCall","src":"21278:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21252:6:14"},"nodeType":"YulFunctionCall","src":"21252:47:14"},"nodeType":"YulExpressionStatement","src":"21252:47:14"},{"nodeType":"YulAssignment","src":"21308:139:14","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21442:4:14"}],"functionName":{"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21316:124:14"},"nodeType":"YulFunctionCall","src":"21316:131:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21308:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21186:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21201:4:14","type":""}],"src":"21035:419:14"},{"body":{"nodeType":"YulBlock","src":"21566:76:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21588:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"21596:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21584:3:14"},"nodeType":"YulFunctionCall","src":"21584:14:14"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"21600:34:14","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21577:6:14"},"nodeType":"YulFunctionCall","src":"21577:58:14"},"nodeType":"YulExpressionStatement","src":"21577:58:14"}]},"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"21558:6:14","type":""}],"src":"21460:182:14"},{"body":{"nodeType":"YulBlock","src":"21794:220:14","statements":[{"nodeType":"YulAssignment","src":"21804:74:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21870:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"21875:2:14","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21811:58:14"},"nodeType":"YulFunctionCall","src":"21811:67:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"21804:3:14"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21976:3:14"}],"functionName":{"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulIdentifier","src":"21887:88:14"},"nodeType":"YulFunctionCall","src":"21887:93:14"},"nodeType":"YulExpressionStatement","src":"21887:93:14"},{"nodeType":"YulAssignment","src":"21989:19:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22000:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"22005:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21996:3:14"},"nodeType":"YulFunctionCall","src":"21996:12:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"21989:3:14"}]}]},"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"21782:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"21790:3:14","type":""}],"src":"21648:366:14"},{"body":{"nodeType":"YulBlock","src":"22191:248:14","statements":[{"nodeType":"YulAssignment","src":"22201:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22213:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"22224:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22209:3:14"},"nodeType":"YulFunctionCall","src":"22209:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22201:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22248:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"22259:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22244:3:14"},"nodeType":"YulFunctionCall","src":"22244:17:14"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22267:4:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"22273:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22263:3:14"},"nodeType":"YulFunctionCall","src":"22263:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22237:6:14"},"nodeType":"YulFunctionCall","src":"22237:47:14"},"nodeType":"YulExpressionStatement","src":"22237:47:14"},{"nodeType":"YulAssignment","src":"22293:139:14","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22427:4:14"}],"functionName":{"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22301:124:14"},"nodeType":"YulFunctionCall","src":"22301:131:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22293:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22171:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22186:4:14","type":""}],"src":"22020:419:14"},{"body":{"nodeType":"YulBlock","src":"22473:152:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22490:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22493:77:14","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22483:6:14"},"nodeType":"YulFunctionCall","src":"22483:88:14"},"nodeType":"YulExpressionStatement","src":"22483:88:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22587:1:14","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"22590:4:14","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22580:6:14"},"nodeType":"YulFunctionCall","src":"22580:15:14"},"nodeType":"YulExpressionStatement","src":"22580:15:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22611:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22614:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"22604:6:14"},"nodeType":"YulFunctionCall","src":"22604:15:14"},"nodeType":"YulExpressionStatement","src":"22604:15:14"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"22445:180:14"},{"body":{"nodeType":"YulBlock","src":"22679:362:14","statements":[{"nodeType":"YulAssignment","src":"22689:25:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"22712:1:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"22694:17:14"},"nodeType":"YulFunctionCall","src":"22694:20:14"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"22689:1:14"}]},{"nodeType":"YulAssignment","src":"22723:25:14","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"22746:1:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"22728:17:14"},"nodeType":"YulFunctionCall","src":"22728:20:14"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"22723:1:14"}]},{"nodeType":"YulVariableDeclaration","src":"22757:28:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"22780:1:14"},{"name":"y","nodeType":"YulIdentifier","src":"22783:1:14"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"22776:3:14"},"nodeType":"YulFunctionCall","src":"22776:9:14"},"variables":[{"name":"product_raw","nodeType":"YulTypedName","src":"22761:11:14","type":""}]},{"nodeType":"YulAssignment","src":"22794:41:14","value":{"arguments":[{"name":"product_raw","nodeType":"YulIdentifier","src":"22823:11:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"22805:17:14"},"nodeType":"YulFunctionCall","src":"22805:30:14"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"22794:7:14"}]},{"body":{"nodeType":"YulBlock","src":"23012:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"23014:16:14"},"nodeType":"YulFunctionCall","src":"23014:18:14"},"nodeType":"YulExpressionStatement","src":"23014:18:14"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"22945:1:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"22938:6:14"},"nodeType":"YulFunctionCall","src":"22938:9:14"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"22968:1:14"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"22975:7:14"},{"name":"x","nodeType":"YulIdentifier","src":"22984:1:14"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"22971:3:14"},"nodeType":"YulFunctionCall","src":"22971:15:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"22965:2:14"},"nodeType":"YulFunctionCall","src":"22965:22:14"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"22918:2:14"},"nodeType":"YulFunctionCall","src":"22918:83:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"22898:6:14"},"nodeType":"YulFunctionCall","src":"22898:113:14"},"nodeType":"YulIf","src":"22895:139:14"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"22662:1:14","type":""},{"name":"y","nodeType":"YulTypedName","src":"22665:1:14","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"22671:7:14","type":""}],"src":"22631:410:14"},{"body":{"nodeType":"YulBlock","src":"23075:152:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23092:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23095:77:14","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23085:6:14"},"nodeType":"YulFunctionCall","src":"23085:88:14"},"nodeType":"YulExpressionStatement","src":"23085:88:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23189:1:14","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"23192:4:14","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23182:6:14"},"nodeType":"YulFunctionCall","src":"23182:15:14"},"nodeType":"YulExpressionStatement","src":"23182:15:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23213:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23216:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"23206:6:14"},"nodeType":"YulFunctionCall","src":"23206:15:14"},"nodeType":"YulExpressionStatement","src":"23206:15:14"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"23047:180:14"},{"body":{"nodeType":"YulBlock","src":"23275:143:14","statements":[{"nodeType":"YulAssignment","src":"23285:25:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"23308:1:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"23290:17:14"},"nodeType":"YulFunctionCall","src":"23290:20:14"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"23285:1:14"}]},{"nodeType":"YulAssignment","src":"23319:25:14","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"23342:1:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"23324:17:14"},"nodeType":"YulFunctionCall","src":"23324:20:14"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"23319:1:14"}]},{"body":{"nodeType":"YulBlock","src":"23366:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"23368:16:14"},"nodeType":"YulFunctionCall","src":"23368:18:14"},"nodeType":"YulExpressionStatement","src":"23368:18:14"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"23363:1:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"23356:6:14"},"nodeType":"YulFunctionCall","src":"23356:9:14"},"nodeType":"YulIf","src":"23353:35:14"},{"nodeType":"YulAssignment","src":"23398:14:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"23407:1:14"},{"name":"y","nodeType":"YulIdentifier","src":"23410:1:14"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"23403:3:14"},"nodeType":"YulFunctionCall","src":"23403:9:14"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"23398:1:14"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"23264:1:14","type":""},{"name":"y","nodeType":"YulTypedName","src":"23267:1:14","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"23273:1:14","type":""}],"src":"23233:185:14"},{"body":{"nodeType":"YulBlock","src":"23530:69:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"23552:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"23560:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23548:3:14"},"nodeType":"YulFunctionCall","src":"23548:14:14"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nodeType":"YulLiteral","src":"23564:27:14","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23541:6:14"},"nodeType":"YulFunctionCall","src":"23541:51:14"},"nodeType":"YulExpressionStatement","src":"23541:51:14"}]},"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"23522:6:14","type":""}],"src":"23424:175:14"},{"body":{"nodeType":"YulBlock","src":"23751:220:14","statements":[{"nodeType":"YulAssignment","src":"23761:74:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23827:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"23832:2:14","type":"","value":"25"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23768:58:14"},"nodeType":"YulFunctionCall","src":"23768:67:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"23761:3:14"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23933:3:14"}],"functionName":{"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulIdentifier","src":"23844:88:14"},"nodeType":"YulFunctionCall","src":"23844:93:14"},"nodeType":"YulExpressionStatement","src":"23844:93:14"},{"nodeType":"YulAssignment","src":"23946:19:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23957:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"23962:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23953:3:14"},"nodeType":"YulFunctionCall","src":"23953:12:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"23946:3:14"}]}]},"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"23739:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"23747:3:14","type":""}],"src":"23605:366:14"},{"body":{"nodeType":"YulBlock","src":"24148:248:14","statements":[{"nodeType":"YulAssignment","src":"24158:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24170:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"24181:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24166:3:14"},"nodeType":"YulFunctionCall","src":"24166:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24158:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24205:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"24216:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24201:3:14"},"nodeType":"YulFunctionCall","src":"24201:17:14"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24224:4:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"24230:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24220:3:14"},"nodeType":"YulFunctionCall","src":"24220:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24194:6:14"},"nodeType":"YulFunctionCall","src":"24194:47:14"},"nodeType":"YulExpressionStatement","src":"24194:47:14"},{"nodeType":"YulAssignment","src":"24250:139:14","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24384:4:14"}],"functionName":{"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24258:124:14"},"nodeType":"YulFunctionCall","src":"24258:131:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24250:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24128:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24143:4:14","type":""}],"src":"23977:419:14"},{"body":{"nodeType":"YulBlock","src":"24508:131:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24530:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"24538:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24526:3:14"},"nodeType":"YulFunctionCall","src":"24526:14:14"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nodeType":"YulLiteral","src":"24542:34:14","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24519:6:14"},"nodeType":"YulFunctionCall","src":"24519:58:14"},"nodeType":"YulExpressionStatement","src":"24519:58:14"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24598:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"24606:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24594:3:14"},"nodeType":"YulFunctionCall","src":"24594:15:14"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"24611:20:14","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24587:6:14"},"nodeType":"YulFunctionCall","src":"24587:45:14"},"nodeType":"YulExpressionStatement","src":"24587:45:14"}]},"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"24500:6:14","type":""}],"src":"24402:237:14"},{"body":{"nodeType":"YulBlock","src":"24791:220:14","statements":[{"nodeType":"YulAssignment","src":"24801:74:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24867:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"24872:2:14","type":"","value":"50"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24808:58:14"},"nodeType":"YulFunctionCall","src":"24808:67:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"24801:3:14"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24973:3:14"}],"functionName":{"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulIdentifier","src":"24884:88:14"},"nodeType":"YulFunctionCall","src":"24884:93:14"},"nodeType":"YulExpressionStatement","src":"24884:93:14"},{"nodeType":"YulAssignment","src":"24986:19:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24997:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"25002:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24993:3:14"},"nodeType":"YulFunctionCall","src":"24993:12:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"24986:3:14"}]}]},"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"24779:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"24787:3:14","type":""}],"src":"24645:366:14"},{"body":{"nodeType":"YulBlock","src":"25188:248:14","statements":[{"nodeType":"YulAssignment","src":"25198:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25210:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"25221:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25206:3:14"},"nodeType":"YulFunctionCall","src":"25206:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25198:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25245:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"25256:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25241:3:14"},"nodeType":"YulFunctionCall","src":"25241:17:14"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25264:4:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"25270:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25260:3:14"},"nodeType":"YulFunctionCall","src":"25260:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25234:6:14"},"nodeType":"YulFunctionCall","src":"25234:47:14"},"nodeType":"YulExpressionStatement","src":"25234:47:14"},{"nodeType":"YulAssignment","src":"25290:139:14","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25424:4:14"}],"functionName":{"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"25298:124:14"},"nodeType":"YulFunctionCall","src":"25298:131:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25290:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25168:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25183:4:14","type":""}],"src":"25017:419:14"},{"body":{"nodeType":"YulBlock","src":"25487:149:14","statements":[{"nodeType":"YulAssignment","src":"25497:25:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"25520:1:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"25502:17:14"},"nodeType":"YulFunctionCall","src":"25502:20:14"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"25497:1:14"}]},{"nodeType":"YulAssignment","src":"25531:25:14","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"25554:1:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"25536:17:14"},"nodeType":"YulFunctionCall","src":"25536:20:14"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"25531:1:14"}]},{"nodeType":"YulAssignment","src":"25565:17:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"25577:1:14"},{"name":"y","nodeType":"YulIdentifier","src":"25580:1:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25573:3:14"},"nodeType":"YulFunctionCall","src":"25573:9:14"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"25565:4:14"}]},{"body":{"nodeType":"YulBlock","src":"25607:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"25609:16:14"},"nodeType":"YulFunctionCall","src":"25609:18:14"},"nodeType":"YulExpressionStatement","src":"25609:18:14"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"25598:4:14"},{"name":"x","nodeType":"YulIdentifier","src":"25604:1:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"25595:2:14"},"nodeType":"YulFunctionCall","src":"25595:11:14"},"nodeType":"YulIf","src":"25592:37:14"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"25473:1:14","type":""},{"name":"y","nodeType":"YulTypedName","src":"25476:1:14","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"25482:4:14","type":""}],"src":"25442:194:14"},{"body":{"nodeType":"YulBlock","src":"25686:147:14","statements":[{"nodeType":"YulAssignment","src":"25696:25:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"25719:1:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"25701:17:14"},"nodeType":"YulFunctionCall","src":"25701:20:14"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"25696:1:14"}]},{"nodeType":"YulAssignment","src":"25730:25:14","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"25753:1:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"25735:17:14"},"nodeType":"YulFunctionCall","src":"25735:20:14"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"25730:1:14"}]},{"nodeType":"YulAssignment","src":"25764:16:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"25775:1:14"},{"name":"y","nodeType":"YulIdentifier","src":"25778:1:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25771:3:14"},"nodeType":"YulFunctionCall","src":"25771:9:14"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"25764:3:14"}]},{"body":{"nodeType":"YulBlock","src":"25804:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"25806:16:14"},"nodeType":"YulFunctionCall","src":"25806:18:14"},"nodeType":"YulExpressionStatement","src":"25806:18:14"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"25796:1:14"},{"name":"sum","nodeType":"YulIdentifier","src":"25799:3:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"25793:2:14"},"nodeType":"YulFunctionCall","src":"25793:10:14"},"nodeType":"YulIf","src":"25790:36:14"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"25673:1:14","type":""},{"name":"y","nodeType":"YulTypedName","src":"25676:1:14","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"25682:3:14","type":""}],"src":"25642:191:14"},{"body":{"nodeType":"YulBlock","src":"25897:40:14","statements":[{"nodeType":"YulAssignment","src":"25908:22:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25924:5:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"25918:5:14"},"nodeType":"YulFunctionCall","src":"25918:12:14"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"25908:6:14"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"25880:5:14","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"25890:6:14","type":""}],"src":"25839:98:14"},{"body":{"nodeType":"YulBlock","src":"26038:73:14","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26055:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"26060:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26048:6:14"},"nodeType":"YulFunctionCall","src":"26048:19:14"},"nodeType":"YulExpressionStatement","src":"26048:19:14"},{"nodeType":"YulAssignment","src":"26076:29:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26095:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"26100:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26091:3:14"},"nodeType":"YulFunctionCall","src":"26091:14:14"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"26076:11:14"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"26010:3:14","type":""},{"name":"length","nodeType":"YulTypedName","src":"26015:6:14","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"26026:11:14","type":""}],"src":"25943:168:14"},{"body":{"nodeType":"YulBlock","src":"26207:283:14","statements":[{"nodeType":"YulVariableDeclaration","src":"26217:52:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26263:5:14"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"26231:31:14"},"nodeType":"YulFunctionCall","src":"26231:38:14"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"26221:6:14","type":""}]},{"nodeType":"YulAssignment","src":"26278:77:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26343:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"26348:6:14"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26285:57:14"},"nodeType":"YulFunctionCall","src":"26285:70:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"26278:3:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26403:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"26410:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26399:3:14"},"nodeType":"YulFunctionCall","src":"26399:16:14"},{"name":"pos","nodeType":"YulIdentifier","src":"26417:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"26422:6:14"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"26364:34:14"},"nodeType":"YulFunctionCall","src":"26364:65:14"},"nodeType":"YulExpressionStatement","src":"26364:65:14"},{"nodeType":"YulAssignment","src":"26438:46:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26449:3:14"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"26476:6:14"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"26454:21:14"},"nodeType":"YulFunctionCall","src":"26454:29:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26445:3:14"},"nodeType":"YulFunctionCall","src":"26445:39:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"26438:3:14"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"26188:5:14","type":""},{"name":"pos","nodeType":"YulTypedName","src":"26195:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"26203:3:14","type":""}],"src":"26117:373:14"},{"body":{"nodeType":"YulBlock","src":"26696:440:14","statements":[{"nodeType":"YulAssignment","src":"26706:27:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26718:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"26729:3:14","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26714:3:14"},"nodeType":"YulFunctionCall","src":"26714:19:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26706:4:14"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"26787:6:14"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26800:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"26811:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26796:3:14"},"nodeType":"YulFunctionCall","src":"26796:17:14"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"26743:43:14"},"nodeType":"YulFunctionCall","src":"26743:71:14"},"nodeType":"YulExpressionStatement","src":"26743:71:14"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"26868:6:14"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26881:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"26892:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26877:3:14"},"nodeType":"YulFunctionCall","src":"26877:18:14"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"26824:43:14"},"nodeType":"YulFunctionCall","src":"26824:72:14"},"nodeType":"YulExpressionStatement","src":"26824:72:14"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"26950:6:14"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26963:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"26974:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26959:3:14"},"nodeType":"YulFunctionCall","src":"26959:18:14"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"26906:43:14"},"nodeType":"YulFunctionCall","src":"26906:72:14"},"nodeType":"YulExpressionStatement","src":"26906:72:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26999:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"27010:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26995:3:14"},"nodeType":"YulFunctionCall","src":"26995:18:14"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27019:4:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"27025:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27015:3:14"},"nodeType":"YulFunctionCall","src":"27015:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26988:6:14"},"nodeType":"YulFunctionCall","src":"26988:48:14"},"nodeType":"YulExpressionStatement","src":"26988:48:14"},{"nodeType":"YulAssignment","src":"27045:84:14","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"27115:6:14"},{"name":"tail","nodeType":"YulIdentifier","src":"27124:4:14"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27053:61:14"},"nodeType":"YulFunctionCall","src":"27053:76:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27045:4:14"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26644:9:14","type":""},{"name":"value3","nodeType":"YulTypedName","src":"26656:6:14","type":""},{"name":"value2","nodeType":"YulTypedName","src":"26664:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"26672:6:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"26680:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26691:4:14","type":""}],"src":"26496:640:14"},{"body":{"nodeType":"YulBlock","src":"27204:79:14","statements":[{"nodeType":"YulAssignment","src":"27214:22:14","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"27229:6:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"27223:5:14"},"nodeType":"YulFunctionCall","src":"27223:13:14"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"27214:5:14"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27271:5:14"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"27245:25:14"},"nodeType":"YulFunctionCall","src":"27245:32:14"},"nodeType":"YulExpressionStatement","src":"27245:32:14"}]},"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"27182:6:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"27190:3:14","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"27198:5:14","type":""}],"src":"27142:141:14"},{"body":{"nodeType":"YulBlock","src":"27365:273:14","statements":[{"body":{"nodeType":"YulBlock","src":"27411:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"27413:77:14"},"nodeType":"YulFunctionCall","src":"27413:79:14"},"nodeType":"YulExpressionStatement","src":"27413:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"27386:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"27395:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27382:3:14"},"nodeType":"YulFunctionCall","src":"27382:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"27407:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"27378:3:14"},"nodeType":"YulFunctionCall","src":"27378:32:14"},"nodeType":"YulIf","src":"27375:119:14"},{"nodeType":"YulBlock","src":"27504:127:14","statements":[{"nodeType":"YulVariableDeclaration","src":"27519:15:14","value":{"kind":"number","nodeType":"YulLiteral","src":"27533:1:14","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"27523:6:14","type":""}]},{"nodeType":"YulAssignment","src":"27548:73:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27593:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"27604:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27589:3:14"},"nodeType":"YulFunctionCall","src":"27589:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"27613:7:14"}],"functionName":{"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulIdentifier","src":"27558:30:14"},"nodeType":"YulFunctionCall","src":"27558:63:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"27548:6:14"}]}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27335:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"27346:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"27358:6:14","type":""}],"src":"27289:349:14"},{"body":{"nodeType":"YulBlock","src":"27750:76:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"27772:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"27780:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27768:3:14"},"nodeType":"YulFunctionCall","src":"27768:14:14"},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"27784:34:14","type":"","value":"ERC721: mint to the zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27761:6:14"},"nodeType":"YulFunctionCall","src":"27761:58:14"},"nodeType":"YulExpressionStatement","src":"27761:58:14"}]},"name":"store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"27742:6:14","type":""}],"src":"27644:182:14"},{"body":{"nodeType":"YulBlock","src":"27978:220:14","statements":[{"nodeType":"YulAssignment","src":"27988:74:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28054:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"28059:2:14","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27995:58:14"},"nodeType":"YulFunctionCall","src":"27995:67:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"27988:3:14"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28160:3:14"}],"functionName":{"name":"store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","nodeType":"YulIdentifier","src":"28071:88:14"},"nodeType":"YulFunctionCall","src":"28071:93:14"},"nodeType":"YulExpressionStatement","src":"28071:93:14"},{"nodeType":"YulAssignment","src":"28173:19:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28184:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"28189:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28180:3:14"},"nodeType":"YulFunctionCall","src":"28180:12:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"28173:3:14"}]}]},"name":"abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"27966:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"27974:3:14","type":""}],"src":"27832:366:14"},{"body":{"nodeType":"YulBlock","src":"28375:248:14","statements":[{"nodeType":"YulAssignment","src":"28385:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28397:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"28408:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28393:3:14"},"nodeType":"YulFunctionCall","src":"28393:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28385:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28432:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"28443:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28428:3:14"},"nodeType":"YulFunctionCall","src":"28428:17:14"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"28451:4:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"28457:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"28447:3:14"},"nodeType":"YulFunctionCall","src":"28447:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28421:6:14"},"nodeType":"YulFunctionCall","src":"28421:47:14"},"nodeType":"YulExpressionStatement","src":"28421:47:14"},{"nodeType":"YulAssignment","src":"28477:139:14","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"28611:4:14"}],"functionName":{"name":"abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"28485:124:14"},"nodeType":"YulFunctionCall","src":"28485:131:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28477:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28355:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28370:4:14","type":""}],"src":"28204:419:14"},{"body":{"nodeType":"YulBlock","src":"28735:72:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"28757:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"28765:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28753:3:14"},"nodeType":"YulFunctionCall","src":"28753:14:14"},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","kind":"string","nodeType":"YulLiteral","src":"28769:30:14","type":"","value":"ERC721: token already minted"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28746:6:14"},"nodeType":"YulFunctionCall","src":"28746:54:14"},"nodeType":"YulExpressionStatement","src":"28746:54:14"}]},"name":"store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"28727:6:14","type":""}],"src":"28629:178:14"},{"body":{"nodeType":"YulBlock","src":"28959:220:14","statements":[{"nodeType":"YulAssignment","src":"28969:74:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29035:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"29040:2:14","type":"","value":"28"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"28976:58:14"},"nodeType":"YulFunctionCall","src":"28976:67:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"28969:3:14"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29141:3:14"}],"functionName":{"name":"store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","nodeType":"YulIdentifier","src":"29052:88:14"},"nodeType":"YulFunctionCall","src":"29052:93:14"},"nodeType":"YulExpressionStatement","src":"29052:93:14"},{"nodeType":"YulAssignment","src":"29154:19:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29165:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"29170:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29161:3:14"},"nodeType":"YulFunctionCall","src":"29161:12:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"29154:3:14"}]}]},"name":"abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"28947:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"28955:3:14","type":""}],"src":"28813:366:14"},{"body":{"nodeType":"YulBlock","src":"29356:248:14","statements":[{"nodeType":"YulAssignment","src":"29366:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29378:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"29389:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29374:3:14"},"nodeType":"YulFunctionCall","src":"29374:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29366:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29413:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"29424:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29409:3:14"},"nodeType":"YulFunctionCall","src":"29409:17:14"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29432:4:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"29438:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"29428:3:14"},"nodeType":"YulFunctionCall","src":"29428:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29402:6:14"},"nodeType":"YulFunctionCall","src":"29402:47:14"},"nodeType":"YulExpressionStatement","src":"29402:47:14"},{"nodeType":"YulAssignment","src":"29458:139:14","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29592:4:14"}],"functionName":{"name":"abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29466:124:14"},"nodeType":"YulFunctionCall","src":"29466:131:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29458:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29336:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29351:4:14","type":""}],"src":"29185:419:14"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approval to current owne\")\n\n        mstore(add(memPtr, 32), \"r\")\n\n    }\n\n    function abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve caller is not to\")\n\n        mstore(add(memPtr, 32), \"ken owner or approved for all\")\n\n    }\n\n    function abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 61)\n        store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: caller is not token owne\")\n\n        mstore(add(memPtr, 32), \"r or approved\")\n\n    }\n\n    function abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 45)\n        store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_1996ccb6adb7d105883c503be6c0fca8b239a35cc290cf1105e26098b6525e2f(memPtr) {\n\n        mstore(add(memPtr, 0), \"There is no majority approval to\")\n\n        mstore(add(memPtr, 32), \" withdraw\")\n\n    }\n\n    function abi_encode_t_stringliteral_1996ccb6adb7d105883c503be6c0fca8b239a35cc290cf1105e26098b6525e2f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n        store_literal_in_memory_1996ccb6adb7d105883c503be6c0fca8b239a35cc290cf1105e26098b6525e2f(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_1996ccb6adb7d105883c503be6c0fca8b239a35cc290cf1105e26098b6525e2f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1996ccb6adb7d105883c503be6c0fca8b239a35cc290cf1105e26098b6525e2f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(memPtr) {\n\n    }\n\n    function abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, 0)\n        store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(pos)\n        end := add(pos, 0)\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos ) -> end {\n\n        pos := abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: invalid token ID\")\n\n    }\n\n    function abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: address zero is not a va\")\n\n        mstore(add(memPtr, 32), \"lid owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n        store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(memPtr, 32), \"ddress\")\n\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer from incorrect \")\n\n        mstore(add(memPtr, 32), \"owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint256(product_raw)\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, div(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve to caller\")\n\n    }\n\n    function abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to non ERC721Re\")\n\n        mstore(add(memPtr, 32), \"ceiver implementer\")\n\n    }\n\n    function abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 50)\n        store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: mint to the zero address\")\n\n    }\n\n    function abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: token already minted\")\n\n    }\n\n    function abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 28)\n        store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":14,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"6080604052600436106101bb5760003560e01c8063715018a6116100ec578063c87b56dd1161008a578063db06941e11610064578063db06941e14610605578063e2c41dbc14610630578063e985e9c51461063a578063f2fde38b14610677576101c2565b8063c87b56dd14610560578063d7b4750c1461059d578063d8e159f8146105da576101c2565b806395d89b41116100c657806395d89b41146104b85780639c885eb3146104e3578063a22cb4651461050e578063b88d4fde14610537576101c2565b8063715018a61461044b5780637dc4c2ba146104625780638da5cb5b1461048d576101c2565b806323b872dd116101595780634e71d92d116101335780634e71d92d1461038f5780636352211e146103a657806365ac4341146103e357806370a082311461040e576101c2565b806323b872dd1461032657806324600fc31461034f57806342842e0e14610366576101c2565b8063081812fc11610195578063081812fc1461026c578063095ea7b3146102a95780631095941e146102d25780631096cb79146102fb576101c2565b806301ffc9a7146101c75780630343fb251461020457806306fdde0314610241576101c2565b366101c257005b600080fd5b3480156101d357600080fd5b506101ee60048036038101906101e991906120b1565b6106a0565b6040516101fb91906120f9565b60405180910390f35b34801561021057600080fd5b5061022b60048036038101906102269190612172565b610782565b60405161023891906121b8565b60405180910390f35b34801561024d57600080fd5b506102566107cb565b6040516102639190612263565b60405180910390f35b34801561027857600080fd5b50610293600480360381019061028e91906122b1565b61085d565b6040516102a091906122ed565b60405180910390f35b3480156102b557600080fd5b506102d060048036038101906102cb9190612308565b6108a3565b005b3480156102de57600080fd5b506102f960048036038101906102f491906122b1565b6109ba565b005b34801561030757600080fd5b50610310610a76565b60405161031d91906121b8565b60405180910390f35b34801561033257600080fd5b5061034d60048036038101906103489190612348565b610a80565b005b34801561035b57600080fd5b50610364610ae0565b005b34801561037257600080fd5b5061038d60048036038101906103889190612348565b610bf1565b005b34801561039b57600080fd5b506103a4610c11565b005b3480156103b257600080fd5b506103cd60048036038101906103c891906122b1565b610c13565b6040516103da91906122ed565b60405180910390f35b3480156103ef57600080fd5b506103f8610c99565b60405161040591906121b8565b60405180910390f35b34801561041a57600080fd5b5061043560048036038101906104309190612172565b610ca3565b60405161044291906121b8565b60405180910390f35b34801561045757600080fd5b50610460610d5a565b005b34801561046e57600080fd5b50610477610d6e565b60405161048491906120f9565b60405180910390f35b34801561049957600080fd5b506104a2610e10565b6040516104af91906122ed565b60405180910390f35b3480156104c457600080fd5b506104cd610e3a565b6040516104da9190612263565b60405180910390f35b3480156104ef57600080fd5b506104f8610ecc565b60405161050591906120f9565b60405180910390f35b34801561051a57600080fd5b50610535600480360381019061053091906123c7565b610ee3565b005b34801561054357600080fd5b5061055e6004803603810190610559919061253c565b610ef9565b005b34801561056c57600080fd5b50610587600480360381019061058291906122b1565b610f5b565b6040516105949190612263565b60405180910390f35b3480156105a957600080fd5b506105c460048036038101906105bf91906122b1565b610f62565b6040516105d191906122ed565b60405180910390f35b3480156105e657600080fd5b506105ef610faa565b6040516105fc91906121b8565b60405180910390f35b34801561061157600080fd5b5061061a610fb4565b60405161062791906121b8565b60405180910390f35b610638610fd2565b005b34801561064657600080fd5b50610661600480360381019061065c91906125bf565b6110e4565b60405161066e91906120f9565b60405180910390f35b34801561068357600080fd5b5061069e60048036038101906106999190612172565b611178565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061076b57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061077b575061077a826111fb565b5b9050919050565b6000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600080546107da9061262e565b80601f01602080910402602001604051908101604052809291908181526020018280546108069061262e565b80156108535780601f1061082857610100808354040283529160200191610853565b820191906000526020600020905b81548152906001019060200180831161083657829003601f168201915b5050505050905090565b600061086882611265565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006108ae82610c13565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361091e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610915906126d1565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661093d6112b0565b73ffffffffffffffffffffffffffffffffffffffff16148061096c575061096b816109666112b0565b6110e4565b5b6109ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a290612763565b60405180910390fd5b6109b583836112b8565b505050565b600c60009054906101000a900460ff16610a00576040517fad1faa7200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600f600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610a736008611371565b50565b6000600b54905090565b610a91610a8b6112b0565b82611387565b610ad0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac7906127f5565b60405180910390fd5b610adb83838361141c565b505050565b610ae8611715565b600c60009054906101000a900460ff1615610b4557610b05610d6e565b610b44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3b90612887565b60405180910390fd5b5b600047905060003373ffffffffffffffffffffffffffffffffffffffff1682604051610b70906128d8565b60006040518083038185875af1925050503d8060008114610bad576040519150601f19603f3d011682016040523d82523d6000602084013e610bb2565b606091505b5050905080610bed576040517f9af25e5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b610c0c83838360405180602001604052806000815250610ef9565b505050565b565b600080610c1f83611793565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8790612939565b60405180910390fd5b80915050919050565b6000600954905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0a906129cb565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610d62611715565b610d6c60006117d0565b565b6000600c60009054906101000a900460ff16610db6576040517fad1faa7200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610dc26008611896565b90506000610df26064610de4603c600e805490506118a490919063ffffffff16565b6118ba90919063ffffffff16565b9050808210610e0657600192505050610e0d565b6000925050505b90565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610e499061262e565b80601f0160208091040260200160405190810160405280929190818152602001828054610e759061262e565b8015610ec25780601f10610e9757610100808354040283529160200191610ec2565b820191906000526020600020905b815481529060010190602001808311610ea557829003601f168201915b5050505050905090565b6000600c60009054906101000a900460ff16905090565b610ef5610eee6112b0565b83836118d0565b5050565b610f0a610f046112b0565b83611387565b610f49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f40906127f5565b60405180910390fd5b610f5584848484611a3c565b50505050565b6060919050565b6000600e8281548110610f7857610f776129eb565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600a54905090565b6000610fcd600b546009546118ba90919063ffffffff16565b905090565b6000610fdc610fb4565b90506000610fea6007611896565b9050813411611025576040517fcf463cf900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600e339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506110d63382611a98565b6110e06007611371565b5050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611180611715565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036111ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e690612a8c565b60405180910390fd5b6111f8816117d0565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61126e81611ab6565b6112ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a490612939565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661132b83610c13565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6001816000016000828254019250508190555050565b60008061139383610c13565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806113d557506113d481856110e4565b5b8061141357508373ffffffffffffffffffffffffffffffffffffffff166113fb8461085d565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661143c82610c13565b73ffffffffffffffffffffffffffffffffffffffff1614611492576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148990612b1e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611501576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f890612bb0565b60405180910390fd5b61150e8383836001611af7565b8273ffffffffffffffffffffffffffffffffffffffff1661152e82610c13565b73ffffffffffffffffffffffffffffffffffffffff1614611584576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157b90612b1e565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46117108383836001611c1d565b505050565b61171d6112b0565b73ffffffffffffffffffffffffffffffffffffffff1661173b610e10565b73ffffffffffffffffffffffffffffffffffffffff1614611791576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178890612c1c565b60405180910390fd5b565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081600001549050919050565b600081836118b29190612c6b565b905092915050565b600081836118c89190612cdc565b905092915050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361193e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193590612d59565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611a2f91906120f9565b60405180910390a3505050565b611a4784848461141c565b611a5384848484611c23565b611a92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8990612deb565b60405180910390fd5b50505050565b611ab2828260405180602001604052806000815250611daa565b5050565b60008073ffffffffffffffffffffffffffffffffffffffff16611ad883611793565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6001811115611c1757600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611b8b5780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611b839190612e0b565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611c165780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c0e9190612e3f565b925050819055505b5b50505050565b50505050565b6000611c448473ffffffffffffffffffffffffffffffffffffffff16611e05565b15611d9d578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611c6d6112b0565b8786866040518563ffffffff1660e01b8152600401611c8f9493929190612ec8565b6020604051808303816000875af1925050508015611ccb57506040513d601f19601f82011682018060405250810190611cc89190612f29565b60015b611d4d573d8060008114611cfb576040519150601f19603f3d011682016040523d82523d6000602084013e611d00565b606091505b506000815103611d45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3c90612deb565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611da2565b600190505b949350505050565b611db48383611e28565b611dc16000848484611c23565b611e00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611df790612deb565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611e97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8e90612fa2565b60405180910390fd5b611ea081611ab6565b15611ee0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed79061300e565b60405180910390fd5b611eee600083836001611af7565b611ef781611ab6565b15611f37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f2e9061300e565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612041600083836001611c1d565b5050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61208e81612059565b811461209957600080fd5b50565b6000813590506120ab81612085565b92915050565b6000602082840312156120c7576120c661204f565b5b60006120d58482850161209c565b91505092915050565b60008115159050919050565b6120f3816120de565b82525050565b600060208201905061210e60008301846120ea565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061213f82612114565b9050919050565b61214f81612134565b811461215a57600080fd5b50565b60008135905061216c81612146565b92915050565b6000602082840312156121885761218761204f565b5b60006121968482850161215d565b91505092915050565b6000819050919050565b6121b28161219f565b82525050565b60006020820190506121cd60008301846121a9565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561220d5780820151818401526020810190506121f2565b60008484015250505050565b6000601f19601f8301169050919050565b6000612235826121d3565b61223f81856121de565b935061224f8185602086016121ef565b61225881612219565b840191505092915050565b6000602082019050818103600083015261227d818461222a565b905092915050565b61228e8161219f565b811461229957600080fd5b50565b6000813590506122ab81612285565b92915050565b6000602082840312156122c7576122c661204f565b5b60006122d58482850161229c565b91505092915050565b6122e781612134565b82525050565b600060208201905061230260008301846122de565b92915050565b6000806040838503121561231f5761231e61204f565b5b600061232d8582860161215d565b925050602061233e8582860161229c565b9150509250929050565b6000806000606084860312156123615761236061204f565b5b600061236f8682870161215d565b93505060206123808682870161215d565b92505060406123918682870161229c565b9150509250925092565b6123a4816120de565b81146123af57600080fd5b50565b6000813590506123c18161239b565b92915050565b600080604083850312156123de576123dd61204f565b5b60006123ec8582860161215d565b92505060206123fd858286016123b2565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61244982612219565b810181811067ffffffffffffffff8211171561246857612467612411565b5b80604052505050565b600061247b612045565b90506124878282612440565b919050565b600067ffffffffffffffff8211156124a7576124a6612411565b5b6124b082612219565b9050602081019050919050565b82818337600083830152505050565b60006124df6124da8461248c565b612471565b9050828152602081018484840111156124fb576124fa61240c565b5b6125068482856124bd565b509392505050565b600082601f83011261252357612522612407565b5b81356125338482602086016124cc565b91505092915050565b600080600080608085870312156125565761255561204f565b5b60006125648782880161215d565b94505060206125758782880161215d565b93505060406125868782880161229c565b925050606085013567ffffffffffffffff8111156125a7576125a6612054565b5b6125b38782880161250e565b91505092959194509250565b600080604083850312156125d6576125d561204f565b5b60006125e48582860161215d565b92505060206125f58582860161215d565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061264657607f821691505b602082108103612659576126586125ff565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006126bb6021836121de565b91506126c68261265f565b604082019050919050565b600060208201905081810360008301526126ea816126ae565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b600061274d603d836121de565b9150612758826126f1565b604082019050919050565b6000602082019050818103600083015261277c81612740565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b60006127df602d836121de565b91506127ea82612783565b604082019050919050565b6000602082019050818103600083015261280e816127d2565b9050919050565b7f5468657265206973206e6f206d616a6f7269747920617070726f76616c20746f60008201527f2077697468647261770000000000000000000000000000000000000000000000602082015250565b60006128716029836121de565b915061287c82612815565b604082019050919050565b600060208201905081810360008301526128a081612864565b9050919050565b600081905092915050565b50565b60006128c26000836128a7565b91506128cd826128b2565b600082019050919050565b60006128e3826128b5565b9150819050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006129236018836121de565b915061292e826128ed565b602082019050919050565b6000602082019050818103600083015261295281612916565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b60006129b56029836121de565b91506129c082612959565b604082019050919050565b600060208201905081810360008301526129e4816129a8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612a766026836121de565b9150612a8182612a1a565b604082019050919050565b60006020820190508181036000830152612aa581612a69565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612b086025836121de565b9150612b1382612aac565b604082019050919050565b60006020820190508181036000830152612b3781612afb565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612b9a6024836121de565b9150612ba582612b3e565b604082019050919050565b60006020820190508181036000830152612bc981612b8d565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612c066020836121de565b9150612c1182612bd0565b602082019050919050565b60006020820190508181036000830152612c3581612bf9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612c768261219f565b9150612c818361219f565b9250828202612c8f8161219f565b91508282048414831517612ca657612ca5612c3c565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612ce78261219f565b9150612cf28361219f565b925082612d0257612d01612cad565b5b828204905092915050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612d436019836121de565b9150612d4e82612d0d565b602082019050919050565b60006020820190508181036000830152612d7281612d36565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612dd56032836121de565b9150612de082612d79565b604082019050919050565b60006020820190508181036000830152612e0481612dc8565b9050919050565b6000612e168261219f565b9150612e218361219f565b9250828203905081811115612e3957612e38612c3c565b5b92915050565b6000612e4a8261219f565b9150612e558361219f565b9250828201905080821115612e6d57612e6c612c3c565b5b92915050565b600081519050919050565b600082825260208201905092915050565b6000612e9a82612e73565b612ea48185612e7e565b9350612eb48185602086016121ef565b612ebd81612219565b840191505092915050565b6000608082019050612edd60008301876122de565b612eea60208301866122de565b612ef760408301856121a9565b8181036060830152612f098184612e8f565b905095945050505050565b600081519050612f2381612085565b92915050565b600060208284031215612f3f57612f3e61204f565b5b6000612f4d84828501612f14565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000612f8c6020836121de565b9150612f9782612f56565b602082019050919050565b60006020820190508181036000830152612fbb81612f7f565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000612ff8601c836121de565b915061300382612fc2565b602082019050919050565b6000602082019050818103600083015261302781612feb565b905091905056fea26469706673582212202a11e1f0843a0bccf475f2b7a38cd188e8763b27256e41695c4fe7a6646ffdc864736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1BB JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xEC JUMPI DUP1 PUSH4 0xC87B56DD GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xDB06941E GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xDB06941E EQ PUSH2 0x605 JUMPI DUP1 PUSH4 0xE2C41DBC EQ PUSH2 0x630 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x63A JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x677 JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x560 JUMPI DUP1 PUSH4 0xD7B4750C EQ PUSH2 0x59D JUMPI DUP1 PUSH4 0xD8E159F8 EQ PUSH2 0x5DA JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x95D89B41 GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x4B8 JUMPI DUP1 PUSH4 0x9C885EB3 EQ PUSH2 0x4E3 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x50E JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x537 JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x44B JUMPI DUP1 PUSH4 0x7DC4C2BA EQ PUSH2 0x462 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x48D JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x159 JUMPI DUP1 PUSH4 0x4E71D92D GT PUSH2 0x133 JUMPI DUP1 PUSH4 0x4E71D92D EQ PUSH2 0x38F JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x3A6 JUMPI DUP1 PUSH4 0x65AC4341 EQ PUSH2 0x3E3 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x40E JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x23B872DD EQ PUSH2 0x326 JUMPI DUP1 PUSH4 0x24600FC3 EQ PUSH2 0x34F JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x366 JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x81812FC GT PUSH2 0x195 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x26C JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x2A9 JUMPI DUP1 PUSH4 0x1095941E EQ PUSH2 0x2D2 JUMPI DUP1 PUSH4 0x1096CB79 EQ PUSH2 0x2FB JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1C7 JUMPI DUP1 PUSH4 0x343FB25 EQ PUSH2 0x204 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x241 JUMPI PUSH2 0x1C2 JUMP JUMPDEST CALLDATASIZE PUSH2 0x1C2 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1E9 SWAP2 SWAP1 PUSH2 0x20B1 JUMP JUMPDEST PUSH2 0x6A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0x20F9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x210 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x226 SWAP2 SWAP1 PUSH2 0x2172 JUMP JUMPDEST PUSH2 0x782 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x238 SWAP2 SWAP1 PUSH2 0x21B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x256 PUSH2 0x7CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x263 SWAP2 SWAP1 PUSH2 0x2263 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x278 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x293 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x28E SWAP2 SWAP1 PUSH2 0x22B1 JUMP JUMPDEST PUSH2 0x85D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A0 SWAP2 SWAP1 PUSH2 0x22ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2CB SWAP2 SWAP1 PUSH2 0x2308 JUMP JUMPDEST PUSH2 0x8A3 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2F4 SWAP2 SWAP1 PUSH2 0x22B1 JUMP JUMPDEST PUSH2 0x9BA JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x307 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x310 PUSH2 0xA76 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x31D SWAP2 SWAP1 PUSH2 0x21B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x332 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x34D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x348 SWAP2 SWAP1 PUSH2 0x2348 JUMP JUMPDEST PUSH2 0xA80 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x35B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x364 PUSH2 0xAE0 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x372 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x38D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x388 SWAP2 SWAP1 PUSH2 0x2348 JUMP JUMPDEST PUSH2 0xBF1 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3A4 PUSH2 0xC11 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3CD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3C8 SWAP2 SWAP1 PUSH2 0x22B1 JUMP JUMPDEST PUSH2 0xC13 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3DA SWAP2 SWAP1 PUSH2 0x22ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F8 PUSH2 0xC99 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x405 SWAP2 SWAP1 PUSH2 0x21B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x41A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x435 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x430 SWAP2 SWAP1 PUSH2 0x2172 JUMP JUMPDEST PUSH2 0xCA3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x442 SWAP2 SWAP1 PUSH2 0x21B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x457 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x460 PUSH2 0xD5A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x46E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x477 PUSH2 0xD6E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x484 SWAP2 SWAP1 PUSH2 0x20F9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x499 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A2 PUSH2 0xE10 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4AF SWAP2 SWAP1 PUSH2 0x22ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4CD PUSH2 0xE3A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4DA SWAP2 SWAP1 PUSH2 0x2263 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4F8 PUSH2 0xECC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x505 SWAP2 SWAP1 PUSH2 0x20F9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x51A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x535 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x530 SWAP2 SWAP1 PUSH2 0x23C7 JUMP JUMPDEST PUSH2 0xEE3 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x543 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x55E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x559 SWAP2 SWAP1 PUSH2 0x253C JUMP JUMPDEST PUSH2 0xEF9 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x56C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x587 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x582 SWAP2 SWAP1 PUSH2 0x22B1 JUMP JUMPDEST PUSH2 0xF5B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x594 SWAP2 SWAP1 PUSH2 0x2263 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5BF SWAP2 SWAP1 PUSH2 0x22B1 JUMP JUMPDEST PUSH2 0xF62 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5D1 SWAP2 SWAP1 PUSH2 0x22ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5EF PUSH2 0xFAA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5FC SWAP2 SWAP1 PUSH2 0x21B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x611 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x61A PUSH2 0xFB4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x627 SWAP2 SWAP1 PUSH2 0x21B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x638 PUSH2 0xFD2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x646 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x661 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x65C SWAP2 SWAP1 PUSH2 0x25BF JUMP JUMPDEST PUSH2 0x10E4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x66E SWAP2 SWAP1 PUSH2 0x20F9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x683 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x69E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x699 SWAP2 SWAP1 PUSH2 0x2172 JUMP JUMPDEST PUSH2 0x1178 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x76B JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x77B JUMPI POP PUSH2 0x77A DUP3 PUSH2 0x11FB JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x7DA SWAP1 PUSH2 0x262E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x806 SWAP1 PUSH2 0x262E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x853 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x828 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x853 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x836 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x868 DUP3 PUSH2 0x1265 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8AE DUP3 PUSH2 0xC13 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x91E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x915 SWAP1 PUSH2 0x26D1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x93D PUSH2 0x12B0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x96C JUMPI POP PUSH2 0x96B DUP2 PUSH2 0x966 PUSH2 0x12B0 JUMP JUMPDEST PUSH2 0x10E4 JUMP JUMPDEST JUMPDEST PUSH2 0x9AB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9A2 SWAP1 PUSH2 0x2763 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9B5 DUP4 DUP4 PUSH2 0x12B8 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0xC PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xA00 JUMPI PUSH1 0x40 MLOAD PUSH32 0xAD1FAA7200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xF PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0xA73 PUSH1 0x8 PUSH2 0x1371 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xB SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xA91 PUSH2 0xA8B PUSH2 0x12B0 JUMP JUMPDEST DUP3 PUSH2 0x1387 JUMP JUMPDEST PUSH2 0xAD0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAC7 SWAP1 PUSH2 0x27F5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xADB DUP4 DUP4 DUP4 PUSH2 0x141C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0xAE8 PUSH2 0x1715 JUMP JUMPDEST PUSH1 0xC PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xB45 JUMPI PUSH2 0xB05 PUSH2 0xD6E JUMP JUMPDEST PUSH2 0xB44 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB3B SWAP1 PUSH2 0x2887 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST PUSH1 0x0 SELFBALANCE SWAP1 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH2 0xB70 SWAP1 PUSH2 0x28D8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xBAD JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xBB2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xBED JUMPI PUSH1 0x40 MLOAD PUSH32 0x9AF25E5D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xC0C DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xEF9 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xC1F DUP4 PUSH2 0x1793 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xC90 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC87 SWAP1 PUSH2 0x2939 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xD13 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD0A SWAP1 PUSH2 0x29CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD62 PUSH2 0x1715 JUMP JUMPDEST PUSH2 0xD6C PUSH1 0x0 PUSH2 0x17D0 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xDB6 JUMPI PUSH1 0x40 MLOAD PUSH32 0xAD1FAA7200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xDC2 PUSH1 0x8 PUSH2 0x1896 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xDF2 PUSH1 0x64 PUSH2 0xDE4 PUSH1 0x3C PUSH1 0xE DUP1 SLOAD SWAP1 POP PUSH2 0x18A4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x18BA SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 DUP3 LT PUSH2 0xE06 JUMPI PUSH1 0x1 SWAP3 POP POP POP PUSH2 0xE0D JUMP JUMPDEST PUSH1 0x0 SWAP3 POP POP POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0xE49 SWAP1 PUSH2 0x262E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xE75 SWAP1 PUSH2 0x262E JUMP JUMPDEST DUP1 ISZERO PUSH2 0xEC2 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xE97 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xEC2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xEA5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xEF5 PUSH2 0xEEE PUSH2 0x12B0 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x18D0 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xF0A PUSH2 0xF04 PUSH2 0x12B0 JUMP JUMPDEST DUP4 PUSH2 0x1387 JUMP JUMPDEST PUSH2 0xF49 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF40 SWAP1 PUSH2 0x27F5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF55 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1A3C JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xF78 JUMPI PUSH2 0xF77 PUSH2 0x29EB JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFCD PUSH1 0xB SLOAD PUSH1 0x9 SLOAD PUSH2 0x18BA SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFDC PUSH2 0xFB4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xFEA PUSH1 0x7 PUSH2 0x1896 JUMP JUMPDEST SWAP1 POP DUP2 CALLVALUE GT PUSH2 0x1025 JUMPI PUSH1 0x40 MLOAD PUSH32 0xCF463CF900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLVALUE PUSH1 0xD PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0xE CALLER SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x10D6 CALLER DUP3 PUSH2 0x1A98 JUMP JUMPDEST PUSH2 0x10E0 PUSH1 0x7 PUSH2 0x1371 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1180 PUSH2 0x1715 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x11EF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11E6 SWAP1 PUSH2 0x2A8C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x11F8 DUP2 PUSH2 0x17D0 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x126E DUP2 PUSH2 0x1AB6 JUMP JUMPDEST PUSH2 0x12AD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A4 SWAP1 PUSH2 0x2939 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x132B DUP4 PUSH2 0xC13 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1393 DUP4 PUSH2 0xC13 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x13D5 JUMPI POP PUSH2 0x13D4 DUP2 DUP6 PUSH2 0x10E4 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x1413 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x13FB DUP5 PUSH2 0x85D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x143C DUP3 PUSH2 0xC13 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1492 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1489 SWAP1 PUSH2 0x2B1E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1501 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F8 SWAP1 PUSH2 0x2BB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x150E DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1AF7 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x152E DUP3 PUSH2 0xC13 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1584 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x157B SWAP1 PUSH2 0x2B1E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1710 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1C1D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x171D PUSH2 0x12B0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x173B PUSH2 0xE10 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1791 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1788 SWAP1 PUSH2 0x2C1C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x6 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x18B2 SWAP2 SWAP1 PUSH2 0x2C6B JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x18C8 SWAP2 SWAP1 PUSH2 0x2CDC JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x193E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1935 SWAP1 PUSH2 0x2D59 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1A2F SWAP2 SWAP1 PUSH2 0x20F9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1A47 DUP5 DUP5 DUP5 PUSH2 0x141C JUMP JUMPDEST PUSH2 0x1A53 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1C23 JUMP JUMPDEST PUSH2 0x1A92 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A89 SWAP1 PUSH2 0x2DEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x1AB2 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1DAA JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1AD8 DUP4 PUSH2 0x1793 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1C17 JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1B8B JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1B83 SWAP2 SWAP1 PUSH2 0x2E0B JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1C16 JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1C0E SWAP2 SWAP1 PUSH2 0x2E3F JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C44 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1E05 JUMP JUMPDEST ISZERO PUSH2 0x1D9D JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1C6D PUSH2 0x12B0 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C8F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2EC8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1CCB JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1CC8 SWAP2 SWAP1 PUSH2 0x2F29 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1D4D JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1CFB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1D00 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x1D45 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D3C SWAP1 PUSH2 0x2DEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x1DA2 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1DB4 DUP4 DUP4 PUSH2 0x1E28 JUMP JUMPDEST PUSH2 0x1DC1 PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x1C23 JUMP JUMPDEST PUSH2 0x1E00 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DF7 SWAP1 PUSH2 0x2DEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1E97 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E8E SWAP1 PUSH2 0x2FA2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1EA0 DUP2 PUSH2 0x1AB6 JUMP JUMPDEST ISZERO PUSH2 0x1EE0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1ED7 SWAP1 PUSH2 0x300E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1EEE PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1AF7 JUMP JUMPDEST PUSH2 0x1EF7 DUP2 PUSH2 0x1AB6 JUMP JUMPDEST ISZERO PUSH2 0x1F37 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F2E SWAP1 PUSH2 0x300E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x2041 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1C1D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x208E DUP2 PUSH2 0x2059 JUMP JUMPDEST DUP2 EQ PUSH2 0x2099 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x20AB DUP2 PUSH2 0x2085 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x20C7 JUMPI PUSH2 0x20C6 PUSH2 0x204F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x20D5 DUP5 DUP3 DUP6 ADD PUSH2 0x209C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x20F3 DUP2 PUSH2 0x20DE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x210E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x20EA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x213F DUP3 PUSH2 0x2114 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x214F DUP2 PUSH2 0x2134 JUMP JUMPDEST DUP2 EQ PUSH2 0x215A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x216C DUP2 PUSH2 0x2146 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2188 JUMPI PUSH2 0x2187 PUSH2 0x204F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2196 DUP5 DUP3 DUP6 ADD PUSH2 0x215D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x21B2 DUP2 PUSH2 0x219F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x21CD PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x21A9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x220D JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x21F2 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2235 DUP3 PUSH2 0x21D3 JUMP JUMPDEST PUSH2 0x223F DUP2 DUP6 PUSH2 0x21DE JUMP JUMPDEST SWAP4 POP PUSH2 0x224F DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x21EF JUMP JUMPDEST PUSH2 0x2258 DUP2 PUSH2 0x2219 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x227D DUP2 DUP5 PUSH2 0x222A JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x228E DUP2 PUSH2 0x219F JUMP JUMPDEST DUP2 EQ PUSH2 0x2299 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x22AB DUP2 PUSH2 0x2285 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x22C7 JUMPI PUSH2 0x22C6 PUSH2 0x204F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x22D5 DUP5 DUP3 DUP6 ADD PUSH2 0x229C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x22E7 DUP2 PUSH2 0x2134 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2302 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x22DE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x231F JUMPI PUSH2 0x231E PUSH2 0x204F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x232D DUP6 DUP3 DUP7 ADD PUSH2 0x215D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x233E DUP6 DUP3 DUP7 ADD PUSH2 0x229C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2361 JUMPI PUSH2 0x2360 PUSH2 0x204F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x236F DUP7 DUP3 DUP8 ADD PUSH2 0x215D JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2380 DUP7 DUP3 DUP8 ADD PUSH2 0x215D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x2391 DUP7 DUP3 DUP8 ADD PUSH2 0x229C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x23A4 DUP2 PUSH2 0x20DE JUMP JUMPDEST DUP2 EQ PUSH2 0x23AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x23C1 DUP2 PUSH2 0x239B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x23DE JUMPI PUSH2 0x23DD PUSH2 0x204F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x23EC DUP6 DUP3 DUP7 ADD PUSH2 0x215D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x23FD DUP6 DUP3 DUP7 ADD PUSH2 0x23B2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x2449 DUP3 PUSH2 0x2219 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x2468 JUMPI PUSH2 0x2467 PUSH2 0x2411 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x247B PUSH2 0x2045 JUMP JUMPDEST SWAP1 POP PUSH2 0x2487 DUP3 DUP3 PUSH2 0x2440 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x24A7 JUMPI PUSH2 0x24A6 PUSH2 0x2411 JUMP JUMPDEST JUMPDEST PUSH2 0x24B0 DUP3 PUSH2 0x2219 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x24DF PUSH2 0x24DA DUP5 PUSH2 0x248C JUMP JUMPDEST PUSH2 0x2471 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x24FB JUMPI PUSH2 0x24FA PUSH2 0x240C JUMP JUMPDEST JUMPDEST PUSH2 0x2506 DUP5 DUP3 DUP6 PUSH2 0x24BD JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2523 JUMPI PUSH2 0x2522 PUSH2 0x2407 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2533 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x24CC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2556 JUMPI PUSH2 0x2555 PUSH2 0x204F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2564 DUP8 DUP3 DUP9 ADD PUSH2 0x215D JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x2575 DUP8 DUP3 DUP9 ADD PUSH2 0x215D JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x2586 DUP8 DUP3 DUP9 ADD PUSH2 0x229C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x25A7 JUMPI PUSH2 0x25A6 PUSH2 0x2054 JUMP JUMPDEST JUMPDEST PUSH2 0x25B3 DUP8 DUP3 DUP9 ADD PUSH2 0x250E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x25D6 JUMPI PUSH2 0x25D5 PUSH2 0x204F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x25E4 DUP6 DUP3 DUP7 ADD PUSH2 0x215D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x25F5 DUP6 DUP3 DUP7 ADD PUSH2 0x215D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2646 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2659 JUMPI PUSH2 0x2658 PUSH2 0x25FF JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26BB PUSH1 0x21 DUP4 PUSH2 0x21DE JUMP JUMPDEST SWAP2 POP PUSH2 0x26C6 DUP3 PUSH2 0x265F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x26EA DUP2 PUSH2 0x26AE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x274D PUSH1 0x3D DUP4 PUSH2 0x21DE JUMP JUMPDEST SWAP2 POP PUSH2 0x2758 DUP3 PUSH2 0x26F1 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x277C DUP2 PUSH2 0x2740 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27DF PUSH1 0x2D DUP4 PUSH2 0x21DE JUMP JUMPDEST SWAP2 POP PUSH2 0x27EA DUP3 PUSH2 0x2783 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x280E DUP2 PUSH2 0x27D2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5468657265206973206E6F206D616A6F7269747920617070726F76616C20746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x2077697468647261770000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2871 PUSH1 0x29 DUP4 PUSH2 0x21DE JUMP JUMPDEST SWAP2 POP PUSH2 0x287C DUP3 PUSH2 0x2815 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x28A0 DUP2 PUSH2 0x2864 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28C2 PUSH1 0x0 DUP4 PUSH2 0x28A7 JUMP JUMPDEST SWAP2 POP PUSH2 0x28CD DUP3 PUSH2 0x28B2 JUMP JUMPDEST PUSH1 0x0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28E3 DUP3 PUSH2 0x28B5 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2923 PUSH1 0x18 DUP4 PUSH2 0x21DE JUMP JUMPDEST SWAP2 POP PUSH2 0x292E DUP3 PUSH2 0x28ED JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2952 DUP2 PUSH2 0x2916 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29B5 PUSH1 0x29 DUP4 PUSH2 0x21DE JUMP JUMPDEST SWAP2 POP PUSH2 0x29C0 DUP3 PUSH2 0x2959 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x29E4 DUP2 PUSH2 0x29A8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A76 PUSH1 0x26 DUP4 PUSH2 0x21DE JUMP JUMPDEST SWAP2 POP PUSH2 0x2A81 DUP3 PUSH2 0x2A1A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2AA5 DUP2 PUSH2 0x2A69 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B08 PUSH1 0x25 DUP4 PUSH2 0x21DE JUMP JUMPDEST SWAP2 POP PUSH2 0x2B13 DUP3 PUSH2 0x2AAC JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B37 DUP2 PUSH2 0x2AFB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B9A PUSH1 0x24 DUP4 PUSH2 0x21DE JUMP JUMPDEST SWAP2 POP PUSH2 0x2BA5 DUP3 PUSH2 0x2B3E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2BC9 DUP2 PUSH2 0x2B8D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C06 PUSH1 0x20 DUP4 PUSH2 0x21DE JUMP JUMPDEST SWAP2 POP PUSH2 0x2C11 DUP3 PUSH2 0x2BD0 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C35 DUP2 PUSH2 0x2BF9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2C76 DUP3 PUSH2 0x219F JUMP JUMPDEST SWAP2 POP PUSH2 0x2C81 DUP4 PUSH2 0x219F JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x2C8F DUP2 PUSH2 0x219F JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x2CA6 JUMPI PUSH2 0x2CA5 PUSH2 0x2C3C JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2CE7 DUP3 PUSH2 0x219F JUMP JUMPDEST SWAP2 POP PUSH2 0x2CF2 DUP4 PUSH2 0x219F JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x2D02 JUMPI PUSH2 0x2D01 PUSH2 0x2CAD JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D43 PUSH1 0x19 DUP4 PUSH2 0x21DE JUMP JUMPDEST SWAP2 POP PUSH2 0x2D4E DUP3 PUSH2 0x2D0D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2D72 DUP2 PUSH2 0x2D36 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DD5 PUSH1 0x32 DUP4 PUSH2 0x21DE JUMP JUMPDEST SWAP2 POP PUSH2 0x2DE0 DUP3 PUSH2 0x2D79 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E04 DUP2 PUSH2 0x2DC8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E16 DUP3 PUSH2 0x219F JUMP JUMPDEST SWAP2 POP PUSH2 0x2E21 DUP4 PUSH2 0x219F JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x2E39 JUMPI PUSH2 0x2E38 PUSH2 0x2C3C JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E4A DUP3 PUSH2 0x219F JUMP JUMPDEST SWAP2 POP PUSH2 0x2E55 DUP4 PUSH2 0x219F JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x2E6D JUMPI PUSH2 0x2E6C PUSH2 0x2C3C JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E9A DUP3 PUSH2 0x2E73 JUMP JUMPDEST PUSH2 0x2EA4 DUP2 DUP6 PUSH2 0x2E7E JUMP JUMPDEST SWAP4 POP PUSH2 0x2EB4 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x21EF JUMP JUMPDEST PUSH2 0x2EBD DUP2 PUSH2 0x2219 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2EDD PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x22DE JUMP JUMPDEST PUSH2 0x2EEA PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x22DE JUMP JUMPDEST PUSH2 0x2EF7 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x21A9 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2F09 DUP2 DUP5 PUSH2 0x2E8F JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2F23 DUP2 PUSH2 0x2085 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2F3F JUMPI PUSH2 0x2F3E PUSH2 0x204F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2F4D DUP5 DUP3 DUP6 ADD PUSH2 0x2F14 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F8C PUSH1 0x20 DUP4 PUSH2 0x21DE JUMP JUMPDEST SWAP2 POP PUSH2 0x2F97 DUP3 PUSH2 0x2F56 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2FBB DUP2 PUSH2 0x2F7F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FF8 PUSH1 0x1C DUP4 PUSH2 0x21DE JUMP JUMPDEST SWAP2 POP PUSH2 0x3003 DUP3 PUSH2 0x2FC2 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3027 DUP2 PUSH2 0x2FEB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2A GT 0xE1 CREATE DUP5 GASPRICE SIGNEXTEND 0xCC DELEGATECALL PUSH22 0xF2B7A38CD188E8763B27256E41695C4FE7A6646FFDC8 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"403:3519:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1570:300:1;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3676:133:13;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2471:98:1;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3935:167;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3468:406;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2180:172:13;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3470:95;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4612:326:1;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2758:380:13;;;;;;;;;;;;;:::i;:::-;;5004:179:1;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2091:83:13;;;;;;;;;;;;;:::i;:::-;;2190:219:1;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3271:91:13;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1929:204:1;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1831:101:0;;;;;;;;;;;;;:::i;:::-;;2439:311:13;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1201:85:0;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2633:102:1;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3571:99:13;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4169:153:1;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5249:314;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1937:148:13;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3815:102;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3369:95;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3144:121;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1474:457;;;:::i;:::-;;4388:162:1;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2081:198:0;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1570:300:1;1672:4;1722:25;1707:40;;;:11;:40;;;;:104;;;;1778:33;1763:48;;;:11;:48;;;;1707:104;:156;;;;1827:36;1851:11;1827:23;:36::i;:::-;1707:156;1688:175;;1570:300;;;:::o;3676:133:13:-;3746:7;3771:23;:31;3795:6;3771:31;;;;;;;;;;;;;;;;3764:38;;3676:133;;;:::o;2471:98:1:-;2525:13;2557:5;2550:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:98;:::o;3935:167::-;4011:7;4030:23;4045:7;4030:14;:23::i;:::-;4071:15;:24;4087:7;4071:24;;;;;;;;;;;;;;;;;;;;;4064:31;;3935:167;;;:::o;3468:406::-;3548:13;3564:23;3579:7;3564:14;:23::i;:::-;3548:39;;3611:5;3605:11;;:2;:11;;;3597:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;3702:5;3686:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;3711:37;3728:5;3735:12;:10;:12::i;:::-;3711:16;:37::i;:::-;3686:62;3665:170;;;;;;;;;;;;:::i;:::-;;;;;;;;;3846:21;3855:2;3859:7;3846:8;:21::i;:::-;3538:336;3468:406;;:::o;2180:172:13:-;980:18;;;;;;;;;;;976:89;;1020:34;;;;;;;;;;;;;;976:89;2307:4:::1;2261:22;:31;2284:7;2261:31;;;;;;;;;;;:43;2293:10;2261:43;;;;;;;;;;;;;;;;:50;;;;;;;;;;;;;;;;;;2321:24;:12;:22;:24::i;:::-;2180:172:::0;:::o;3470:95::-;3518:7;3543:15;;3536:22;;3470:95;:::o;4612:326:1:-;4801:41;4820:12;:10;:12::i;:::-;4834:7;4801:18;:41::i;:::-;4793:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;4903:28;4913:4;4919:2;4923:7;4903:9;:28::i;:::-;4612:326;;;:::o;2758:380:13:-;1094:13:0;:11;:13::i;:::-;2812:18:13::1;;;;;;;;;;;2809:118;;;2853:17;:15;:17::i;:::-;2845:71;;;;;;;;;;;;:::i;:::-;;;;;;;;;2809:118;2936:14;2953:21;2936:38;;2985:12;3011:10;3003:24;;3034:6;3003:42;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2984:61;;;3059:7;3055:77;;3088:33;;;;;;;;;;;;;;3055:77;2799:339;;2758:380::o:0;5004:179:1:-;5137:39;5154:4;5160:2;5164:7;5137:39;;;;;;;;;;;;:16;:39::i;:::-;5004:179;;;:::o;2091:83:13:-;:::o;2190:219:1:-;2262:7;2281:13;2297:17;2306:7;2297:8;:17::i;:::-;2281:33;;2349:1;2332:19;;:5;:19;;;2324:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;2397:5;2390:12;;;2190:219;;;:::o;3271:91:13:-;3317:7;3342:13;;3335:20;;3271:91;:::o;1929:204:1:-;2001:7;2045:1;2028:19;;:5;:19;;;2020:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2110:9;:16;2120:5;2110:16;;;;;;;;;;;;;;;;2103:23;;1929:204;;;:::o;1831:101:0:-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;:::-;1831:101::o:0;2439:311:13:-;2498:4;980:18;;;;;;;;;;;976:89;;1020:34;;;;;;;;;;;;;;976:89;2513:27:::1;2543:22;:12;:20;:22::i;:::-;2513:52;;2575:23;2601:33;2630:3;2601:24;2622:2;2601:9;:16;;;;:20;;:24;;;;:::i;:::-;:28;;:33;;;;:::i;:::-;2575:59;;2670:15;2647:19;:38;2644:78;;2707:4;2700:11;;;;;;2644:78;2738:5;2731:12;;;;1073:1;2439:311:::0;:::o;1201:85:0:-;1247:7;1273:6;;;;;;;;;;;1266:13;;1201:85;:::o;2633:102:1:-;2689:13;2721:7;2714:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2633:102;:::o;3571:99:13:-;3623:4;3645:18;;;;;;;;;;;3638:25;;3571:99;:::o;4169:153:1:-;4263:52;4282:12;:10;:12::i;:::-;4296:8;4306;4263:18;:52::i;:::-;4169:153;;:::o;5249:314::-;5417:41;5436:12;:10;:12::i;:::-;5450:7;5417:18;:41::i;:::-;5409:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;5518:38;5532:4;5538:2;5542:7;5551:4;5518:13;:38::i;:::-;5249:314;;;;:::o;1937:148:13:-;2010:13;1937:148;;;:::o;3815:102::-;3869:7;3894:9;3904:5;3894:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3887:23;;3815:102;;;:::o;3369:95::-;3417:7;3442:15;;3435:22;;3369:95;:::o;3144:121::-;3199:7;3224:34;3242:15;;3224:13;;:17;;:34;;;;:::i;:::-;3217:41;;3144:121;:::o;1474:457::-;1531:24;1558:25;:23;:25::i;:::-;1531:52;;1593:22;1618:19;:9;:17;:19::i;:::-;1593:44;;1664:16;1651:9;:29;1648:96;;1702:31;;;;;;;;;;;;;;1648:96;1791:9;1753:23;:35;1777:10;1753:35;;;;;;;;;;;;;;;:47;;;;1810:9;1825:10;1810:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1846:37;1856:10;1868:14;1846:9;:37::i;:::-;1893:21;:9;:19;:21::i;:::-;1512:419;;1474:457::o;4388:162:1:-;4485:4;4508:18;:25;4527:5;4508:25;;;;;;;;;;;;;;;:35;4534:8;4508:35;;;;;;;;;;;;;;;;;;;;;;;;;4501:42;;4388:162;;;;:::o;2081:198:0:-;1094:13;:11;:13::i;:::-;2189:1:::1;2169:22;;:8;:22;;::::0;2161:73:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;2244:28;2263:8;2244:18;:28::i;:::-;2081:198:::0;:::o;829:155:9:-;914:4;952:25;937:40;;;:11;:40;;;;930:47;;829:155;;;:::o;13466:133:1:-;13547:16;13555:7;13547;:16::i;:::-;13539:53;;;;;;;;;;;;:::i;:::-;;;;;;;;;13466:133;:::o;640:96:6:-;693:7;719:10;712:17;;640:96;:::o;12768:171:1:-;12869:2;12842:15;:24;12858:7;12842:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;12924:7;12920:2;12886:46;;12895:23;12910:7;12895:14;:23::i;:::-;12886:46;;;;;;;;;;;;12768:171;;:::o;945:123:7:-;1050:1;1032:7;:14;;;:19;;;;;;;;;;;945:123;:::o;7540:261:1:-;7633:4;7649:13;7665:23;7680:7;7665:14;:23::i;:::-;7649:39;;7717:5;7706:16;;:7;:16;;;:52;;;;7726:32;7743:5;7750:7;7726:16;:32::i;:::-;7706:52;:87;;;;7786:7;7762:31;;:20;7774:7;7762:11;:20::i;:::-;:31;;;7706:87;7698:96;;;7540:261;;;;:::o;11423:1233::-;11577:4;11550:31;;:23;11565:7;11550:14;:23::i;:::-;:31;;;11542:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11655:1;11641:16;;:2;:16;;;11633:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;11709:42;11730:4;11736:2;11740:7;11749:1;11709:20;:42::i;:::-;11878:4;11851:31;;:23;11866:7;11851:14;:23::i;:::-;:31;;;11843:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11993:15;:24;12009:7;11993:24;;;;;;;;;;;;11986:31;;;;;;;;;;;12480:1;12461:9;:15;12471:4;12461:15;;;;;;;;;;;;;;;;:20;;;;;;;;;;;12512:1;12495:9;:13;12505:2;12495:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;12552:2;12533:7;:16;12541:7;12533:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;12589:7;12585:2;12570:27;;12579:4;12570:27;;;;;;;;;;;;12608:41;12628:4;12634:2;12638:7;12647:1;12608:19;:41::i;:::-;11423:1233;;;:::o;1359:130:0:-;1433:12;:10;:12::i;:::-;1422:23;;:7;:5;:7::i;:::-;:23;;;1414:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1359:130::o;6838:115:1:-;6904:7;6930;:16;6938:7;6930:16;;;;;;;;;;;;;;;;;;;;;6923:23;;6838:115;;;:::o;2433:187:0:-;2506:16;2525:6;;;;;;;;;;;2506:25;;2550:8;2541:6;;:17;;;;;;;;;;;;;;;;;;2604:8;2573:40;;2594:8;2573:40;;;;;;;;;;;;2496:124;2433:187;:::o;827:112:7:-;892:7;918;:14;;;911:21;;827:112;;;:::o;3465:96:12:-;3523:7;3553:1;3549;:5;;;;:::i;:::-;3542:12;;3465:96;;;;:::o;3850:::-;3908:7;3938:1;3934;:5;;;;:::i;:::-;3927:12;;3850:96;;;;:::o;13075:307:1:-;13225:8;13216:17;;:5;:17;;;13208:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;13311:8;13273:18;:25;13292:5;13273:25;;;;;;;;;;;;;;;:35;13299:8;13273:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;13356:8;13334:41;;13349:5;13334:41;;;13366:8;13334:41;;;;;;:::i;:::-;;;;;;;;13075:307;;;:::o;6424:305::-;6574:28;6584:4;6590:2;6594:7;6574:9;:28::i;:::-;6620:47;6643:4;6649:2;6653:7;6662:4;6620:22;:47::i;:::-;6612:110;;;;;;;;;;;;:::i;:::-;;;;;;;;;6424:305;;;;:::o;8131:108::-;8206:26;8216:2;8220:7;8206:26;;;;;;;;;;;;:9;:26::i;:::-;8131:108;;:::o;7256:126::-;7321:4;7373:1;7344:31;;:17;7353:7;7344:8;:17::i;:::-;:31;;;;7337:38;;7256:126;;;:::o;15698:396::-;15882:1;15870:9;:13;15866:222;;;15919:1;15903:18;;:4;:18;;;15899:85;;15960:9;15941;:15;15951:4;15941:15;;;;;;;;;;;;;;;;:28;;;;;;;:::i;:::-;;;;;;;;15899:85;16015:1;16001:16;;:2;:16;;;15997:81;;16054:9;16037;:13;16047:2;16037:13;;;;;;;;;;;;;;;;:26;;;;;;;:::i;:::-;;;;;;;;15997:81;15866:222;15698:396;;;;:::o;16800:153::-;;;;;:::o;14151:831::-;14300:4;14320:15;:2;:13;;;:15::i;:::-;14316:660;;;14371:2;14355:36;;;14392:12;:10;:12::i;:::-;14406:4;14412:7;14421:4;14355:71;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;14351:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14610:1;14593:6;:13;:18;14589:321;;14635:60;;;;;;;;;;:::i;:::-;;;;;;;;14589:321;14862:6;14856:13;14847:6;14843:2;14839:15;14832:38;14351:573;14486:41;;;14476:51;;;:6;:51;;;;14469:58;;;;;14316:660;14961:4;14954:11;;14151:831;;;;;;;:::o;8460:309::-;8584:18;8590:2;8594:7;8584:5;:18::i;:::-;8633:53;8664:1;8668:2;8672:7;8681:4;8633:22;:53::i;:::-;8612:150;;;;;;;;;;;;:::i;:::-;;;;;;;;;8460:309;;;:::o;1175:320:5:-;1235:4;1487:1;1465:7;:19;;;:23;1458:30;;1175:320;;;:::o;9091:920:1:-;9184:1;9170:16;;:2;:16;;;9162:61;;;;;;;;;;;;:::i;:::-;;;;;;;;;9242:16;9250:7;9242;:16::i;:::-;9241:17;9233:58;;;;;;;;;;;;:::i;:::-;;;;;;;;;9302:48;9331:1;9335:2;9339:7;9348:1;9302:20;:48::i;:::-;9446:16;9454:7;9446;:16::i;:::-;9445:17;9437:58;;;;;;;;;;;;:::i;:::-;;;;;;;;;9854:1;9837:9;:13;9847:2;9837:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;9895:2;9876:7;:16;9884:7;9876:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;9938:7;9934:2;9913:33;;9930:1;9913:33;;;;;;;;;;;;9957:47;9985:1;9989:2;9993:7;10002:1;9957:19;:47::i;:::-;9091:920;;:::o;7:75:14:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:126::-;1555:7;1595:42;1588:5;1584:54;1573:65;;1518:126;;;:::o;1650:96::-;1687:7;1716:24;1734:5;1716:24;:::i;:::-;1705:35;;1650:96;;;:::o;1752:122::-;1825:24;1843:5;1825:24;:::i;:::-;1818:5;1815:35;1805:63;;1864:1;1861;1854:12;1805:63;1752:122;:::o;1880:139::-;1926:5;1964:6;1951:20;1942:29;;1980:33;2007:5;1980:33;:::i;:::-;1880:139;;;;:::o;2025:329::-;2084:6;2133:2;2121:9;2112:7;2108:23;2104:32;2101:119;;;2139:79;;:::i;:::-;2101:119;2259:1;2284:53;2329:7;2320:6;2309:9;2305:22;2284:53;:::i;:::-;2274:63;;2230:117;2025:329;;;;:::o;2360:77::-;2397:7;2426:5;2415:16;;2360:77;;;:::o;2443:118::-;2530:24;2548:5;2530:24;:::i;:::-;2525:3;2518:37;2443:118;;:::o;2567:222::-;2660:4;2698:2;2687:9;2683:18;2675:26;;2711:71;2779:1;2768:9;2764:17;2755:6;2711:71;:::i;:::-;2567:222;;;;:::o;2795:99::-;2847:6;2881:5;2875:12;2865:22;;2795:99;;;:::o;2900:169::-;2984:11;3018:6;3013:3;3006:19;3058:4;3053:3;3049:14;3034:29;;2900:169;;;;:::o;3075:246::-;3156:1;3166:113;3180:6;3177:1;3174:13;3166:113;;;3265:1;3260:3;3256:11;3250:18;3246:1;3241:3;3237:11;3230:39;3202:2;3199:1;3195:10;3190:15;;3166:113;;;3313:1;3304:6;3299:3;3295:16;3288:27;3137:184;3075:246;;;:::o;3327:102::-;3368:6;3419:2;3415:7;3410:2;3403:5;3399:14;3395:28;3385:38;;3327:102;;;:::o;3435:377::-;3523:3;3551:39;3584:5;3551:39;:::i;:::-;3606:71;3670:6;3665:3;3606:71;:::i;:::-;3599:78;;3686:65;3744:6;3739:3;3732:4;3725:5;3721:16;3686:65;:::i;:::-;3776:29;3798:6;3776:29;:::i;:::-;3771:3;3767:39;3760:46;;3527:285;3435:377;;;;:::o;3818:313::-;3931:4;3969:2;3958:9;3954:18;3946:26;;4018:9;4012:4;4008:20;4004:1;3993:9;3989:17;3982:47;4046:78;4119:4;4110:6;4046:78;:::i;:::-;4038:86;;3818:313;;;;:::o;4137:122::-;4210:24;4228:5;4210:24;:::i;:::-;4203:5;4200:35;4190:63;;4249:1;4246;4239:12;4190:63;4137:122;:::o;4265:139::-;4311:5;4349:6;4336:20;4327:29;;4365:33;4392:5;4365:33;:::i;:::-;4265:139;;;;:::o;4410:329::-;4469:6;4518:2;4506:9;4497:7;4493:23;4489:32;4486:119;;;4524:79;;:::i;:::-;4486:119;4644:1;4669:53;4714:7;4705:6;4694:9;4690:22;4669:53;:::i;:::-;4659:63;;4615:117;4410:329;;;;:::o;4745:118::-;4832:24;4850:5;4832:24;:::i;:::-;4827:3;4820:37;4745:118;;:::o;4869:222::-;4962:4;5000:2;4989:9;4985:18;4977:26;;5013:71;5081:1;5070:9;5066:17;5057:6;5013:71;:::i;:::-;4869:222;;;;:::o;5097:474::-;5165:6;5173;5222:2;5210:9;5201:7;5197:23;5193:32;5190:119;;;5228:79;;:::i;:::-;5190:119;5348:1;5373:53;5418:7;5409:6;5398:9;5394:22;5373:53;:::i;:::-;5363:63;;5319:117;5475:2;5501:53;5546:7;5537:6;5526:9;5522:22;5501:53;:::i;:::-;5491:63;;5446:118;5097:474;;;;;:::o;5577:619::-;5654:6;5662;5670;5719:2;5707:9;5698:7;5694:23;5690:32;5687:119;;;5725:79;;:::i;:::-;5687:119;5845:1;5870:53;5915:7;5906:6;5895:9;5891:22;5870:53;:::i;:::-;5860:63;;5816:117;5972:2;5998:53;6043:7;6034:6;6023:9;6019:22;5998:53;:::i;:::-;5988:63;;5943:118;6100:2;6126:53;6171:7;6162:6;6151:9;6147:22;6126:53;:::i;:::-;6116:63;;6071:118;5577:619;;;;;:::o;6202:116::-;6272:21;6287:5;6272:21;:::i;:::-;6265:5;6262:32;6252:60;;6308:1;6305;6298:12;6252:60;6202:116;:::o;6324:133::-;6367:5;6405:6;6392:20;6383:29;;6421:30;6445:5;6421:30;:::i;:::-;6324:133;;;;:::o;6463:468::-;6528:6;6536;6585:2;6573:9;6564:7;6560:23;6556:32;6553:119;;;6591:79;;:::i;:::-;6553:119;6711:1;6736:53;6781:7;6772:6;6761:9;6757:22;6736:53;:::i;:::-;6726:63;;6682:117;6838:2;6864:50;6906:7;6897:6;6886:9;6882:22;6864:50;:::i;:::-;6854:60;;6809:115;6463:468;;;;;:::o;6937:117::-;7046:1;7043;7036:12;7060:117;7169:1;7166;7159:12;7183:180;7231:77;7228:1;7221:88;7328:4;7325:1;7318:15;7352:4;7349:1;7342:15;7369:281;7452:27;7474:4;7452:27;:::i;:::-;7444:6;7440:40;7582:6;7570:10;7567:22;7546:18;7534:10;7531:34;7528:62;7525:88;;;7593:18;;:::i;:::-;7525:88;7633:10;7629:2;7622:22;7412:238;7369:281;;:::o;7656:129::-;7690:6;7717:20;;:::i;:::-;7707:30;;7746:33;7774:4;7766:6;7746:33;:::i;:::-;7656:129;;;:::o;7791:307::-;7852:4;7942:18;7934:6;7931:30;7928:56;;;7964:18;;:::i;:::-;7928:56;8002:29;8024:6;8002:29;:::i;:::-;7994:37;;8086:4;8080;8076:15;8068:23;;7791:307;;;:::o;8104:146::-;8201:6;8196:3;8191;8178:30;8242:1;8233:6;8228:3;8224:16;8217:27;8104:146;;;:::o;8256:423::-;8333:5;8358:65;8374:48;8415:6;8374:48;:::i;:::-;8358:65;:::i;:::-;8349:74;;8446:6;8439:5;8432:21;8484:4;8477:5;8473:16;8522:3;8513:6;8508:3;8504:16;8501:25;8498:112;;;8529:79;;:::i;:::-;8498:112;8619:54;8666:6;8661:3;8656;8619:54;:::i;:::-;8339:340;8256:423;;;;;:::o;8698:338::-;8753:5;8802:3;8795:4;8787:6;8783:17;8779:27;8769:122;;8810:79;;:::i;:::-;8769:122;8927:6;8914:20;8952:78;9026:3;9018:6;9011:4;9003:6;8999:17;8952:78;:::i;:::-;8943:87;;8759:277;8698:338;;;;:::o;9042:943::-;9137:6;9145;9153;9161;9210:3;9198:9;9189:7;9185:23;9181:33;9178:120;;;9217:79;;:::i;:::-;9178:120;9337:1;9362:53;9407:7;9398:6;9387:9;9383:22;9362:53;:::i;:::-;9352:63;;9308:117;9464:2;9490:53;9535:7;9526:6;9515:9;9511:22;9490:53;:::i;:::-;9480:63;;9435:118;9592:2;9618:53;9663:7;9654:6;9643:9;9639:22;9618:53;:::i;:::-;9608:63;;9563:118;9748:2;9737:9;9733:18;9720:32;9779:18;9771:6;9768:30;9765:117;;;9801:79;;:::i;:::-;9765:117;9906:62;9960:7;9951:6;9940:9;9936:22;9906:62;:::i;:::-;9896:72;;9691:287;9042:943;;;;;;;:::o;9991:474::-;10059:6;10067;10116:2;10104:9;10095:7;10091:23;10087:32;10084:119;;;10122:79;;:::i;:::-;10084:119;10242:1;10267:53;10312:7;10303:6;10292:9;10288:22;10267:53;:::i;:::-;10257:63;;10213:117;10369:2;10395:53;10440:7;10431:6;10420:9;10416:22;10395:53;:::i;:::-;10385:63;;10340:118;9991:474;;;;;:::o;10471:180::-;10519:77;10516:1;10509:88;10616:4;10613:1;10606:15;10640:4;10637:1;10630:15;10657:320;10701:6;10738:1;10732:4;10728:12;10718:22;;10785:1;10779:4;10775:12;10806:18;10796:81;;10862:4;10854:6;10850:17;10840:27;;10796:81;10924:2;10916:6;10913:14;10893:18;10890:38;10887:84;;10943:18;;:::i;:::-;10887:84;10708:269;10657:320;;;:::o;10983:220::-;11123:34;11119:1;11111:6;11107:14;11100:58;11192:3;11187:2;11179:6;11175:15;11168:28;10983:220;:::o;11209:366::-;11351:3;11372:67;11436:2;11431:3;11372:67;:::i;:::-;11365:74;;11448:93;11537:3;11448:93;:::i;:::-;11566:2;11561:3;11557:12;11550:19;;11209:366;;;:::o;11581:419::-;11747:4;11785:2;11774:9;11770:18;11762:26;;11834:9;11828:4;11824:20;11820:1;11809:9;11805:17;11798:47;11862:131;11988:4;11862:131;:::i;:::-;11854:139;;11581:419;;;:::o;12006:248::-;12146:34;12142:1;12134:6;12130:14;12123:58;12215:31;12210:2;12202:6;12198:15;12191:56;12006:248;:::o;12260:366::-;12402:3;12423:67;12487:2;12482:3;12423:67;:::i;:::-;12416:74;;12499:93;12588:3;12499:93;:::i;:::-;12617:2;12612:3;12608:12;12601:19;;12260:366;;;:::o;12632:419::-;12798:4;12836:2;12825:9;12821:18;12813:26;;12885:9;12879:4;12875:20;12871:1;12860:9;12856:17;12849:47;12913:131;13039:4;12913:131;:::i;:::-;12905:139;;12632:419;;;:::o;13057:232::-;13197:34;13193:1;13185:6;13181:14;13174:58;13266:15;13261:2;13253:6;13249:15;13242:40;13057:232;:::o;13295:366::-;13437:3;13458:67;13522:2;13517:3;13458:67;:::i;:::-;13451:74;;13534:93;13623:3;13534:93;:::i;:::-;13652:2;13647:3;13643:12;13636:19;;13295:366;;;:::o;13667:419::-;13833:4;13871:2;13860:9;13856:18;13848:26;;13920:9;13914:4;13910:20;13906:1;13895:9;13891:17;13884:47;13948:131;14074:4;13948:131;:::i;:::-;13940:139;;13667:419;;;:::o;14092:228::-;14232:34;14228:1;14220:6;14216:14;14209:58;14301:11;14296:2;14288:6;14284:15;14277:36;14092:228;:::o;14326:366::-;14468:3;14489:67;14553:2;14548:3;14489:67;:::i;:::-;14482:74;;14565:93;14654:3;14565:93;:::i;:::-;14683:2;14678:3;14674:12;14667:19;;14326:366;;;:::o;14698:419::-;14864:4;14902:2;14891:9;14887:18;14879:26;;14951:9;14945:4;14941:20;14937:1;14926:9;14922:17;14915:47;14979:131;15105:4;14979:131;:::i;:::-;14971:139;;14698:419;;;:::o;15123:147::-;15224:11;15261:3;15246:18;;15123:147;;;;:::o;15276:114::-;;:::o;15396:398::-;15555:3;15576:83;15657:1;15652:3;15576:83;:::i;:::-;15569:90;;15668:93;15757:3;15668:93;:::i;:::-;15786:1;15781:3;15777:11;15770:18;;15396:398;;;:::o;15800:379::-;15984:3;16006:147;16149:3;16006:147;:::i;:::-;15999:154;;16170:3;16163:10;;15800:379;;;:::o;16185:174::-;16325:26;16321:1;16313:6;16309:14;16302:50;16185:174;:::o;16365:366::-;16507:3;16528:67;16592:2;16587:3;16528:67;:::i;:::-;16521:74;;16604:93;16693:3;16604:93;:::i;:::-;16722:2;16717:3;16713:12;16706:19;;16365:366;;;:::o;16737:419::-;16903:4;16941:2;16930:9;16926:18;16918:26;;16990:9;16984:4;16980:20;16976:1;16965:9;16961:17;16954:47;17018:131;17144:4;17018:131;:::i;:::-;17010:139;;16737:419;;;:::o;17162:228::-;17302:34;17298:1;17290:6;17286:14;17279:58;17371:11;17366:2;17358:6;17354:15;17347:36;17162:228;:::o;17396:366::-;17538:3;17559:67;17623:2;17618:3;17559:67;:::i;:::-;17552:74;;17635:93;17724:3;17635:93;:::i;:::-;17753:2;17748:3;17744:12;17737:19;;17396:366;;;:::o;17768:419::-;17934:4;17972:2;17961:9;17957:18;17949:26;;18021:9;18015:4;18011:20;18007:1;17996:9;17992:17;17985:47;18049:131;18175:4;18049:131;:::i;:::-;18041:139;;17768:419;;;:::o;18193:180::-;18241:77;18238:1;18231:88;18338:4;18335:1;18328:15;18362:4;18359:1;18352:15;18379:225;18519:34;18515:1;18507:6;18503:14;18496:58;18588:8;18583:2;18575:6;18571:15;18564:33;18379:225;:::o;18610:366::-;18752:3;18773:67;18837:2;18832:3;18773:67;:::i;:::-;18766:74;;18849:93;18938:3;18849:93;:::i;:::-;18967:2;18962:3;18958:12;18951:19;;18610:366;;;:::o;18982:419::-;19148:4;19186:2;19175:9;19171:18;19163:26;;19235:9;19229:4;19225:20;19221:1;19210:9;19206:17;19199:47;19263:131;19389:4;19263:131;:::i;:::-;19255:139;;18982:419;;;:::o;19407:224::-;19547:34;19543:1;19535:6;19531:14;19524:58;19616:7;19611:2;19603:6;19599:15;19592:32;19407:224;:::o;19637:366::-;19779:3;19800:67;19864:2;19859:3;19800:67;:::i;:::-;19793:74;;19876:93;19965:3;19876:93;:::i;:::-;19994:2;19989:3;19985:12;19978:19;;19637:366;;;:::o;20009:419::-;20175:4;20213:2;20202:9;20198:18;20190:26;;20262:9;20256:4;20252:20;20248:1;20237:9;20233:17;20226:47;20290:131;20416:4;20290:131;:::i;:::-;20282:139;;20009:419;;;:::o;20434:223::-;20574:34;20570:1;20562:6;20558:14;20551:58;20643:6;20638:2;20630:6;20626:15;20619:31;20434:223;:::o;20663:366::-;20805:3;20826:67;20890:2;20885:3;20826:67;:::i;:::-;20819:74;;20902:93;20991:3;20902:93;:::i;:::-;21020:2;21015:3;21011:12;21004:19;;20663:366;;;:::o;21035:419::-;21201:4;21239:2;21228:9;21224:18;21216:26;;21288:9;21282:4;21278:20;21274:1;21263:9;21259:17;21252:47;21316:131;21442:4;21316:131;:::i;:::-;21308:139;;21035:419;;;:::o;21460:182::-;21600:34;21596:1;21588:6;21584:14;21577:58;21460:182;:::o;21648:366::-;21790:3;21811:67;21875:2;21870:3;21811:67;:::i;:::-;21804:74;;21887:93;21976:3;21887:93;:::i;:::-;22005:2;22000:3;21996:12;21989:19;;21648:366;;;:::o;22020:419::-;22186:4;22224:2;22213:9;22209:18;22201:26;;22273:9;22267:4;22263:20;22259:1;22248:9;22244:17;22237:47;22301:131;22427:4;22301:131;:::i;:::-;22293:139;;22020:419;;;:::o;22445:180::-;22493:77;22490:1;22483:88;22590:4;22587:1;22580:15;22614:4;22611:1;22604:15;22631:410;22671:7;22694:20;22712:1;22694:20;:::i;:::-;22689:25;;22728:20;22746:1;22728:20;:::i;:::-;22723:25;;22783:1;22780;22776:9;22805:30;22823:11;22805:30;:::i;:::-;22794:41;;22984:1;22975:7;22971:15;22968:1;22965:22;22945:1;22938:9;22918:83;22895:139;;23014:18;;:::i;:::-;22895:139;22679:362;22631:410;;;;:::o;23047:180::-;23095:77;23092:1;23085:88;23192:4;23189:1;23182:15;23216:4;23213:1;23206:15;23233:185;23273:1;23290:20;23308:1;23290:20;:::i;:::-;23285:25;;23324:20;23342:1;23324:20;:::i;:::-;23319:25;;23363:1;23353:35;;23368:18;;:::i;:::-;23353:35;23410:1;23407;23403:9;23398:14;;23233:185;;;;:::o;23424:175::-;23564:27;23560:1;23552:6;23548:14;23541:51;23424:175;:::o;23605:366::-;23747:3;23768:67;23832:2;23827:3;23768:67;:::i;:::-;23761:74;;23844:93;23933:3;23844:93;:::i;:::-;23962:2;23957:3;23953:12;23946:19;;23605:366;;;:::o;23977:419::-;24143:4;24181:2;24170:9;24166:18;24158:26;;24230:9;24224:4;24220:20;24216:1;24205:9;24201:17;24194:47;24258:131;24384:4;24258:131;:::i;:::-;24250:139;;23977:419;;;:::o;24402:237::-;24542:34;24538:1;24530:6;24526:14;24519:58;24611:20;24606:2;24598:6;24594:15;24587:45;24402:237;:::o;24645:366::-;24787:3;24808:67;24872:2;24867:3;24808:67;:::i;:::-;24801:74;;24884:93;24973:3;24884:93;:::i;:::-;25002:2;24997:3;24993:12;24986:19;;24645:366;;;:::o;25017:419::-;25183:4;25221:2;25210:9;25206:18;25198:26;;25270:9;25264:4;25260:20;25256:1;25245:9;25241:17;25234:47;25298:131;25424:4;25298:131;:::i;:::-;25290:139;;25017:419;;;:::o;25442:194::-;25482:4;25502:20;25520:1;25502:20;:::i;:::-;25497:25;;25536:20;25554:1;25536:20;:::i;:::-;25531:25;;25580:1;25577;25573:9;25565:17;;25604:1;25598:4;25595:11;25592:37;;;25609:18;;:::i;:::-;25592:37;25442:194;;;;:::o;25642:191::-;25682:3;25701:20;25719:1;25701:20;:::i;:::-;25696:25;;25735:20;25753:1;25735:20;:::i;:::-;25730:25;;25778:1;25775;25771:9;25764:16;;25799:3;25796:1;25793:10;25790:36;;;25806:18;;:::i;:::-;25790:36;25642:191;;;;:::o;25839:98::-;25890:6;25924:5;25918:12;25908:22;;25839:98;;;:::o;25943:168::-;26026:11;26060:6;26055:3;26048:19;26100:4;26095:3;26091:14;26076:29;;25943:168;;;;:::o;26117:373::-;26203:3;26231:38;26263:5;26231:38;:::i;:::-;26285:70;26348:6;26343:3;26285:70;:::i;:::-;26278:77;;26364:65;26422:6;26417:3;26410:4;26403:5;26399:16;26364:65;:::i;:::-;26454:29;26476:6;26454:29;:::i;:::-;26449:3;26445:39;26438:46;;26207:283;26117:373;;;;:::o;26496:640::-;26691:4;26729:3;26718:9;26714:19;26706:27;;26743:71;26811:1;26800:9;26796:17;26787:6;26743:71;:::i;:::-;26824:72;26892:2;26881:9;26877:18;26868:6;26824:72;:::i;:::-;26906;26974:2;26963:9;26959:18;26950:6;26906:72;:::i;:::-;27025:9;27019:4;27015:20;27010:2;26999:9;26995:18;26988:48;27053:76;27124:4;27115:6;27053:76;:::i;:::-;27045:84;;26496:640;;;;;;;:::o;27142:141::-;27198:5;27229:6;27223:13;27214:22;;27245:32;27271:5;27245:32;:::i;:::-;27142:141;;;;:::o;27289:349::-;27358:6;27407:2;27395:9;27386:7;27382:23;27378:32;27375:119;;;27413:79;;:::i;:::-;27375:119;27533:1;27558:63;27613:7;27604:6;27593:9;27589:22;27558:63;:::i;:::-;27548:73;;27504:127;27289:349;;;;:::o;27644:182::-;27784:34;27780:1;27772:6;27768:14;27761:58;27644:182;:::o;27832:366::-;27974:3;27995:67;28059:2;28054:3;27995:67;:::i;:::-;27988:74;;28071:93;28160:3;28071:93;:::i;:::-;28189:2;28184:3;28180:12;28173:19;;27832:366;;;:::o;28204:419::-;28370:4;28408:2;28397:9;28393:18;28385:26;;28457:9;28451:4;28447:20;28443:1;28432:9;28428:17;28421:47;28485:131;28611:4;28485:131;:::i;:::-;28477:139;;28204:419;;;:::o;28629:178::-;28769:30;28765:1;28757:6;28753:14;28746:54;28629:178;:::o;28813:366::-;28955:3;28976:67;29040:2;29035:3;28976:67;:::i;:::-;28969:74;;29052:93;29141:3;29052:93;:::i;:::-;29170:2;29165:3;29161:12;29154:19;;28813:366;;;:::o;29185:419::-;29351:4;29389:2;29378:9;29374:18;29366:26;;29438:9;29432:4;29428:20;29424:1;29413:9;29409:17;29402:47;29466:131;29592:4;29466:131;:::i;:::-;29458:139;;29185:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"2477600","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"2987","claim()":"189","depositFunds()":"infinite","getAddressToAmountFunded(address)":"2910","getApproved(uint256)":"5278","getFunder(uint256)":"5034","getIsGroupWithdrawal()":"2546","getMinimumFundingAmount()":"infinite","getTotalAmount()":"2526","getVestingPeriod()":"2549","getWithdrawalFee()":"2526","isApprovedForAll(address,address)":"infinite","name()":"infinite","owner()":"2612","ownerOf(uint256)":"3066","renounceOwnership()":"30444","requestForWithdrawal(uint256)":"51351","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","supportsInterface(bytes4)":"820","symbol()":"infinite","tokenURI(uint256)":"infinite","transferFrom(address,address,uint256)":"infinite","transferOwnership(address)":"30854","withdrawFunds()":"infinite","withdrawalCheck()":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","claim()":"4e71d92d","depositFunds()":"e2c41dbc","getAddressToAmountFunded(address)":"0343fb25","getApproved(uint256)":"081812fc","getFunder(uint256)":"d7b4750c","getIsGroupWithdrawal()":"9c885eb3","getMinimumFundingAmount()":"db06941e","getTotalAmount()":"65ac4341","getVestingPeriod()":"1096cb79","getWithdrawalFee()":"d8e159f8","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","owner()":"8da5cb5b","ownerOf(uint256)":"6352211e","renounceOwnership()":"715018a6","requestForWithdrawal(uint256)":"1095941e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd","transferOwnership(address)":"f2fde38b","withdrawFunds()":"24600fc3","withdrawalCheck()":"7dc4c2ba"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundingContract__NotEnoughETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundingContract__NotGroupFunding\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundingContract__TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIsGroupWithdrawal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumFundingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"requestForWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundingContract.sol\":\"FundingContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/FundingContract.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n\\nerror FundingContract__TransferFailed();\\nerror FundingContract__NotEnoughETH();\\nerror FundingContract__NotGroupFunding();\\n\\ncontract FundingContract is ERC721, Ownable {\\n\\n    using SafeMath for uint256;\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIds;\\n    Counters.Counter private _withdrawers;\\n\\n    uint256 private s_totalAmount;\\n    uint256 private s_withdrawalFee;\\n    uint256 private s_vestingPeriod;\\n    bool private _isGroupWithdrawal;\\n\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] s_funders;\\n\\n    mapping(uint256 => mapping(address => bool)) private s_requestForWithdrawal; \\n\\n    \\n\\n    modifier onlyGroupFunding() {\\n        if(!_isGroupWithdrawal){\\n            revert FundingContract__NotGroupFunding();\\n        }\\n       _;\\n    }\\n\\n    constructor(\\n        // uint256 totalFunding,\\n        // uint256 withdrawalFee,\\n        // uint256 vestingPeriod,\\n        // bool isGroupWithdrawal\\n    ) ERC721('FundingContractToken', 'FCT'){\\n\\n        // s_totalAmount = totalFunding;\\n        // s_withdrawalFee = withdrawalFee;\\n        // s_vestingPeriod = vestingPeriod;\\n        // _isGroupWithdrawal = isGroupWithdrawal;\\n    }\\n\\n\\n\\n    function depositFunds() public payable{\\n        \\n        uint256 minFundingAmount = getMinimumFundingAmount();\\n        uint256 currentTokenId = _tokenIds.current();\\n\\n        if(msg.value <= minFundingAmount){\\n            revert FundingContract__NotEnoughETH();\\n        }\\n        s_addressToAmountFunded[msg.sender] = msg.value;\\n        s_funders.push(msg.sender);\\n        _safeMint(msg.sender, currentTokenId);\\n        _tokenIds.increment();\\n        \\n\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory){\\n        /**\\n         *  TODO \\n         * \\n         */\\n    }\\n\\n    function claim() public {\\n        /**\\n         * TODO\\n         * \\n         */\\n    }\\n\\n    function requestForWithdrawal(uint256 tokenId) public onlyGroupFunding {\\n        s_requestForWithdrawal[tokenId][msg.sender] = true;\\n        _withdrawers.increment();\\n    }\\n\\n    // Receive any funds sent to the contract\\n    receive() external payable {}\\n\\n    function withdrawalCheck() public onlyGroupFunding returns(bool){\\n        uint256 numberOfWithdrawers = _withdrawers.current();\\n        uint256 withdrawalLimit = s_funders.length.mul(60).div(100);\\n        if(numberOfWithdrawers >= withdrawalLimit){\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n\\n\\n    function withdrawFunds() public onlyOwner{\\n        if(_isGroupWithdrawal){\\n            require(withdrawalCheck(), 'There is no majority approval to withdraw');\\n        }\\n        uint256 amount = address(this).balance;\\n        (bool success, ) = payable(msg.sender).call{value:amount}(\\\"\\\");\\n        if(!success){\\n            revert FundingContract__TransferFailed();\\n        }\\n    }\\n\\n    function getMinimumFundingAmount() public view returns(uint256){\\n        return s_totalAmount.div(s_vestingPeriod);\\n    }\\n\\n    function getTotalAmount() public view returns(uint256){\\n        return s_totalAmount;\\n    }\\n\\n\\n    function getWithdrawalFee() public view returns(uint256){\\n        return s_withdrawalFee;\\n    }\\n\\n    function getVestingPeriod() public view returns(uint256){\\n        return s_vestingPeriod;\\n    }\\n\\n    function getIsGroupWithdrawal() public view returns(bool){\\n        return _isGroupWithdrawal;\\n    }\\n\\n    function getAddressToAmountFunded(address funder) public view returns(uint256){\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getFunder(uint256 index) public view returns(address){\\n        return s_funders[index];\\n    }\\n\\n\\n\\n}\",\"keccak256\":\"0x0bed8e7f23502136ea9214f5309672a48e4f59852459700e48c54875f2824fb7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"contracts/FundingContract.sol:FundingContract","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":140,"contract":"contracts/FundingContract.sol:FundingContract","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":144,"contract":"contracts/FundingContract.sol:FundingContract","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":148,"contract":"contracts/FundingContract.sol:FundingContract","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":152,"contract":"contracts/FundingContract.sol:FundingContract","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":158,"contract":"contracts/FundingContract.sol:FundingContract","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":7,"contract":"contracts/FundingContract.sol:FundingContract","label":"_owner","offset":0,"slot":"6","type":"t_address"},{"astId":3058,"contract":"contracts/FundingContract.sol:FundingContract","label":"_tokenIds","offset":0,"slot":"7","type":"t_struct(Counter)1576_storage"},{"astId":3061,"contract":"contracts/FundingContract.sol:FundingContract","label":"_withdrawers","offset":0,"slot":"8","type":"t_struct(Counter)1576_storage"},{"astId":3063,"contract":"contracts/FundingContract.sol:FundingContract","label":"s_totalAmount","offset":0,"slot":"9","type":"t_uint256"},{"astId":3065,"contract":"contracts/FundingContract.sol:FundingContract","label":"s_withdrawalFee","offset":0,"slot":"10","type":"t_uint256"},{"astId":3067,"contract":"contracts/FundingContract.sol:FundingContract","label":"s_vestingPeriod","offset":0,"slot":"11","type":"t_uint256"},{"astId":3069,"contract":"contracts/FundingContract.sol:FundingContract","label":"_isGroupWithdrawal","offset":0,"slot":"12","type":"t_bool"},{"astId":3073,"contract":"contracts/FundingContract.sol:FundingContract","label":"s_addressToAmountFunded","offset":0,"slot":"13","type":"t_mapping(t_address,t_uint256)"},{"astId":3076,"contract":"contracts/FundingContract.sol:FundingContract","label":"s_funders","offset":0,"slot":"14","type":"t_array(t_address)dyn_storage"},{"astId":3082,"contract":"contracts/FundingContract.sol:FundingContract","label":"s_requestForWithdrawal","offset":0,"slot":"15","type":"t_mapping(t_uint256,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"base":"t_address","encoding":"dynamic_array","label":"address[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Counter)1576_storage":{"encoding":"inplace","label":"struct Counters.Counter","members":[{"astId":1575,"contract":"contracts/FundingContract.sol:FundingContract","label":"_value","offset":0,"slot":"0","type":"t_uint256"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}